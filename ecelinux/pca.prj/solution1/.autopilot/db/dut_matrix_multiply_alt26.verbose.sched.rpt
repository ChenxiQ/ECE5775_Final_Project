

================================================================
== Vivado HLS Report for 'dut_matrix_multiply_alt26'
================================================================
* Date:           Fri Nov 11 23:14:23 2022

* Version:        2016.2 (Build 1577090 on Thu Jun 02 16:59:10 MDT 2016)
* Project:        pca.prj
* Solution:       solution1
* Product family: zynq
* Target device:  xc7z020clg484-1


================================================================
== Performance Estimates
================================================================
+ Timing (ns): 
    * Summary: 
    +--------+-------+----------+------------+
    |  Clock | Target| Estimated| Uncertainty|
    +--------+-------+----------+------------+
    |ap_clk  |  10.00|      9.09|        1.25|
    +--------+-------+----------+------------+

+ Latency (clock cycles): 
    * Summary: 
    +----------+----------+----------+----------+---------+
    |       Latency       |       Interval      | Pipeline|
    |    min   |    max   |    min   |    max   |   Type  |
    +----------+----------+----------+----------+---------+
    |  61465613|  61465613|  61465613|  61465613|   none  |
    +----------+----------+----------+----------+---------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        +------------------------------------+----------+----------+----------+-----------+-----------+----------+----------+
        |                                    |       Latency       | Iteration|  Initiation Interval  |   Trip   |          |
        |              Loop Name             |    min   |    max   |  Latency |  achieved |   target  |   Count  | Pipelined|
        +------------------------------------+----------+----------+----------+-----------+-----------+----------+----------+
        |- a_col_loop_a_row_loop_b_col_loop  |  61465611|  61465611|        13|          1|          1|  61465600|    yes   |
        +------------------------------------+----------+----------+----------+-----------+-----------+----------+----------+

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 0
ResetActiveHigh: 1
IsCombinational: 0
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 0
HasVarLatency: 1
IsPipeline: 0
IsRtlPipelined: 0
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0

+ Individual pipeline summary: 
  * Pipeline-0: initiation interval (II) = 1, depth = 13


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states: 15
* Pipeline: 1
  Pipeline-0: II = 1, D = 13, States = { 2 3 4 5 6 7 8 9 10 11 12 13 14 }
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 
	2  / true
2 --> 
	15  / (exitcond_flatten1)
	3  / (!exitcond_flatten1)
3 --> 
	4  / true
4 --> 
	5  / true
5 --> 
	6  / true
6 --> 
	7  / true
7 --> 
	8  / true
8 --> 
	9  / true
9 --> 
	10  / true
10 --> 
	11  / true
11 --> 
	12  / true
12 --> 
	13  / true
13 --> 
	14  / true
14 --> 
	2  / true
15 --> 
* FSM state operations: 

 <State 1>: 1.57ns
ST_1: sum_mult [1/1] 0.00ns
:0  %sum_mult = alloca [614656 x float], align 4

ST_1: stg_17 [1/1] 1.57ns
:1  br label %1


 <State 2>: 6.92ns
ST_2: indvar_flatten1 [1/1] 0.00ns
:0  %indvar_flatten1 = phi i26 [ 0, %0 ], [ %indvar_flatten_next1, %ifBlock ]

ST_2: Col_assign_2 [1/1] 0.00ns
:1  %Col_assign_2 = phi i7 [ 0, %0 ], [ %tmp_i_i_mid2_v, %ifBlock ]

ST_2: indvar_flatten [1/1] 0.00ns
:2  %indvar_flatten = phi i20 [ 0, %0 ], [ %indvar_flatten_next, %ifBlock ]

ST_2: Row_assign [1/1] 0.00ns
:3  %Row_assign = phi i10 [ 0, %0 ], [ %tmp_34_mid2, %ifBlock ]

ST_2: Col_assign [1/1] 0.00ns
:4  %Col_assign = phi i10 [ 0, %0 ], [ %c, %ifBlock ]

ST_2: exitcond_flatten1 [1/1] 2.43ns
:5  %exitcond_flatten1 = icmp eq i26 %indvar_flatten1, -5643264

ST_2: indvar_flatten_next1 [1/1] 2.32ns
:6  %indvar_flatten_next1 = add i26 %indvar_flatten1, 1

ST_2: stg_25 [1/1] 0.00ns
:7  br i1 %exitcond_flatten1, label %7, label %.reset7

ST_2: k [1/1] 1.72ns
.reset7:0  %k = add i7 %Col_assign_2, 1

ST_2: exitcond_flatten [1/1] 2.34ns
.reset7:3  %exitcond_flatten = icmp eq i20 %indvar_flatten, -433920

ST_2: Row_assign_mid [1/1] 1.37ns
.reset7:4  %Row_assign_mid = select i1 %exitcond_flatten, i10 0, i10 %Row_assign

ST_2: tmp_mid1 [1/1] 1.97ns
.reset7:5  %tmp_mid1 = icmp eq i7 %k, 0

ST_2: tmp2 [1/1] 1.97ns
.reset7:6  %tmp2 = icmp eq i7 %Col_assign_2, 0

ST_2: tmp_mid2 [1/1] 1.37ns
.reset7:7  %tmp_mid2 = select i1 %exitcond_flatten, i1 %tmp_mid1, i1 %tmp2

ST_2: tmp_mid1_20 [1/1] 1.97ns
.reset7:8  %tmp_mid1_20 = icmp eq i7 %k, -29

ST_2: tmp_1 [1/1] 1.97ns
.reset7:9  %tmp_1 = icmp eq i7 %Col_assign_2, -29

ST_2: tmp_mid2_21 [1/1] 1.37ns
.reset7:10  %tmp_mid2_21 = select i1 %exitcond_flatten, i1 %tmp_mid1_20, i1 %tmp_1

ST_2: tmp_i_i_mid2_v [1/1] 1.37ns
.reset7:11  %tmp_i_i_mid2_v = select i1 %exitcond_flatten, i7 %k, i7 %Col_assign_2

ST_2: not_exitcond_flatten [1/1] 0.00ns (grouped into LUT with out node exitcond_mid)
.reset7:15  %not_exitcond_flatten = xor i1 %exitcond_flatten, true

ST_2: exitcond [1/1] 2.07ns
.reset7:16  %exitcond = icmp eq i10 %Col_assign, -240

ST_2: exitcond_mid [1/1] 1.37ns (out node of the LUT)
.reset7:17  %exitcond_mid = and i1 %exitcond, %not_exitcond_flatten

ST_2: r [1/1] 1.84ns
.reset7:18  %r = add i10 %Row_assign_mid, 1

ST_2: tmp_47 [1/1] 0.00ns (grouped into LUT with out node Col_assign_mid2)
.reset7:20  %tmp_47 = or i1 %exitcond_mid, %exitcond_flatten

ST_2: Col_assign_mid2 [1/1] 1.37ns (out node of the LUT)
.reset7:21  %Col_assign_mid2 = select i1 %tmp_47, i10 0, i10 %Col_assign

ST_2: tmp_34_mid2 [1/1] 1.37ns
.reset7:22  %tmp_34_mid2 = select i1 %exitcond_mid, i10 %r, i10 %Row_assign_mid

ST_2: stg_43 [1/1] 0.00ns
.reset7:46  br i1 %tmp_mid2, label %2, label %3

ST_2: stg_44 [1/1] 0.00ns
:1  br i1 %tmp_mid2_21, label %4, label %5

ST_2: c [1/1] 1.84ns
ifBlock:1  %c = add i10 %Col_assign_mid2, 1

ST_2: indvar_flatten_op [1/1] 2.08ns
ifBlock:2  %indvar_flatten_op = add i20 %indvar_flatten, 1

ST_2: indvar_flatten_next [1/1] 1.37ns
ifBlock:3  %indvar_flatten_next = select i1 %exitcond_flatten, i20 1, i20 %indvar_flatten_op


 <State 3>: 9.09ns
ST_3: tmp_i_i_mid2_cast1 [1/1] 0.00ns
.reset7:12  %tmp_i_i_mid2_cast1 = zext i7 %tmp_i_i_mid2_v to i17

ST_3: tmp_i_i_mid2_cast [1/1] 0.00ns
.reset7:13  %tmp_i_i_mid2_cast = zext i7 %tmp_i_i_mid2_v to i17

ST_3: tmp_s [1/1] 3.36ns
.reset7:14  %tmp_s = mul i17 %tmp_i_i_mid2_cast, 784

ST_3: tmp_34_mid2_cast [1/1] 0.00ns
.reset7:24  %tmp_34_mid2_cast = zext i10 %tmp_34_mid2 to i17

ST_3: tmp_48 [1/1] 3.36ns
.reset7:25  %tmp_48 = mul i17 %tmp_34_mid2_cast, 100

ST_3: tmp_49 [1/1] 3.02ns
.reset7:26  %tmp_49 = add i17 %tmp_i_i_mid2_cast1, %tmp_48

ST_3: tmp_55_cast [1/1] 0.00ns
.reset7:27  %tmp_55_cast = zext i17 %tmp_49 to i64

ST_3: A_addr [1/1] 0.00ns
.reset7:28  %A_addr = getelementptr [78400 x float]* %A, i64 0, i64 %tmp_55_cast

ST_3: cast_in_a [2/2] 2.71ns
.reset7:33  %cast_in_a = load float* %A_addr, align 4

ST_3: tmp_i_i4_cast [1/1] 0.00ns
.reset7:35  %tmp_i_i4_cast = zext i10 %Col_assign_mid2 to i17

ST_3: tmp_51 [1/1] 3.02ns
.reset7:36  %tmp_51 = add i17 %tmp_i_i4_cast, %tmp_s

ST_3: tmp_57_cast [1/1] 0.00ns
.reset7:37  %tmp_57_cast = zext i17 %tmp_51 to i64

ST_3: B_addr [1/1] 0.00ns
.reset7:38  %B_addr = getelementptr [78400 x float]* %B, i64 0, i64 %tmp_57_cast

ST_3: cast_in_b [2/2] 2.71ns
.reset7:43  %cast_in_b = load float* %B_addr, align 4


 <State 4>: 8.99ns
ST_4: tmp_34_mid2_cast1 [1/1] 0.00ns
.reset7:23  %tmp_34_mid2_cast1 = zext i10 %tmp_34_mid2 to i20

ST_4: tmp_50 [1/1] 3.36ns
.reset7:29  %tmp_50 = mul i20 %tmp_34_mid2_cast1, 784

ST_4: cast_in_a [1/2] 2.71ns
.reset7:33  %cast_in_a = load float* %A_addr, align 4

ST_4: tmp_i_i4_cast1 [1/1] 0.00ns
.reset7:34  %tmp_i_i4_cast1 = zext i10 %Col_assign_mid2 to i20

ST_4: tmp_52 [1/1] 3.02ns
.reset7:39  %tmp_52 = add i20 %tmp_i_i4_cast1, %tmp_50

ST_4: tmp_58_cast [1/1] 0.00ns
.reset7:40  %tmp_58_cast = zext i20 %tmp_52 to i64

ST_4: C_addr [1/1] 0.00ns
.reset7:41  %C_addr = getelementptr [614656 x float]* %C, i64 0, i64 %tmp_58_cast

ST_4: sum_mult_addr [1/1] 0.00ns
.reset7:42  %sum_mult_addr = getelementptr [614656 x float]* %sum_mult, i64 0, i64 %tmp_58_cast

ST_4: cast_in_b [1/2] 2.71ns
.reset7:43  %cast_in_b = load float* %B_addr, align 4

ST_4: mult [4/4] 5.70ns
.reset7:44  %mult = fmul float %cast_in_a, %cast_in_b

ST_4: sum_mult_load [4/4] 2.61ns
.reset7:45  %sum_mult_load = load float* %sum_mult_addr, align 4


 <State 5>: 5.70ns
ST_5: mult [3/4] 5.70ns
.reset7:44  %mult = fmul float %cast_in_a, %cast_in_b

ST_5: sum_mult_load [3/4] 2.61ns
.reset7:45  %sum_mult_load = load float* %sum_mult_addr, align 4


 <State 6>: 5.70ns
ST_6: mult [2/4] 5.70ns
.reset7:44  %mult = fmul float %cast_in_a, %cast_in_b

ST_6: sum_mult_load [2/4] 2.61ns
.reset7:45  %sum_mult_load = load float* %sum_mult_addr, align 4


 <State 7>: 5.70ns
ST_7: mult [1/4] 5.70ns
.reset7:44  %mult = fmul float %cast_in_a, %cast_in_b

ST_7: sum_mult_load [1/4] 2.61ns
.reset7:45  %sum_mult_load = load float* %sum_mult_addr, align 4


 <State 8>: 7.26ns
ST_8: tmp_36 [5/5] 7.26ns
:0  %tmp_36 = fadd float %sum_mult_load, %mult


 <State 9>: 7.26ns
ST_9: tmp_36 [4/5] 7.26ns
:0  %tmp_36 = fadd float %sum_mult_load, %mult


 <State 10>: 7.26ns
ST_10: tmp_36 [3/5] 7.26ns
:0  %tmp_36 = fadd float %sum_mult_load, %mult


 <State 11>: 7.26ns
ST_11: tmp_36 [2/5] 7.26ns
:0  %tmp_36 = fadd float %sum_mult_load, %mult


 <State 12>: 7.26ns
ST_12: tmp_36 [1/5] 7.26ns
:0  %tmp_36 = fadd float %sum_mult_load, %mult


 <State 13>: 2.61ns
ST_13: stg_84 [2/2] 2.61ns
:0  store float %tmp_36, float* %sum_mult_addr, align 4

ST_13: stg_85 [2/2] 2.61ns
:0  store float %tmp_36, float* %C_addr, align 4

ST_13: stg_86 [2/2] 2.61ns
:0  store float %mult, float* %sum_mult_addr, align 4


 <State 14>: 2.61ns
ST_14: stg_87 [1/1] 0.00ns
.reset7:1  call void (...)* @_ssdm_op_SpecLoopName([33 x i8]* @a_col_loop_a_row_loop_b_col_lo)

ST_14: empty_19 [1/1] 0.00ns
.reset7:2  %empty_19 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 61465600, i64 61465600, i64 61465600)

ST_14: stg_89 [1/1] 0.00ns
.reset7:19  call void (...)* @_ssdm_op_SpecLoopName([22 x i8]* @a_row_loop_b_col_loop_str)

ST_14: stg_90 [1/1] 0.00ns
.reset7:30  call void (...)* @_ssdm_op_SpecLoopName([11 x i8]* @p_str1809) nounwind

ST_14: tmp_35 [1/1] 0.00ns
.reset7:31  %tmp_35 = call i32 (...)* @_ssdm_op_SpecRegionBegin([11 x i8]* @p_str1809)

ST_14: stg_92 [1/1] 0.00ns
.reset7:32  call void (...)* @_ssdm_op_SpecPipeline(i32 1, i32 1, i32 1, i32 0, [1 x i8]* @p_str1806) nounwind

ST_14: stg_93 [1/2] 2.61ns
:0  store float %tmp_36, float* %sum_mult_addr, align 4

ST_14: stg_94 [1/1] 0.00ns
:1  br label %6

ST_14: stg_95 [1/2] 2.61ns
:0  store float %tmp_36, float* %C_addr, align 4

ST_14: stg_96 [1/1] 0.00ns
:1  br label %6

ST_14: stg_97 [1/1] 0.00ns
:0  br label %ifBlock

ST_14: stg_98 [1/2] 2.61ns
:0  store float %mult, float* %sum_mult_addr, align 4

ST_14: stg_99 [1/1] 0.00ns
:1  br label %ifBlock

ST_14: empty [1/1] 0.00ns
ifBlock:0  %empty = call i32 (...)* @_ssdm_op_SpecRegionEnd([11 x i8]* @p_str1809, i32 %tmp_35)

ST_14: stg_101 [1/1] 0.00ns
ifBlock:4  br label %1


 <State 15>: 0.00ns
ST_15: stg_102 [1/1] 0.00ns
:0  ret void



============================================================
+ Verbose Summary: Timing violations
============================================================
Target clock period: 10ns, clock uncertainty: 1.25ns.

 <State 3>: 9.09ns
The critical path consists of the following:
	'mul' operation ('tmp_s', /opt/xilinx/xilinx_2016.2/Vivado_HLS/2016.2/common/technology/autopilot/hls/linear_algebra/utils/x_hls_matrix_utils.h:60->/opt/xilinx/xilinx_2016.2/Vivado_HLS/2016.2/common/technology/autopilot/hls/linear_algebra/utils/x_hls_matrix_utils.h:99->/opt/xilinx/xilinx_2016.2/Vivado_HLS/2016.2/common/technology/autopilot/hls/linear_algebra/hls_matrix_multiply.h:317) (3.36 ns)
	'add' operation ('tmp_51', /opt/xilinx/xilinx_2016.2/Vivado_HLS/2016.2/common/technology/autopilot/hls/linear_algebra/utils/x_hls_matrix_utils.h:60->/opt/xilinx/xilinx_2016.2/Vivado_HLS/2016.2/common/technology/autopilot/hls/linear_algebra/utils/x_hls_matrix_utils.h:99->/opt/xilinx/xilinx_2016.2/Vivado_HLS/2016.2/common/technology/autopilot/hls/linear_algebra/hls_matrix_multiply.h:317) (3.02 ns)
	'getelementptr' operation ('B_addr', /opt/xilinx/xilinx_2016.2/Vivado_HLS/2016.2/common/technology/autopilot/hls/linear_algebra/utils/x_hls_matrix_utils.h:60->/opt/xilinx/xilinx_2016.2/Vivado_HLS/2016.2/common/technology/autopilot/hls/linear_algebra/utils/x_hls_matrix_utils.h:99->/opt/xilinx/xilinx_2016.2/Vivado_HLS/2016.2/common/technology/autopilot/hls/linear_algebra/hls_matrix_multiply.h:317) (0 ns)
	'load' operation ('cast_in_b', /opt/xilinx/xilinx_2016.2/Vivado_HLS/2016.2/common/technology/autopilot/hls/linear_algebra/utils/x_hls_matrix_utils.h:60->/opt/xilinx/xilinx_2016.2/Vivado_HLS/2016.2/common/technology/autopilot/hls/linear_algebra/utils/x_hls_matrix_utils.h:99->/opt/xilinx/xilinx_2016.2/Vivado_HLS/2016.2/common/technology/autopilot/hls/linear_algebra/hls_matrix_multiply.h:317) on array 'B' (2.71 ns)

 <State 4>: 8.99ns
The critical path consists of the following:
	'mul' operation ('tmp_50', /opt/xilinx/xilinx_2016.2/Vivado_HLS/2016.2/common/technology/autopilot/hls/linear_algebra/hls_matrix_multiply.h:327) (3.36 ns)
	'add' operation ('tmp_52', /opt/xilinx/xilinx_2016.2/Vivado_HLS/2016.2/common/technology/autopilot/hls/linear_algebra/hls_matrix_multiply.h:327) (3.02 ns)
	'getelementptr' operation ('sum_mult_addr', /opt/xilinx/xilinx_2016.2/Vivado_HLS/2016.2/common/technology/autopilot/hls/linear_algebra/hls_matrix_multiply.h:327) (0 ns)
	'load' operation ('sum_mult_load', /opt/xilinx/xilinx_2016.2/Vivado_HLS/2016.2/common/technology/autopilot/hls/linear_algebra/hls_matrix_multiply.h:327) on array 'sum_mult', /opt/xilinx/xilinx_2016.2/Vivado_HLS/2016.2/common/technology/autopilot/hls/linear_algebra/hls_matrix_multiply.h:304 (2.61 ns)


============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
 - Input state : 
  - Chain level:
	State 1
	State 2
	State 3
	State 4
	State 5
	State 6
	State 7
	State 8
	State 9
	State 10
	State 11
	State 12
	State 13
	State 14
	State 15


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
