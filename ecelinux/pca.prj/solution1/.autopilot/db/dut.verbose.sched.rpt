

================================================================
== Vivado HLS Report for 'dut'
================================================================
* Date:           Tue Nov 15 03:39:06 2022

* Version:        2016.2 (Build 1577090 on Thu Jun 02 16:59:10 MDT 2016)
* Project:        pca.prj
* Solution:       solution1
* Product family: zynq
* Target device:  xc7z020clg484-1


================================================================
== Performance Estimates
================================================================
+ Timing (ns): 
    * Summary: 
    +--------+-------+----------+------------+
    |  Clock | Target| Estimated| Uncertainty|
    +--------+-------+----------+------------+
    |ap_clk  |  10.00|      9.58|        1.25|
    +--------+-------+----------+------------+

+ Latency (clock cycles): 
    * Summary: 
    +-----+-------+-----+-------+---------+
    |   Latency   |   Interval  | Pipeline|
    | min |  max  | min |  max  |   Type  |
    +-----+-------+-----+-------+---------+
    |    2|  34513|    3|  34514|   none  |
    +-----+-------+-----+-------+---------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        +-----------------+------+------+----------+-----------+-----------+------+----------+
        |                 |   Latency   | Iteration|  Initiation Interval  | Trip |          |
        |    Loop Name    |  min |  max |  Latency |  achieved |   target  | Count| Pipelined|
        +-----------------+------+------+----------+-----------+-----------+------+----------+
        |- Loop 1         |  3136|  3136|         4|          -|          -|   784|    no    |
        |- off_row_wb_uv  |  6272|  8624|  8 ~ 11  |          -|          -|   784|    no    |
        |- Loop 3         |  1568|  1568|         2|          -|          -|   784|    no    |
        |- Loop 4         |  1568|  1568|         2|          -|          -|   784|    no    |
        |- off_col_wb     |  6272|  7056|   8 ~ 9  |          -|          -|   784|    no    |
        |- off_row_wb_s   |  6272|  7056|   8 ~ 9  |          -|          -|   784|    no    |
        +-----------------+------+------+----------+-----------+-----------+------+----------+

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 1
ResetActiveHigh: 1
IsCombinational: 0
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 0
HasVarLatency: 1
IsPipeline: 0
IsRtlPipelined: 0
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states: 81
* Pipeline: 0
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 
	2  / true
2 --> 
	3  / (p_Val2_5 == 2)
	34  / (p_Val2_5 == 1)
	81  / (p_Val2_5 != 1 & p_Val2_5 != 2)
3 --> 
	4  / true
4 --> 
	5  / (!exitcond2)
	6  / (exitcond2)
5 --> 
	4  / true
6 --> 
	7  / (!exitcond4)
	8  / (exitcond4)
7 --> 
	6  / true
8 --> 
	9  / true
9 --> 
	10  / true
10 --> 
	11  / true
11 --> 
	12  / true
12 --> 
	13  / true
13 --> 
	14  / true
14 --> 
	15  / true
15 --> 
	16  / true
16 --> 
	17  / (!exitcond5)
	25  / (exitcond5)
17 --> 
	18  / true
18 --> 
	19  / true
19 --> 
	20  / true
20 --> 
	21  / true
21 --> 
	22  / true
22 --> 
	23  / (!or_cond1)
	24  / (or_cond1)
23 --> 
	24  / true
24 --> 
	16  / true
25 --> 
	26  / (!exitcond)
	81  / (exitcond)
26 --> 
	27  / true
27 --> 
	28  / true
28 --> 
	29  / true
29 --> 
	30  / true
30 --> 
	31  / true
31 --> 
	32  / (!or_cond2)
	33  / (or_cond2)
32 --> 
	33  / true
33 --> 
	25  / true
34 --> 
	35  / true
35 --> 
	36  / true
36 --> 
	37  / true
37 --> 
	38  / true
38 --> 
	39  / true
39 --> 
	40  / true
40 --> 
	41  / true
41 --> 
	42  / true
42 --> 
	43  / true
43 --> 
	44  / true
44 --> 
	45  / true
45 --> 
	46  / true
46 --> 
	47  / true
47 --> 
	48  / (!exitcond1)
	51  / (exitcond1)
48 --> 
	49  / true
49 --> 
	50  / true
50 --> 
	47  / true
51 --> 
	52  / true
52 --> 
	53  / true
53 --> 
	54  / true
54 --> 
	55  / true
55 --> 
	56  / true
56 --> 
	57  / true
57 --> 
	58  / true
58 --> 
	59  / true
59 --> 
	60  / true
60 --> 
	61  / true
61 --> 
	62  / true
62 --> 
	63  / true
63 --> 
	64  / true
64 --> 
	65  / (!exitcond3)
	75  / (exitcond3)
65 --> 
	66  / true
66 --> 
	67  / true
67 --> 
	68  / true
68 --> 
	69  / true
69 --> 
	70  / true
70 --> 
	71  / (!or_cond)
	74  / (or_cond)
71 --> 
	72  / true
72 --> 
	73  / true
73 --> 
	74  / true
74 --> 
	64  / true
75 --> 
	76  / true
76 --> 
	77  / true
77 --> 
	78  / true
78 --> 
	79  / true
79 --> 
	80  / true
80 --> 
	81  / true
81 --> 
* FSM state operations: 

 <State 1>: 7.46ns
ST_1: u_row_temp_0 [1/1] 0.00ns
:5  %u_row_temp_0 = alloca [784 x float], align 16

ST_1: u_row_temp_1 [1/1] 0.00ns
:6  %u_row_temp_1 = alloca [784 x float], align 16

ST_1: v_row_temp_0 [1/1] 0.00ns
:7  %v_row_temp_0 = alloca [784 x float], align 16

ST_1: v_row_temp_1 [1/1] 0.00ns
:8  %v_row_temp_1 = alloca [784 x float], align 16

ST_1: s_col_temp_0 [1/1] 0.00ns
:9  %s_col_temp_0 = alloca [784 x float], align 16

ST_1: s_col_temp_1 [1/1] 0.00ns
:10  %s_col_temp_1 = alloca [784 x float], align 16

ST_1: s_row_temp_0 [1/1] 0.00ns
:11  %s_row_temp_0 = alloca [784 x float], align 16

ST_1: s_row_temp_1 [1/1] 0.00ns
:12  %s_row_temp_1 = alloca [784 x float], align 16

ST_1: tmp_88 [1/1] 4.38ns
:13  %tmp_88 = call float @_ssdm_op_Read.ap_fifo.volatile.floatP(float* %strm_in_V)

ST_1: p_Val2_s [1/1] 0.00ns
:14  %p_Val2_s = bitcast float %tmp_88 to i32

ST_1: p_Result_s [1/1] 0.00ns
:15  %p_Result_s = call i1 @_ssdm_op_BitSelect.i1.i32.i32(i32 %p_Val2_s, i32 31)

ST_1: loc_V [1/1] 0.00ns
:16  %loc_V = call i8 @_ssdm_op_PartSelect.i8.i32.i32.i32(i32 %p_Val2_s, i32 23, i32 30) nounwind

ST_1: loc_V_1 [1/1] 0.00ns
:17  %loc_V_1 = trunc i32 %p_Val2_s to i23

ST_1: tmp_i_i_i_cast [1/1] 0.00ns
:20  %tmp_i_i_i_cast = zext i8 %loc_V to i9

ST_1: sh_assign [1/1] 1.72ns
:21  %sh_assign = add i9 -127, %tmp_i_i_i_cast

ST_1: isNeg [1/1] 0.00ns
:22  %isNeg = call i1 @_ssdm_op_BitSelect.i1.i9.i32(i9 %sh_assign, i32 8)

ST_1: tmp_16_i_i [1/1] 1.72ns
:23  %tmp_16_i_i = sub i8 127, %loc_V

ST_1: tmp_16_i_i_cast [1/1] 0.00ns
:24  %tmp_16_i_i_cast = sext i8 %tmp_16_i_i to i9

ST_1: sh_assign_1 [1/1] 1.37ns
:25  %sh_assign_1 = select i1 %isNeg, i9 %tmp_16_i_i_cast, i9 %sh_assign


 <State 2>: 8.21ns
ST_2: empty [1/1] 0.00ns
:0  %empty = call i32 (...)* @_ssdm_op_SpecInterface(float* %strm_out_V, [8 x i8]* @ap_fifo_str, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str, [1 x i8]* @p_str, [1 x i8]* @p_str, i32 2, i32 2, i32 16, i32 16, [1 x i8]* @p_str)

ST_2: empty_9 [1/1] 0.00ns
:1  %empty_9 = call i32 (...)* @_ssdm_op_SpecInterface(float* %strm_in_V, [8 x i8]* @ap_fifo_str, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str, [1 x i8]* @p_str, [1 x i8]* @p_str, i32 2, i32 2, i32 16, i32 16, [1 x i8]* @p_str)

ST_2: stg_103 [1/1] 0.00ns
:2  call void (...)* @_ssdm_op_SpecBitsMap(float* %strm_in_V), !map !229

ST_2: stg_104 [1/1] 0.00ns
:3  call void (...)* @_ssdm_op_SpecBitsMap(float* %strm_out_V), !map !235

ST_2: stg_105 [1/1] 0.00ns
:4  call void (...)* @_ssdm_op_SpecTopModule([4 x i8]* @dut_str) nounwind

ST_2: p_Result_1 [1/1] 0.00ns
:18  %p_Result_1 = call i24 @_ssdm_op_BitConcatenate.i24.i1.i23(i1 true, i23 %loc_V_1) nounwind

ST_2: tmp_i_i [1/1] 0.00ns (grouped into LUT with out node p_Val2_3)
:19  %tmp_i_i = zext i24 %p_Result_1 to i78

ST_2: sh_assign_1_i_cast [1/1] 0.00ns (grouped into LUT with out node p_Val2_3)
:26  %sh_assign_1_i_cast = sext i9 %sh_assign_1 to i32

ST_2: sh_assign_1_i_cast_cast [1/1] 0.00ns (grouped into LUT with out node p_Val2_3)
:27  %sh_assign_1_i_cast_cast = sext i9 %sh_assign_1 to i24

ST_2: tmp_17_i_i [1/1] 0.00ns (grouped into LUT with out node p_Val2_3)
:28  %tmp_17_i_i = zext i32 %sh_assign_1_i_cast to i78

ST_2: tmp_18_i_i [1/1] 0.00ns (grouped into LUT with out node p_Val2_3)
:29  %tmp_18_i_i = lshr i24 %p_Result_1, %sh_assign_1_i_cast_cast

ST_2: tmp_20_i_i [1/1] 0.00ns (grouped into LUT with out node p_Val2_3)
:30  %tmp_20_i_i = shl i78 %tmp_i_i, %tmp_17_i_i

ST_2: tmp [1/1] 0.00ns (grouped into LUT with out node p_Val2_3)
:31  %tmp = call i1 @_ssdm_op_BitSelect.i1.i24.i32(i24 %tmp_18_i_i, i32 23)

ST_2: tmp_1 [1/1] 0.00ns (grouped into LUT with out node p_Val2_3)
:32  %tmp_1 = zext i1 %tmp to i32

ST_2: tmp_2 [1/1] 0.00ns (grouped into LUT with out node p_Val2_3)
:33  %tmp_2 = call i32 @_ssdm_op_PartSelect.i32.i78.i32.i32(i78 %tmp_20_i_i, i32 23, i32 54)

ST_2: p_Val2_3 [1/1] 2.78ns (out node of the LUT)
:34  %p_Val2_3 = select i1 %isNeg, i32 %tmp_1, i32 %tmp_2

ST_2: p_Val2_8_i_i [1/1] 2.44ns
:35  %p_Val2_8_i_i = sub i32 0, %p_Val2_3

ST_2: p_Val2_5 [1/1] 1.37ns
:36  %p_Val2_5 = select i1 %p_Result_s, i32 %p_Val2_8_i_i, i32 %p_Val2_3

ST_2: stg_119 [1/1] 1.62ns
:37  switch i32 %p_Val2_5, label %.loopexit [
    i32 1, label %1
    i32 2, label %9
  ]

ST_2: tmp_103 [1/1] 4.38ns
:0  %tmp_103 = call float @_ssdm_op_Read.ap_fifo.volatile.floatP(float* %strm_in_V)

ST_2: tmp_89 [1/1] 4.38ns
:0  %tmp_89 = call float @_ssdm_op_Read.ap_fifo.volatile.floatP(float* %strm_in_V)


 <State 3>: 4.38ns
ST_3: tmp_104 [1/1] 4.38ns
:1  %tmp_104 = call float @_ssdm_op_Read.ap_fifo.volatile.floatP(float* %strm_in_V)

ST_3: stg_123 [1/1] 1.57ns
:2  br label %10


 <State 4>: 4.38ns
ST_4: i5 [1/1] 0.00ns
:0  %i5 = phi i10 [ 0, %9 ], [ %i_2, %11 ]

ST_4: exitcond2 [1/1] 2.07ns
:1  %exitcond2 = icmp eq i10 %i5, -240

ST_4: empty_12 [1/1] 0.00ns
:2  %empty_12 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 784, i64 784, i64 784)

ST_4: i_2 [1/1] 1.84ns
:3  %i_2 = add i10 %i5, 1

ST_4: stg_128 [1/1] 1.57ns
:4  br i1 %exitcond2, label %.preheader101, label %11

ST_4: tmp_41 [1/1] 4.38ns
:0  %tmp_41 = call float @_ssdm_op_Read.ap_fifo.volatile.floatP(float* %strm_in_V)


 <State 5>: 7.08ns
ST_5: tmp_9 [1/1] 0.00ns
:1  %tmp_9 = zext i10 %i5 to i64

ST_5: s_col_temp_0_addr [1/1] 0.00ns
:2  %s_col_temp_0_addr = getelementptr [784 x float]* %s_col_temp_0, i64 0, i64 %tmp_9

ST_5: stg_132 [1/1] 2.71ns
:3  store float %tmp_41, float* %s_col_temp_0_addr, align 4

ST_5: tmp_42 [1/1] 4.38ns
:4  %tmp_42 = call float @_ssdm_op_Read.ap_fifo.volatile.floatP(float* %strm_in_V)

ST_5: s_col_temp_1_addr [1/1] 0.00ns
:5  %s_col_temp_1_addr = getelementptr [784 x float]* %s_col_temp_1, i64 0, i64 %tmp_9

ST_5: stg_135 [1/1] 2.71ns
:6  store float %tmp_42, float* %s_col_temp_1_addr, align 4

ST_5: stg_136 [1/1] 0.00ns
:7  br label %10


 <State 6>: 4.38ns
ST_6: i6 [1/1] 0.00ns
.preheader101:0  %i6 = phi i10 [ %i_3, %12 ], [ 0, %10 ]

ST_6: exitcond4 [1/1] 2.07ns
.preheader101:1  %exitcond4 = icmp eq i10 %i6, -240

ST_6: empty_13 [1/1] 0.00ns
.preheader101:2  %empty_13 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 784, i64 784, i64 784)

ST_6: i_3 [1/1] 1.84ns
.preheader101:3  %i_3 = add i10 %i6, 1

ST_6: stg_141 [1/1] 0.00ns
.preheader101:4  br i1 %exitcond4, label %13, label %12

ST_6: tmp_59 [1/1] 4.38ns
:0  %tmp_59 = call float @_ssdm_op_Read.ap_fifo.volatile.floatP(float* %strm_in_V)

ST_6: tmp_105 [1/1] 4.38ns
:0  %tmp_105 = call float @_ssdm_op_Read.ap_fifo.volatile.floatP(float* %strm_in_V)


 <State 7>: 7.08ns
ST_7: tmp_16 [1/1] 0.00ns
:1  %tmp_16 = zext i10 %i6 to i64

ST_7: s_row_temp_0_addr [1/1] 0.00ns
:2  %s_row_temp_0_addr = getelementptr [784 x float]* %s_row_temp_0, i64 0, i64 %tmp_16

ST_7: stg_146 [1/1] 2.71ns
:3  store float %tmp_59, float* %s_row_temp_0_addr, align 8

ST_7: tmp_60 [1/1] 4.38ns
:4  %tmp_60 = call float @_ssdm_op_Read.ap_fifo.volatile.floatP(float* %strm_in_V)

ST_7: s_row_temp_1_addr [1/1] 0.00ns
:5  %s_row_temp_1_addr = getelementptr [784 x float]* %s_row_temp_1, i64 0, i64 %tmp_16

ST_7: stg_149 [1/1] 2.71ns
:6  store float %tmp_60, float* %s_row_temp_1_addr, align 4

ST_7: stg_150 [1/1] 0.00ns
:7  br label %.preheader101


 <State 8>: 4.38ns
ST_8: tmp_106 [1/1] 4.38ns
:1  %tmp_106 = call float @_ssdm_op_Read.ap_fifo.volatile.floatP(float* %strm_in_V)


 <State 9>: 4.38ns
ST_9: tmp_107 [1/1] 4.38ns
:2  %tmp_107 = call float @_ssdm_op_Read.ap_fifo.volatile.floatP(float* %strm_in_V)


 <State 10>: 4.38ns
ST_10: tmp_108 [1/1] 4.38ns
:3  %tmp_108 = call float @_ssdm_op_Read.ap_fifo.volatile.floatP(float* %strm_in_V)


 <State 11>: 4.38ns
ST_11: tmp_109 [1/1] 4.38ns
:4  %tmp_109 = call float @_ssdm_op_Read.ap_fifo.volatile.floatP(float* %strm_in_V)


 <State 12>: 4.38ns
ST_12: tmp_110 [1/1] 4.38ns
:5  %tmp_110 = call float @_ssdm_op_Read.ap_fifo.volatile.floatP(float* %strm_in_V)


 <State 13>: 5.87ns
ST_13: tmp_111 [1/1] 4.38ns
:6  %tmp_111 = call float @_ssdm_op_Read.ap_fifo.volatile.floatP(float* %strm_in_V)

ST_13: p_Val2_18 [1/1] 0.00ns
:8  %p_Val2_18 = bitcast float %tmp_103 to i32

ST_13: p_Result_6 [1/1] 0.00ns
:9  %p_Result_6 = call i1 @_ssdm_op_BitSelect.i1.i32.i32(i32 %p_Val2_18, i32 31)

ST_13: loc_V_6 [1/1] 0.00ns
:10  %loc_V_6 = call i8 @_ssdm_op_PartSelect.i8.i32.i32.i32(i32 %p_Val2_18, i32 23, i32 30) nounwind

ST_13: loc_V_7 [1/1] 0.00ns
:11  %loc_V_7 = trunc i32 %p_Val2_18 to i23

ST_13: p_Result_7 [1/1] 0.00ns
:12  %p_Result_7 = call i24 @_ssdm_op_BitConcatenate.i24.i1.i23(i1 true, i23 %loc_V_7) nounwind

ST_13: tmp_i_i2 [1/1] 0.00ns (grouped into LUT with out node p_Val2_21)
:13  %tmp_i_i2 = zext i24 %p_Result_7 to i78

ST_13: tmp_i_i_i45_cast [1/1] 0.00ns
:14  %tmp_i_i_i45_cast = zext i8 %loc_V_6 to i9

ST_13: sh_assign_6 [1/1] 1.72ns
:15  %sh_assign_6 = add i9 -127, %tmp_i_i_i45_cast

ST_13: isNeg_3 [1/1] 0.00ns
:16  %isNeg_3 = call i1 @_ssdm_op_BitSelect.i1.i9.i32(i9 %sh_assign_6, i32 8)

ST_13: tmp_16_i_i3 [1/1] 1.72ns
:17  %tmp_16_i_i3 = sub i8 127, %loc_V_6

ST_13: tmp_16_i_i48_cast [1/1] 0.00ns
:18  %tmp_16_i_i48_cast = sext i8 %tmp_16_i_i3 to i9

ST_13: sh_assign_7 [1/1] 1.37ns
:19  %sh_assign_7 = select i1 %isNeg_3, i9 %tmp_16_i_i48_cast, i9 %sh_assign_6

ST_13: sh_assign_1_i49_cast [1/1] 0.00ns (grouped into LUT with out node p_Val2_21)
:20  %sh_assign_1_i49_cast = sext i9 %sh_assign_7 to i32

ST_13: sh_assign_1_i49_cast_cast [1/1] 0.00ns (grouped into LUT with out node p_Val2_21)
:21  %sh_assign_1_i49_cast_cast = sext i9 %sh_assign_7 to i24

ST_13: tmp_17_i_i3 [1/1] 0.00ns (grouped into LUT with out node p_Val2_21)
:22  %tmp_17_i_i3 = zext i32 %sh_assign_1_i49_cast to i78

ST_13: tmp_18_i_i3 [1/1] 0.00ns (grouped into LUT with out node p_Val2_21)
:23  %tmp_18_i_i3 = lshr i24 %p_Result_7, %sh_assign_1_i49_cast_cast

ST_13: tmp_20_i_i3 [1/1] 0.00ns (grouped into LUT with out node p_Val2_21)
:24  %tmp_20_i_i3 = shl i78 %tmp_i_i2, %tmp_17_i_i3

ST_13: tmp_54 [1/1] 0.00ns (grouped into LUT with out node p_Val2_21)
:25  %tmp_54 = call i1 @_ssdm_op_BitSelect.i1.i24.i32(i24 %tmp_18_i_i3, i32 23)

ST_13: tmp_10 [1/1] 0.00ns (grouped into LUT with out node p_Val2_21)
:26  %tmp_10 = zext i1 %tmp_54 to i32

ST_13: tmp_11 [1/1] 0.00ns (grouped into LUT with out node p_Val2_21)
:27  %tmp_11 = call i32 @_ssdm_op_PartSelect.i32.i78.i32.i32(i78 %tmp_20_i_i3, i32 23, i32 54)

ST_13: p_Val2_21 [1/1] 2.78ns (out node of the LUT)
:28  %p_Val2_21 = select i1 %isNeg_3, i32 %tmp_10, i32 %tmp_11

ST_13: p_Val2_24 [1/1] 0.00ns
:31  %p_Val2_24 = bitcast float %tmp_104 to i32

ST_13: p_Result_8 [1/1] 0.00ns
:32  %p_Result_8 = call i1 @_ssdm_op_BitSelect.i1.i32.i32(i32 %p_Val2_24, i32 31)

ST_13: loc_V_8 [1/1] 0.00ns
:33  %loc_V_8 = call i8 @_ssdm_op_PartSelect.i8.i32.i32.i32(i32 %p_Val2_24, i32 23, i32 30) nounwind

ST_13: loc_V_9 [1/1] 0.00ns
:34  %loc_V_9 = trunc i32 %p_Val2_24 to i23

ST_13: p_Result_9 [1/1] 0.00ns
:35  %p_Result_9 = call i24 @_ssdm_op_BitConcatenate.i24.i1.i23(i1 true, i23 %loc_V_9) nounwind

ST_13: tmp_i_i3 [1/1] 0.00ns (grouped into LUT with out node p_Val2_27)
:36  %tmp_i_i3 = zext i24 %p_Result_9 to i78

ST_13: tmp_i_i_i64_cast [1/1] 0.00ns
:37  %tmp_i_i_i64_cast = zext i8 %loc_V_8 to i9

ST_13: sh_assign_8 [1/1] 1.72ns
:38  %sh_assign_8 = add i9 -127, %tmp_i_i_i64_cast

ST_13: isNeg_4 [1/1] 0.00ns
:39  %isNeg_4 = call i1 @_ssdm_op_BitSelect.i1.i9.i32(i9 %sh_assign_8, i32 8)

ST_13: tmp_16_i_i4 [1/1] 1.72ns
:40  %tmp_16_i_i4 = sub i8 127, %loc_V_8

ST_13: tmp_16_i_i67_cast [1/1] 0.00ns
:41  %tmp_16_i_i67_cast = sext i8 %tmp_16_i_i4 to i9

ST_13: sh_assign_9 [1/1] 1.37ns
:42  %sh_assign_9 = select i1 %isNeg_4, i9 %tmp_16_i_i67_cast, i9 %sh_assign_8

ST_13: sh_assign_1_i68_cast [1/1] 0.00ns (grouped into LUT with out node p_Val2_27)
:43  %sh_assign_1_i68_cast = sext i9 %sh_assign_9 to i32

ST_13: sh_assign_1_i68_cast_cast [1/1] 0.00ns (grouped into LUT with out node p_Val2_27)
:44  %sh_assign_1_i68_cast_cast = sext i9 %sh_assign_9 to i24

ST_13: tmp_17_i_i4 [1/1] 0.00ns (grouped into LUT with out node p_Val2_27)
:45  %tmp_17_i_i4 = zext i32 %sh_assign_1_i68_cast to i78

ST_13: tmp_18_i_i4 [1/1] 0.00ns (grouped into LUT with out node p_Val2_27)
:46  %tmp_18_i_i4 = lshr i24 %p_Result_9, %sh_assign_1_i68_cast_cast

ST_13: tmp_20_i_i4 [1/1] 0.00ns (grouped into LUT with out node p_Val2_27)
:47  %tmp_20_i_i4 = shl i78 %tmp_i_i3, %tmp_17_i_i4

ST_13: tmp_58 [1/1] 0.00ns (grouped into LUT with out node p_Val2_27)
:48  %tmp_58 = call i1 @_ssdm_op_BitSelect.i1.i24.i32(i24 %tmp_18_i_i4, i32 23)

ST_13: tmp_12 [1/1] 0.00ns (grouped into LUT with out node p_Val2_27)
:49  %tmp_12 = zext i1 %tmp_58 to i32

ST_13: tmp_13 [1/1] 0.00ns (grouped into LUT with out node p_Val2_27)
:50  %tmp_13 = call i32 @_ssdm_op_PartSelect.i32.i78.i32.i32(i78 %tmp_20_i_i4, i32 23, i32 54)

ST_13: p_Val2_27 [1/1] 2.78ns (out node of the LUT)
:51  %p_Val2_27 = select i1 %isNeg_4, i32 %tmp_12, i32 %tmp_13

ST_13: notrhs5 [1/1] 2.39ns
:55  %notrhs5 = icmp eq i23 %loc_V_7, 0

ST_13: notrhs7 [1/1] 2.39ns
:56  %notrhs7 = icmp eq i23 %loc_V_9, 0

ST_13: notlhs5 [1/1] 2.00ns
:57  %notlhs5 = icmp ne i8 %loc_V_6, -1

ST_13: tmp_14 [1/1] 1.37ns
:58  %tmp_14 = or i1 %notrhs5, %notlhs5

ST_13: notlhs7 [1/1] 2.00ns
:59  %notlhs7 = icmp ne i8 %loc_V_8, -1

ST_13: tmp_15 [1/1] 1.37ns
:60  %tmp_15 = or i1 %notrhs7, %notlhs7


 <State 14>: 4.38ns
ST_14: tmp_112 [1/1] 4.38ns
:7  %tmp_112 = call float @_ssdm_op_Read.ap_fifo.volatile.floatP(float* %strm_in_V)

ST_14: p_Val2_8_i_i3 [1/1] 2.44ns
:29  %p_Val2_8_i_i3 = sub i32 0, %p_Val2_21

ST_14: p_Val2_23 [1/1] 1.37ns
:30  %p_Val2_23 = select i1 %p_Result_6, i32 %p_Val2_8_i_i3, i32 %p_Val2_21

ST_14: p_Val2_8_i_i4 [1/1] 2.44ns
:52  %p_Val2_8_i_i4 = sub i32 0, %p_Val2_27

ST_14: p_Val2_29 [1/1] 1.37ns
:53  %p_Val2_29 = select i1 %p_Result_8, i32 %p_Val2_8_i_i4, i32 %p_Val2_27

ST_14: stg_210 [2/2] 0.00ns
:54  call fastcc void @dut_update_off_diag_s(i32 %p_Val2_23, i32 %p_Val2_29, float %tmp_105, float %tmp_106, float %tmp_107, float %tmp_108, float %tmp_109, float %tmp_110, float %tmp_111, float %tmp_112, [784 x float]* %s_col_temp_0, [784 x float]* %s_col_temp_1, [784 x float]* %s_row_temp_0, [784 x float]* %s_row_temp_1)


 <State 15>: 1.57ns
ST_15: stg_211 [1/2] 0.00ns
:54  call fastcc void @dut_update_off_diag_s(i32 %p_Val2_23, i32 %p_Val2_29, float %tmp_105, float %tmp_106, float %tmp_107, float %tmp_108, float %tmp_109, float %tmp_110, float %tmp_111, float %tmp_112, [784 x float]* %s_col_temp_0, [784 x float]* %s_col_temp_1, [784 x float]* %s_row_temp_0, [784 x float]* %s_row_temp_1)

ST_15: stg_212 [1/1] 1.57ns
:61  br label %14


 <State 16>: 6.41ns
ST_16: off_col [1/1] 0.00ns
:0  %off_col = phi i10 [ 0, %13 ], [ %off_col_2, %._crit_edge102 ]

ST_16: off_col_cast [1/1] 0.00ns
:1  %off_col_cast = zext i10 %off_col to i32

ST_16: exitcond5 [1/1] 2.07ns
:2  %exitcond5 = icmp eq i10 %off_col, -240

ST_16: empty_14 [1/1] 0.00ns
:3  %empty_14 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 784, i64 784, i64 784)

ST_16: off_col_2 [1/1] 1.84ns
:4  %off_col_2 = add i10 %off_col, 1

ST_16: stg_218 [1/1] 1.57ns
:5  br i1 %exitcond5, label %.preheader, label %15

ST_16: tmp_45 [6/6] 6.41ns
:1  %tmp_45 = sitofp i32 %off_col_cast to float


 <State 17>: 6.41ns
ST_17: tmp_45 [5/6] 6.41ns
:1  %tmp_45 = sitofp i32 %off_col_cast to float


 <State 18>: 6.41ns
ST_18: tmp_45 [4/6] 6.41ns
:1  %tmp_45 = sitofp i32 %off_col_cast to float


 <State 19>: 6.41ns
ST_19: tmp_45 [3/6] 6.41ns
:1  %tmp_45 = sitofp i32 %off_col_cast to float


 <State 20>: 6.41ns
ST_20: tmp_45 [2/6] 6.41ns
:1  %tmp_45 = sitofp i32 %off_col_cast to float


 <State 21>: 6.41ns
ST_21: tmp_45 [1/6] 6.41ns
:1  %tmp_45 = sitofp i32 %off_col_cast to float


 <State 22>: 8.16ns
ST_22: stg_225 [1/1] 0.00ns
:0  call void (...)* @_ssdm_op_SpecLoopName([11 x i8]* @p_str1805) nounwind

ST_22: tmp_90_to_int [1/1] 0.00ns
:2  %tmp_90_to_int = bitcast float %tmp_45 to i32

ST_22: tmp_46 [1/1] 0.00ns
:3  %tmp_46 = call i8 @_ssdm_op_PartSelect.i8.i32.i32.i32(i32 %tmp_90_to_int, i32 23, i32 30)

ST_22: tmp_75 [1/1] 0.00ns
:4  %tmp_75 = trunc i32 %tmp_90_to_int to i23

ST_22: notlhs [1/1] 2.00ns
:5  %notlhs = icmp ne i8 %tmp_46, -1

ST_22: notrhs [1/1] 2.39ns
:6  %notrhs = icmp eq i23 %tmp_75, 0

ST_22: tmp_47 [1/1] 1.37ns
:7  %tmp_47 = or i1 %notrhs, %notlhs

ST_22: tmp_48 [1/1] 0.00ns (grouped into LUT with out node or_cond1)
:8  %tmp_48 = and i1 %tmp_47, %tmp_14

ST_22: tmp_49 [1/1] 6.79ns
:9  %tmp_49 = fcmp oeq float %tmp_45, %tmp_103

ST_22: tmp_50 [1/1] 0.00ns (grouped into LUT with out node or_cond1)
:10  %tmp_50 = and i1 %tmp_48, %tmp_49

ST_22: tmp_51 [1/1] 0.00ns (grouped into LUT with out node or_cond1)
:11  %tmp_51 = and i1 %tmp_47, %tmp_15

ST_22: tmp_52 [1/1] 6.79ns
:12  %tmp_52 = fcmp oeq float %tmp_45, %tmp_104

ST_22: tmp_53 [1/1] 0.00ns (grouped into LUT with out node or_cond1)
:13  %tmp_53 = and i1 %tmp_51, %tmp_52

ST_22: or_cond1 [1/1] 1.37ns (out node of the LUT)
:14  %or_cond1 = or i1 %tmp_50, %tmp_53

ST_22: stg_239 [1/1] 0.00ns
:15  br i1 %or_cond1, label %._crit_edge102, label %16

ST_22: tmp_82 [1/1] 0.00ns
:0  %tmp_82 = zext i10 %off_col to i64

ST_22: s_col_temp_0_addr_1 [1/1] 0.00ns
:1  %s_col_temp_0_addr_1 = getelementptr [784 x float]* %s_col_temp_0, i64 0, i64 %tmp_82

ST_22: tmp_83 [2/2] 2.71ns
:2  %tmp_83 = load float* %s_col_temp_0_addr_1, align 4

ST_22: s_col_temp_1_addr_1 [1/1] 0.00ns
:4  %s_col_temp_1_addr_1 = getelementptr [784 x float]* %s_col_temp_1, i64 0, i64 %tmp_82

ST_22: tmp_84 [2/2] 2.71ns
:5  %tmp_84 = load float* %s_col_temp_1_addr_1, align 4


 <State 23>: 7.08ns
ST_23: tmp_83 [1/2] 2.71ns
:2  %tmp_83 = load float* %s_col_temp_0_addr_1, align 4

ST_23: stg_246 [1/1] 4.38ns
:3  call void @_ssdm_op_Write.ap_fifo.volatile.floatP(float* %strm_out_V, float %tmp_83)

ST_23: tmp_84 [1/2] 2.71ns
:5  %tmp_84 = load float* %s_col_temp_1_addr_1, align 4


 <State 24>: 4.38ns
ST_24: stg_248 [1/1] 4.38ns
:6  call void @_ssdm_op_Write.ap_fifo.volatile.floatP(float* %strm_out_V, float %tmp_84)

ST_24: stg_249 [1/1] 0.00ns
:7  br label %._crit_edge102

ST_24: stg_250 [1/1] 0.00ns
._crit_edge102:0  br label %14


 <State 25>: 6.41ns
ST_25: off_row7 [1/1] 0.00ns
.preheader:0  %off_row7 = phi i10 [ %off_row_3, %._crit_edge103 ], [ 0, %14 ]

ST_25: off_row7_cast [1/1] 0.00ns
.preheader:1  %off_row7_cast = zext i10 %off_row7 to i32

ST_25: exitcond [1/1] 2.07ns
.preheader:2  %exitcond = icmp eq i10 %off_row7, -240

ST_25: empty_15 [1/1] 0.00ns
.preheader:3  %empty_15 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 784, i64 784, i64 784)

ST_25: off_row_3 [1/1] 1.84ns
.preheader:4  %off_row_3 = add i10 %off_row7, 1

ST_25: stg_256 [1/1] 0.00ns
.preheader:5  br i1 %exitcond, label %.loopexit, label %17

ST_25: tmp_55 [6/6] 6.41ns
:1  %tmp_55 = sitofp i32 %off_row7_cast to float


 <State 26>: 6.41ns
ST_26: tmp_55 [5/6] 6.41ns
:1  %tmp_55 = sitofp i32 %off_row7_cast to float


 <State 27>: 6.41ns
ST_27: tmp_55 [4/6] 6.41ns
:1  %tmp_55 = sitofp i32 %off_row7_cast to float


 <State 28>: 6.41ns
ST_28: tmp_55 [3/6] 6.41ns
:1  %tmp_55 = sitofp i32 %off_row7_cast to float


 <State 29>: 6.41ns
ST_29: tmp_55 [2/6] 6.41ns
:1  %tmp_55 = sitofp i32 %off_row7_cast to float


 <State 30>: 6.41ns
ST_30: tmp_55 [1/6] 6.41ns
:1  %tmp_55 = sitofp i32 %off_row7_cast to float


 <State 31>: 8.16ns
ST_31: stg_263 [1/1] 0.00ns
:0  call void (...)* @_ssdm_op_SpecLoopName([13 x i8]* @p_str1806) nounwind

ST_31: tmp_98_to_int [1/1] 0.00ns
:2  %tmp_98_to_int = bitcast float %tmp_55 to i32

ST_31: tmp_56 [1/1] 0.00ns
:3  %tmp_56 = call i8 @_ssdm_op_PartSelect.i8.i32.i32.i32(i32 %tmp_98_to_int, i32 23, i32 30)

ST_31: tmp_76 [1/1] 0.00ns
:4  %tmp_76 = trunc i32 %tmp_98_to_int to i23

ST_31: notlhs8 [1/1] 2.00ns
:5  %notlhs8 = icmp ne i8 %tmp_56, -1

ST_31: notrhs8 [1/1] 2.39ns
:6  %notrhs8 = icmp eq i23 %tmp_76, 0

ST_31: tmp_57 [1/1] 1.37ns
:7  %tmp_57 = or i1 %notrhs8, %notlhs8

ST_31: tmp_67 [1/1] 0.00ns (grouped into LUT with out node or_cond2)
:8  %tmp_67 = and i1 %tmp_57, %tmp_14

ST_31: tmp_77 [1/1] 6.79ns
:9  %tmp_77 = fcmp oeq float %tmp_55, %tmp_103

ST_31: tmp_78 [1/1] 0.00ns (grouped into LUT with out node or_cond2)
:10  %tmp_78 = and i1 %tmp_67, %tmp_77

ST_31: tmp_79 [1/1] 0.00ns (grouped into LUT with out node or_cond2)
:11  %tmp_79 = and i1 %tmp_57, %tmp_15

ST_31: tmp_80 [1/1] 6.79ns
:12  %tmp_80 = fcmp oeq float %tmp_55, %tmp_104

ST_31: tmp_81 [1/1] 0.00ns (grouped into LUT with out node or_cond2)
:13  %tmp_81 = and i1 %tmp_79, %tmp_80

ST_31: or_cond2 [1/1] 1.37ns (out node of the LUT)
:14  %or_cond2 = or i1 %tmp_78, %tmp_81

ST_31: stg_277 [1/1] 0.00ns
:15  br i1 %or_cond2, label %._crit_edge103, label %18

ST_31: tmp_85 [1/1] 0.00ns
:0  %tmp_85 = zext i10 %off_row7 to i64

ST_31: s_row_temp_0_addr_1 [1/1] 0.00ns
:1  %s_row_temp_0_addr_1 = getelementptr [784 x float]* %s_row_temp_0, i64 0, i64 %tmp_85

ST_31: tmp_86 [2/2] 2.71ns
:2  %tmp_86 = load float* %s_row_temp_0_addr_1, align 8

ST_31: s_row_temp_1_addr_1 [1/1] 0.00ns
:4  %s_row_temp_1_addr_1 = getelementptr [784 x float]* %s_row_temp_1, i64 0, i64 %tmp_85

ST_31: tmp_87 [2/2] 2.71ns
:5  %tmp_87 = load float* %s_row_temp_1_addr_1, align 4


 <State 32>: 7.08ns
ST_32: tmp_86 [1/2] 2.71ns
:2  %tmp_86 = load float* %s_row_temp_0_addr_1, align 8

ST_32: stg_284 [1/1] 4.38ns
:3  call void @_ssdm_op_Write.ap_fifo.volatile.floatP(float* %strm_out_V, float %tmp_86)

ST_32: tmp_87 [1/2] 2.71ns
:5  %tmp_87 = load float* %s_row_temp_1_addr_1, align 4


 <State 33>: 4.38ns
ST_33: stg_286 [1/1] 4.38ns
:6  call void @_ssdm_op_Write.ap_fifo.volatile.floatP(float* %strm_out_V, float %tmp_87)

ST_33: stg_287 [1/1] 0.00ns
:7  br label %._crit_edge103

ST_33: stg_288 [1/1] 0.00ns
._crit_edge103:0  br label %.preheader


 <State 34>: 4.38ns
ST_34: tmp_90 [1/1] 4.38ns
:1  %tmp_90 = call float @_ssdm_op_Read.ap_fifo.volatile.floatP(float* %strm_in_V)


 <State 35>: 4.38ns
ST_35: tmp_91 [1/1] 4.38ns
:2  %tmp_91 = call float @_ssdm_op_Read.ap_fifo.volatile.floatP(float* %strm_in_V)


 <State 36>: 4.38ns
ST_36: tmp_92 [1/1] 4.38ns
:3  %tmp_92 = call float @_ssdm_op_Read.ap_fifo.volatile.floatP(float* %strm_in_V)


 <State 37>: 4.38ns
ST_37: tmp_93 [1/1] 4.38ns
:4  %tmp_93 = call float @_ssdm_op_Read.ap_fifo.volatile.floatP(float* %strm_in_V)


 <State 38>: 4.38ns
ST_38: tmp_94 [1/1] 4.38ns
:5  %tmp_94 = call float @_ssdm_op_Read.ap_fifo.volatile.floatP(float* %strm_in_V)


 <State 39>: 4.38ns
ST_39: tmp_95 [1/1] 4.38ns
:6  %tmp_95 = call float @_ssdm_op_Read.ap_fifo.volatile.floatP(float* %strm_in_V)


 <State 40>: 4.38ns
ST_40: tmp_96 [1/1] 4.38ns
:7  %tmp_96 = call float @_ssdm_op_Read.ap_fifo.volatile.floatP(float* %strm_in_V)


 <State 41>: 4.38ns
ST_41: tmp_97 [1/1] 4.38ns
:8  %tmp_97 = call float @_ssdm_op_Read.ap_fifo.volatile.floatP(float* %strm_in_V)


 <State 42>: 4.38ns
ST_42: tmp_98 [1/1] 4.38ns
:9  %tmp_98 = call float @_ssdm_op_Read.ap_fifo.volatile.floatP(float* %strm_in_V)


 <State 43>: 4.38ns
ST_43: tmp_99 [1/1] 4.38ns
:10  %tmp_99 = call float @_ssdm_op_Read.ap_fifo.volatile.floatP(float* %strm_in_V)


 <State 44>: 4.38ns
ST_44: tmp_100 [1/1] 4.38ns
:11  %tmp_100 = call float @_ssdm_op_Read.ap_fifo.volatile.floatP(float* %strm_in_V)


 <State 45>: 4.38ns
ST_45: tmp_101 [1/1] 4.38ns
:12  %tmp_101 = call float @_ssdm_op_Read.ap_fifo.volatile.floatP(float* %strm_in_V)


 <State 46>: 4.38ns
ST_46: tmp_102 [1/1] 4.38ns
:13  %tmp_102 = call float @_ssdm_op_Read.ap_fifo.volatile.floatP(float* %strm_in_V)

ST_46: stg_302 [1/1] 1.57ns
:14  br label %2


 <State 47>: 5.87ns
ST_47: i [1/1] 0.00ns
:0  %i = phi i10 [ 0, %1 ], [ %i_1, %3 ]

ST_47: exitcond1 [1/1] 2.07ns
:1  %exitcond1 = icmp eq i10 %i, -240

ST_47: empty_10 [1/1] 0.00ns
:2  %empty_10 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 784, i64 784, i64 784)

ST_47: i_1 [1/1] 1.84ns
:3  %i_1 = add i10 %i, 1

ST_47: stg_307 [1/1] 0.00ns
:4  br i1 %exitcond1, label %4, label %3

ST_47: tmp_37 [1/1] 4.38ns
:0  %tmp_37 = call float @_ssdm_op_Read.ap_fifo.volatile.floatP(float* %strm_in_V)

ST_47: p_Val2_6 [1/1] 0.00ns
:0  %p_Val2_6 = bitcast float %tmp_89 to i32

ST_47: p_Result_2 [1/1] 0.00ns
:1  %p_Result_2 = call i1 @_ssdm_op_BitSelect.i1.i32.i32(i32 %p_Val2_6, i32 31)

ST_47: loc_V_2 [1/1] 0.00ns
:2  %loc_V_2 = call i8 @_ssdm_op_PartSelect.i8.i32.i32.i32(i32 %p_Val2_6, i32 23, i32 30) nounwind

ST_47: loc_V_3 [1/1] 0.00ns
:3  %loc_V_3 = trunc i32 %p_Val2_6 to i23

ST_47: p_Result_3 [1/1] 0.00ns
:4  %p_Result_3 = call i24 @_ssdm_op_BitConcatenate.i24.i1.i23(i1 true, i23 %loc_V_3) nounwind

ST_47: tmp_i_i6 [1/1] 0.00ns (grouped into LUT with out node p_Val2_9)
:5  %tmp_i_i6 = zext i24 %p_Result_3 to i78

ST_47: tmp_i_i_i7_cast [1/1] 0.00ns
:6  %tmp_i_i_i7_cast = zext i8 %loc_V_2 to i9

ST_47: sh_assign_2 [1/1] 1.72ns
:7  %sh_assign_2 = add i9 -127, %tmp_i_i_i7_cast

ST_47: isNeg_1 [1/1] 0.00ns
:8  %isNeg_1 = call i1 @_ssdm_op_BitSelect.i1.i9.i32(i9 %sh_assign_2, i32 8)

ST_47: tmp_16_i_i1 [1/1] 1.72ns
:9  %tmp_16_i_i1 = sub i8 127, %loc_V_2

ST_47: tmp_16_i_i10_cast [1/1] 0.00ns
:10  %tmp_16_i_i10_cast = sext i8 %tmp_16_i_i1 to i9

ST_47: sh_assign_3 [1/1] 1.37ns
:11  %sh_assign_3 = select i1 %isNeg_1, i9 %tmp_16_i_i10_cast, i9 %sh_assign_2

ST_47: sh_assign_1_i11_cast [1/1] 0.00ns (grouped into LUT with out node p_Val2_9)
:12  %sh_assign_1_i11_cast = sext i9 %sh_assign_3 to i32

ST_47: sh_assign_1_i11_cast_cast [1/1] 0.00ns (grouped into LUT with out node p_Val2_9)
:13  %sh_assign_1_i11_cast_cast = sext i9 %sh_assign_3 to i24

ST_47: tmp_17_i_i1 [1/1] 0.00ns (grouped into LUT with out node p_Val2_9)
:14  %tmp_17_i_i1 = zext i32 %sh_assign_1_i11_cast to i78

ST_47: tmp_18_i_i1 [1/1] 0.00ns (grouped into LUT with out node p_Val2_9)
:15  %tmp_18_i_i1 = lshr i24 %p_Result_3, %sh_assign_1_i11_cast_cast

ST_47: tmp_20_i_i1 [1/1] 0.00ns (grouped into LUT with out node p_Val2_9)
:16  %tmp_20_i_i1 = shl i78 %tmp_i_i6, %tmp_17_i_i1

ST_47: tmp_22 [1/1] 0.00ns (grouped into LUT with out node p_Val2_9)
:17  %tmp_22 = call i1 @_ssdm_op_BitSelect.i1.i24.i32(i24 %tmp_18_i_i1, i32 23)

ST_47: tmp_3 [1/1] 0.00ns (grouped into LUT with out node p_Val2_9)
:18  %tmp_3 = zext i1 %tmp_22 to i32

ST_47: tmp_4 [1/1] 0.00ns (grouped into LUT with out node p_Val2_9)
:19  %tmp_4 = call i32 @_ssdm_op_PartSelect.i32.i78.i32.i32(i78 %tmp_20_i_i1, i32 23, i32 54)

ST_47: p_Val2_9 [1/1] 2.78ns (out node of the LUT)
:20  %p_Val2_9 = select i1 %isNeg_1, i32 %tmp_3, i32 %tmp_4

ST_47: p_Val2_12 [1/1] 0.00ns
:23  %p_Val2_12 = bitcast float %tmp_90 to i32

ST_47: p_Result_4 [1/1] 0.00ns
:24  %p_Result_4 = call i1 @_ssdm_op_BitSelect.i1.i32.i32(i32 %p_Val2_12, i32 31)

ST_47: loc_V_4 [1/1] 0.00ns
:25  %loc_V_4 = call i8 @_ssdm_op_PartSelect.i8.i32.i32.i32(i32 %p_Val2_12, i32 23, i32 30) nounwind

ST_47: loc_V_5 [1/1] 0.00ns
:26  %loc_V_5 = trunc i32 %p_Val2_12 to i23

ST_47: p_Result_5 [1/1] 0.00ns
:27  %p_Result_5 = call i24 @_ssdm_op_BitConcatenate.i24.i1.i23(i1 true, i23 %loc_V_5) nounwind

ST_47: tmp_i_i1 [1/1] 0.00ns (grouped into LUT with out node p_Val2_15)
:28  %tmp_i_i1 = zext i24 %p_Result_5 to i78

ST_47: tmp_i_i_i26_cast [1/1] 0.00ns
:29  %tmp_i_i_i26_cast = zext i8 %loc_V_4 to i9

ST_47: sh_assign_4 [1/1] 1.72ns
:30  %sh_assign_4 = add i9 -127, %tmp_i_i_i26_cast

ST_47: isNeg_2 [1/1] 0.00ns
:31  %isNeg_2 = call i1 @_ssdm_op_BitSelect.i1.i9.i32(i9 %sh_assign_4, i32 8)

ST_47: tmp_16_i_i2 [1/1] 1.72ns
:32  %tmp_16_i_i2 = sub i8 127, %loc_V_4

ST_47: tmp_16_i_i29_cast [1/1] 0.00ns
:33  %tmp_16_i_i29_cast = sext i8 %tmp_16_i_i2 to i9

ST_47: sh_assign_5 [1/1] 1.37ns
:34  %sh_assign_5 = select i1 %isNeg_2, i9 %tmp_16_i_i29_cast, i9 %sh_assign_4

ST_47: sh_assign_1_i30_cast [1/1] 0.00ns (grouped into LUT with out node p_Val2_15)
:35  %sh_assign_1_i30_cast = sext i9 %sh_assign_5 to i32

ST_47: sh_assign_1_i30_cast_cast [1/1] 0.00ns (grouped into LUT with out node p_Val2_15)
:36  %sh_assign_1_i30_cast_cast = sext i9 %sh_assign_5 to i24

ST_47: tmp_17_i_i2 [1/1] 0.00ns (grouped into LUT with out node p_Val2_15)
:37  %tmp_17_i_i2 = zext i32 %sh_assign_1_i30_cast to i78

ST_47: tmp_18_i_i2 [1/1] 0.00ns (grouped into LUT with out node p_Val2_15)
:38  %tmp_18_i_i2 = lshr i24 %p_Result_5, %sh_assign_1_i30_cast_cast

ST_47: tmp_20_i_i2 [1/1] 0.00ns (grouped into LUT with out node p_Val2_15)
:39  %tmp_20_i_i2 = shl i78 %tmp_i_i1, %tmp_17_i_i2

ST_47: tmp_26 [1/1] 0.00ns (grouped into LUT with out node p_Val2_15)
:40  %tmp_26 = call i1 @_ssdm_op_BitSelect.i1.i24.i32(i24 %tmp_18_i_i2, i32 23)

ST_47: tmp_5 [1/1] 0.00ns (grouped into LUT with out node p_Val2_15)
:41  %tmp_5 = zext i1 %tmp_26 to i32

ST_47: tmp_6 [1/1] 0.00ns (grouped into LUT with out node p_Val2_15)
:42  %tmp_6 = call i32 @_ssdm_op_PartSelect.i32.i78.i32.i32(i78 %tmp_20_i_i2, i32 23, i32 54)

ST_47: p_Val2_15 [1/1] 2.78ns (out node of the LUT)
:43  %p_Val2_15 = select i1 %isNeg_2, i32 %tmp_5, i32 %tmp_6

ST_47: notrhs2 [1/1] 2.39ns
:77  %notrhs2 = icmp eq i23 %loc_V_3, 0

ST_47: notrhs4 [1/1] 2.39ns
:78  %notrhs4 = icmp eq i23 %loc_V_5, 0

ST_47: notlhs2 [1/1] 2.00ns
:79  %notlhs2 = icmp ne i8 %loc_V_2, -1

ST_47: tmp_7 [1/1] 1.37ns
:80  %tmp_7 = or i1 %notrhs2, %notlhs2

ST_47: notlhs4 [1/1] 2.00ns
:81  %notlhs4 = icmp ne i8 %loc_V_4, -1

ST_47: tmp_8 [1/1] 1.37ns
:82  %tmp_8 = or i1 %notrhs4, %notlhs4


 <State 48>: 7.08ns
ST_48: tmp_s [1/1] 0.00ns
:1  %tmp_s = zext i10 %i to i64

ST_48: u_row_temp_0_addr [1/1] 0.00ns
:2  %u_row_temp_0_addr = getelementptr [784 x float]* %u_row_temp_0, i64 0, i64 %tmp_s

ST_48: stg_359 [1/1] 2.71ns
:3  store float %tmp_37, float* %u_row_temp_0_addr, align 8

ST_48: tmp_38 [1/1] 4.38ns
:4  %tmp_38 = call float @_ssdm_op_Read.ap_fifo.volatile.floatP(float* %strm_in_V)

ST_48: u_row_temp_1_addr [1/1] 0.00ns
:5  %u_row_temp_1_addr = getelementptr [784 x float]* %u_row_temp_1, i64 0, i64 %tmp_s

ST_48: stg_362 [1/1] 2.71ns
:6  store float %tmp_38, float* %u_row_temp_1_addr, align 4


 <State 49>: 7.08ns
ST_49: tmp_39 [1/1] 4.38ns
:7  %tmp_39 = call float @_ssdm_op_Read.ap_fifo.volatile.floatP(float* %strm_in_V)

ST_49: v_row_temp_0_addr [1/1] 0.00ns
:8  %v_row_temp_0_addr = getelementptr [784 x float]* %v_row_temp_0, i64 0, i64 %tmp_s

ST_49: stg_365 [1/1] 2.71ns
:9  store float %tmp_39, float* %v_row_temp_0_addr, align 8


 <State 50>: 7.08ns
ST_50: tmp_40 [1/1] 4.38ns
:10  %tmp_40 = call float @_ssdm_op_Read.ap_fifo.volatile.floatP(float* %strm_in_V)

ST_50: v_row_temp_1_addr [1/1] 0.00ns
:11  %v_row_temp_1_addr = getelementptr [784 x float]* %v_row_temp_1, i64 0, i64 %tmp_s

ST_50: stg_368 [1/1] 2.71ns
:12  store float %tmp_40, float* %v_row_temp_1_addr, align 4

ST_50: stg_369 [1/1] 0.00ns
:13  br label %2


 <State 51>: 3.81ns
ST_51: p_Val2_8_i_i1 [1/1] 2.44ns
:21  %p_Val2_8_i_i1 = sub i32 0, %p_Val2_9

ST_51: p_Val2_11 [1/1] 1.37ns
:22  %p_Val2_11 = select i1 %p_Result_2, i32 %p_Val2_8_i_i1, i32 %p_Val2_9

ST_51: p_Val2_8_i_i2 [1/1] 2.44ns
:44  %p_Val2_8_i_i2 = sub i32 0, %p_Val2_15

ST_51: p_Val2_17 [1/1] 1.37ns
:45  %p_Val2_17 = select i1 %p_Result_4, i32 %p_Val2_8_i_i2, i32 %p_Val2_15

ST_51: call_ret [2/2] 0.00ns
:46  %call_ret = call fastcc { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } @dut_calc_svd_update_on_diag_s_off_(i32 %p_Val2_11, i32 %p_Val2_17, float %tmp_91, float %tmp_92, float %tmp_93, float %tmp_94, float %tmp_95, float %tmp_96, float %tmp_97, float %tmp_98, float %tmp_99, float %tmp_100, float %tmp_101, float %tmp_102, [784 x float]* %u_row_temp_0, [784 x float]* %u_row_temp_1, [784 x float]* %v_row_temp_0, [784 x float]* %v_row_temp_1)


 <State 52>: 4.38ns
ST_52: call_ret [1/2] 0.00ns
:46  %call_ret = call fastcc { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } @dut_calc_svd_update_on_diag_s_off_(i32 %p_Val2_11, i32 %p_Val2_17, float %tmp_91, float %tmp_92, float %tmp_93, float %tmp_94, float %tmp_95, float %tmp_96, float %tmp_97, float %tmp_98, float %tmp_99, float %tmp_100, float %tmp_101, float %tmp_102, [784 x float]* %u_row_temp_0, [784 x float]* %u_row_temp_1, [784 x float]* %v_row_temp_0, [784 x float]* %v_row_temp_1)

ST_52: u_temp_0_0 [1/1] 0.00ns
:47  %u_temp_0_0 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %call_ret, 0

ST_52: u_temp_0_1 [1/1] 0.00ns
:48  %u_temp_0_1 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %call_ret, 1

ST_52: u_temp_1_0 [1/1] 0.00ns
:49  %u_temp_1_0 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %call_ret, 2

ST_52: u_temp_1_1 [1/1] 0.00ns
:50  %u_temp_1_1 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %call_ret, 3

ST_52: v_temp_0_0 [1/1] 0.00ns
:51  %v_temp_0_0 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %call_ret, 4

ST_52: v_temp_0_1 [1/1] 0.00ns
:52  %v_temp_0_1 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %call_ret, 5

ST_52: v_temp_1_0 [1/1] 0.00ns
:53  %v_temp_1_0 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %call_ret, 6

ST_52: v_temp_1_1 [1/1] 0.00ns
:54  %v_temp_1_1 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %call_ret, 7

ST_52: new_j_0_0 [1/1] 0.00ns
:55  %new_j_0_0 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %call_ret, 8

ST_52: new_j_0_1 [1/1] 0.00ns
:56  %new_j_0_1 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %call_ret, 9

ST_52: new_j_1_0 [1/1] 0.00ns
:57  %new_j_1_0 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %call_ret, 10

ST_52: new_j_1_1 [1/1] 0.00ns
:58  %new_j_1_1 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %call_ret, 11

ST_52: new_k_0_0 [1/1] 0.00ns
:59  %new_k_0_0 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %call_ret, 12

ST_52: new_k_0_1 [1/1] 0.00ns
:60  %new_k_0_1 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %call_ret, 13

ST_52: new_k_1_0 [1/1] 0.00ns
:61  %new_k_1_0 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %call_ret, 14

ST_52: new_k_1_1 [1/1] 0.00ns
:62  %new_k_1_1 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %call_ret, 15

ST_52: s_temp_0_0 [1/1] 0.00ns
:63  %s_temp_0_0 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %call_ret, 16

ST_52: s_temp_1_1 [1/1] 0.00ns
:64  %s_temp_1_1 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %call_ret, 17

ST_52: stg_394 [1/1] 4.38ns
:65  call void @_ssdm_op_Write.ap_fifo.volatile.floatP(float* %strm_out_V, float %s_temp_0_0)


 <State 53>: 4.38ns
ST_53: stg_395 [1/1] 4.38ns
:66  call void @_ssdm_op_Write.ap_fifo.volatile.floatP(float* %strm_out_V, float 0.000000e+00)


 <State 54>: 4.38ns
ST_54: stg_396 [1/1] 4.38ns
:67  call void @_ssdm_op_Write.ap_fifo.volatile.floatP(float* %strm_out_V, float 0.000000e+00)


 <State 55>: 4.38ns
ST_55: stg_397 [1/1] 4.38ns
:68  call void @_ssdm_op_Write.ap_fifo.volatile.floatP(float* %strm_out_V, float %s_temp_1_1)


 <State 56>: 4.38ns
ST_56: stg_398 [1/1] 4.38ns
:69  call void @_ssdm_op_Write.ap_fifo.volatile.floatP(float* %strm_out_V, float %u_temp_0_0)


 <State 57>: 4.38ns
ST_57: stg_399 [1/1] 4.38ns
:70  call void @_ssdm_op_Write.ap_fifo.volatile.floatP(float* %strm_out_V, float %u_temp_0_1)


 <State 58>: 4.38ns
ST_58: stg_400 [1/1] 4.38ns
:71  call void @_ssdm_op_Write.ap_fifo.volatile.floatP(float* %strm_out_V, float %u_temp_1_0)


 <State 59>: 4.38ns
ST_59: stg_401 [1/1] 4.38ns
:72  call void @_ssdm_op_Write.ap_fifo.volatile.floatP(float* %strm_out_V, float %u_temp_1_1)


 <State 60>: 4.38ns
ST_60: stg_402 [1/1] 4.38ns
:73  call void @_ssdm_op_Write.ap_fifo.volatile.floatP(float* %strm_out_V, float %v_temp_0_0)


 <State 61>: 4.38ns
ST_61: stg_403 [1/1] 4.38ns
:74  call void @_ssdm_op_Write.ap_fifo.volatile.floatP(float* %strm_out_V, float %v_temp_0_1)


 <State 62>: 4.38ns
ST_62: stg_404 [1/1] 4.38ns
:75  call void @_ssdm_op_Write.ap_fifo.volatile.floatP(float* %strm_out_V, float %v_temp_1_0)


 <State 63>: 4.38ns
ST_63: stg_405 [1/1] 4.38ns
:76  call void @_ssdm_op_Write.ap_fifo.volatile.floatP(float* %strm_out_V, float %v_temp_1_1)

ST_63: stg_406 [1/1] 1.57ns
:83  br label %5


 <State 64>: 6.41ns
ST_64: off_row [1/1] 0.00ns
:0  %off_row = phi i10 [ 0, %4 ], [ %off_row_2, %._crit_edge ]

ST_64: off_row_cast [1/1] 0.00ns
:1  %off_row_cast = zext i10 %off_row to i32

ST_64: exitcond3 [1/1] 2.07ns
:2  %exitcond3 = icmp eq i10 %off_row, -240

ST_64: empty_11 [1/1] 0.00ns
:3  %empty_11 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 784, i64 784, i64 784)

ST_64: off_row_2 [1/1] 1.84ns
:4  %off_row_2 = add i10 %off_row, 1

ST_64: stg_412 [1/1] 0.00ns
:5  br i1 %exitcond3, label %8, label %6

ST_64: tmp_17 [6/6] 6.41ns
:1  %tmp_17 = sitofp i32 %off_row_cast to float

ST_64: stg_414 [1/1] 4.38ns
:0  call void @_ssdm_op_Write.ap_fifo.volatile.floatP(float* %strm_out_V, float %new_j_0_0)


 <State 65>: 6.41ns
ST_65: tmp_17 [5/6] 6.41ns
:1  %tmp_17 = sitofp i32 %off_row_cast to float


 <State 66>: 6.41ns
ST_66: tmp_17 [4/6] 6.41ns
:1  %tmp_17 = sitofp i32 %off_row_cast to float


 <State 67>: 6.41ns
ST_67: tmp_17 [3/6] 6.41ns
:1  %tmp_17 = sitofp i32 %off_row_cast to float


 <State 68>: 6.41ns
ST_68: tmp_17 [2/6] 6.41ns
:1  %tmp_17 = sitofp i32 %off_row_cast to float


 <State 69>: 6.41ns
ST_69: tmp_17 [1/6] 6.41ns
:1  %tmp_17 = sitofp i32 %off_row_cast to float


 <State 70>: 8.16ns
ST_70: stg_420 [1/1] 0.00ns
:0  call void (...)* @_ssdm_op_SpecLoopName([14 x i8]* @p_str1804) nounwind

ST_70: tmp_67_to_int [1/1] 0.00ns
:2  %tmp_67_to_int = bitcast float %tmp_17 to i32

ST_70: tmp_18 [1/1] 0.00ns
:3  %tmp_18 = call i8 @_ssdm_op_PartSelect.i8.i32.i32.i32(i32 %tmp_67_to_int, i32 23, i32 30)

ST_70: tmp_70 [1/1] 0.00ns
:4  %tmp_70 = trunc i32 %tmp_67_to_int to i23

ST_70: notlhs1 [1/1] 2.00ns
:5  %notlhs1 = icmp ne i8 %tmp_18, -1

ST_70: notrhs1 [1/1] 2.39ns
:6  %notrhs1 = icmp eq i23 %tmp_70, 0

ST_70: tmp_19 [1/1] 1.37ns
:7  %tmp_19 = or i1 %notrhs1, %notlhs1

ST_70: tmp_20 [1/1] 0.00ns (grouped into LUT with out node or_cond)
:8  %tmp_20 = and i1 %tmp_19, %tmp_7

ST_70: tmp_21 [1/1] 6.79ns
:9  %tmp_21 = fcmp oeq float %tmp_17, %tmp_89

ST_70: tmp_23 [1/1] 0.00ns (grouped into LUT with out node or_cond)
:10  %tmp_23 = and i1 %tmp_20, %tmp_21

ST_70: tmp_24 [1/1] 0.00ns (grouped into LUT with out node or_cond)
:11  %tmp_24 = and i1 %tmp_19, %tmp_8

ST_70: tmp_25 [1/1] 6.79ns
:12  %tmp_25 = fcmp oeq float %tmp_17, %tmp_90

ST_70: tmp_43 [1/1] 0.00ns (grouped into LUT with out node or_cond)
:13  %tmp_43 = and i1 %tmp_24, %tmp_25

ST_70: or_cond [1/1] 1.37ns (out node of the LUT)
:14  %or_cond = or i1 %tmp_23, %tmp_43

ST_70: stg_434 [1/1] 0.00ns
:15  br i1 %or_cond, label %._crit_edge, label %7

ST_70: tmp_44 [1/1] 0.00ns
:0  %tmp_44 = zext i10 %off_row to i64

ST_70: v_row_temp_0_addr_1 [1/1] 0.00ns
:1  %v_row_temp_0_addr_1 = getelementptr [784 x float]* %v_row_temp_0, i64 0, i64 %tmp_44

ST_70: tmp_71 [2/2] 2.71ns
:2  %tmp_71 = load float* %v_row_temp_0_addr_1, align 8


 <State 71>: 7.08ns
ST_71: tmp_71 [1/2] 2.71ns
:2  %tmp_71 = load float* %v_row_temp_0_addr_1, align 8

ST_71: stg_439 [1/1] 4.38ns
:3  call void @_ssdm_op_Write.ap_fifo.volatile.floatP(float* %strm_out_V, float %tmp_71)

ST_71: v_row_temp_1_addr_1 [1/1] 0.00ns
:4  %v_row_temp_1_addr_1 = getelementptr [784 x float]* %v_row_temp_1, i64 0, i64 %tmp_44

ST_71: tmp_72 [2/2] 2.71ns
:5  %tmp_72 = load float* %v_row_temp_1_addr_1, align 4


 <State 72>: 7.08ns
ST_72: tmp_72 [1/2] 2.71ns
:5  %tmp_72 = load float* %v_row_temp_1_addr_1, align 4

ST_72: stg_443 [1/1] 4.38ns
:6  call void @_ssdm_op_Write.ap_fifo.volatile.floatP(float* %strm_out_V, float %tmp_72)

ST_72: u_row_temp_0_addr_1 [1/1] 0.00ns
:7  %u_row_temp_0_addr_1 = getelementptr [784 x float]* %u_row_temp_0, i64 0, i64 %tmp_44

ST_72: tmp_73 [2/2] 2.71ns
:8  %tmp_73 = load float* %u_row_temp_0_addr_1, align 8

ST_72: u_row_temp_1_addr_1 [1/1] 0.00ns
:10  %u_row_temp_1_addr_1 = getelementptr [784 x float]* %u_row_temp_1, i64 0, i64 %tmp_44

ST_72: tmp_74 [2/2] 2.71ns
:11  %tmp_74 = load float* %u_row_temp_1_addr_1, align 4


 <State 73>: 7.08ns
ST_73: tmp_73 [1/2] 2.71ns
:8  %tmp_73 = load float* %u_row_temp_0_addr_1, align 8

ST_73: stg_449 [1/1] 4.38ns
:9  call void @_ssdm_op_Write.ap_fifo.volatile.floatP(float* %strm_out_V, float %tmp_73)

ST_73: tmp_74 [1/2] 2.71ns
:11  %tmp_74 = load float* %u_row_temp_1_addr_1, align 4


 <State 74>: 4.38ns
ST_74: stg_451 [1/1] 4.38ns
:12  call void @_ssdm_op_Write.ap_fifo.volatile.floatP(float* %strm_out_V, float %tmp_74)

ST_74: stg_452 [1/1] 0.00ns
:13  br label %._crit_edge

ST_74: stg_453 [1/1] 0.00ns
._crit_edge:0  br label %5


 <State 75>: 4.38ns
ST_75: stg_454 [1/1] 4.38ns
:1  call void @_ssdm_op_Write.ap_fifo.volatile.floatP(float* %strm_out_V, float %new_j_0_1)


 <State 76>: 4.38ns
ST_76: stg_455 [1/1] 4.38ns
:2  call void @_ssdm_op_Write.ap_fifo.volatile.floatP(float* %strm_out_V, float %new_j_1_0)


 <State 77>: 4.38ns
ST_77: stg_456 [1/1] 4.38ns
:3  call void @_ssdm_op_Write.ap_fifo.volatile.floatP(float* %strm_out_V, float %new_j_1_1)


 <State 78>: 4.38ns
ST_78: stg_457 [1/1] 4.38ns
:4  call void @_ssdm_op_Write.ap_fifo.volatile.floatP(float* %strm_out_V, float %new_k_0_0)


 <State 79>: 4.38ns
ST_79: stg_458 [1/1] 4.38ns
:5  call void @_ssdm_op_Write.ap_fifo.volatile.floatP(float* %strm_out_V, float %new_k_0_1)


 <State 80>: 4.38ns
ST_80: stg_459 [1/1] 4.38ns
:6  call void @_ssdm_op_Write.ap_fifo.volatile.floatP(float* %strm_out_V, float %new_k_1_0)


 <State 81>: 4.38ns
ST_81: stg_460 [1/1] 4.38ns
:7  call void @_ssdm_op_Write.ap_fifo.volatile.floatP(float* %strm_out_V, float %new_k_1_1)

ST_81: stg_461 [1/1] 0.00ns
:8  br label %.loopexit

ST_81: stg_462 [1/1] 0.00ns
.loopexit:0  ret void



============================================================
+ Verbose Summary: Timing violations
============================================================
Target clock period: 10ns, clock uncertainty: 1.25ns.

 No timing violations. 


============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
 - Input state : 
  - Chain level:
	State 1
	State 2
	State 3
	State 4
	State 5
	State 6
	State 7
	State 8
	State 9
	State 10
	State 11
	State 12
	State 13
	State 14
	State 15
	State 16
	State 17
	State 18
	State 19
	State 20
	State 21
	State 22
	State 23
	State 24
	State 25
	State 26
	State 27
	State 28
	State 29
	State 30
	State 31
	State 32
	State 33
	State 34
	State 35
	State 36
	State 37
	State 38
	State 39
	State 40
	State 41
	State 42
	State 43
	State 44
	State 45
	State 46
	State 47
	State 48
	State 49
	State 50
	State 51
	State 52
	State 53
	State 54
	State 55
	State 56
	State 57
	State 58
	State 59
	State 60
	State 61
	State 62
	State 63
	State 64
	State 65
	State 66
	State 67
	State 68
	State 69
	State 70
	State 71
	State 72
	State 73
	State 74
	State 75
	State 76
	State 77
	State 78
	State 79
	State 80
	State 81


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
