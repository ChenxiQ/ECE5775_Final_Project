

================================================================
== Vivado HLS Report for 'dut_svd_basic'
================================================================
* Date:           Fri Nov 11 23:14:25 2022

* Version:        2016.2 (Build 1577090 on Thu Jun 02 16:59:10 MDT 2016)
* Project:        pca.prj
* Solution:       solution1
* Product family: zynq
* Target device:  xc7z020clg484-1


================================================================
== Performance Estimates
================================================================
+ Timing (ns): 
    * Summary: 
    +--------+-------+----------+------------+
    |  Clock | Target| Estimated| Uncertainty|
    +--------+-------+----------+------------+
    |ap_clk  |  10.00|      8.46|        1.25|
    +--------+-------+----------+------------+

+ Latency (clock cycles): 
    * Summary: 
    +-------+--------------+-------+--------------+---------+
    |        Latency       |       Interval       | Pipeline|
    |  min  |      max     |  min  |      max     |   Type  |
    +-------+--------------+-------+--------------+---------+
    |  14113|  260456081761|  14113|  260456081761|   none  |
    +-------+--------------+-------+--------------+---------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        +-----------------------+-------+--------------+---------------+-----------+-----------+---------+----------+
        |                       |        Latency       |   Iteration   |  Initiation Interval  |   Trip  |          |
        |       Loop Name       |  min  |      max     |    Latency    |  achieved |   target  |  Count  | Pipelined|
        +-----------------------+-------+--------------+---------------+-----------+-----------+---------+----------+
        |- sweep_loop_row_loop  |  14112|  260456081760|  3 ~ 55369065 |          -|          -|     4704|    no    |
        | + col_loop            |      0|      55369062| 70626 ~ 70714 |          -|          -| 0 ~ 783 |    no    |
        |  ++ off_col           |  19600|         19600|             25|         25|        100|      784|    yes   |
        |  ++ off_row           |  50960|         50960|             65|         65|        100|      784|    yes   |
        +-----------------------+-------+--------------+---------------+-----------+-----------+---------+----------+

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 0
ResetActiveHigh: 1
IsCombinational: 2
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 0
HasVarLatency: 1
IsPipeline: 0
IsRtlPipelined: 0
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0

+ Individual pipeline summary: 
  * Pipeline-0: initiation interval (II) = 25, depth = 25
  * Pipeline-1: initiation interval (II) = 65, depth = 65


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states: 158
* Pipeline: 2
  Pipeline-0: II = 25, D = 25, States = { 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 }
  Pipeline-1: II = 65, D = 65, States = { 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 }
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 
	2  / true
2 --> 
	3  / (!exitcond_flatten)
3 --> 
	4  / true
4 --> 
	5  / (!exitcond2)
	2  / (exitcond2)
5 --> 
	6  / true
6 --> 
	7  / true
7 --> 
	8  / true
8 --> 
	9  / true
9 --> 
	10  / true
10 --> 
	11  / true
11 --> 
	12  / true
12 --> 
	13  / true
13 --> 
	14  / true
14 --> 
	15  / true
15 --> 
	16  / true
16 --> 
	17  / true
17 --> 
	18  / true
18 --> 
	19  / true
19 --> 
	20  / true
20 --> 
	21  / true
21 --> 
	22  / true
22 --> 
	23  / true
23 --> 
	24  / true
24 --> 
	25  / true
25 --> 
	26  / true
26 --> 
	27  / true
27 --> 
	28  / true
28 --> 
	29  / true
29 --> 
	30  / true
30 --> 
	31  / true
31 --> 
	32  / true
32 --> 
	33  / true
33 --> 
	34  / true
34 --> 
	35  / true
35 --> 
	36  / true
36 --> 
	37  / true
37 --> 
	38  / true
38 --> 
	39  / true
39 --> 
	40  / true
40 --> 
	41  / true
41 --> 
	42  / true
42 --> 
	43  / true
43 --> 
	44  / true
44 --> 
	45  / true
45 --> 
	46  / true
46 --> 
	47  / true
47 --> 
	48  / true
48 --> 
	49  / (tmp_mid2)
	50  / (!tmp_mid2)
49 --> 
	50  / true
50 --> 
	51  / true
51 --> 
	52  / true
52 --> 
	53  / true
53 --> 
	54  / true
54 --> 
	55  / true
55 --> 
	56  / true
56 --> 
	57  / true
57 --> 
	58  / true
58 --> 
	59  / true
59 --> 
	60  / true
60 --> 
	61  / true
61 --> 
	62  / true
62 --> 
	63  / true
63 --> 
	64  / true
64 --> 
	65  / true
65 --> 
	66  / (tmp_mid2)
	67  / (!tmp_mid2)
66 --> 
	67  / true
67 --> 
	68  / true
68 --> 
	93  / (exitcond1)
	69  / (!exitcond1)
69 --> 
	70  / true
70 --> 
	71  / true
71 --> 
	72  / true
72 --> 
	73  / true
73 --> 
	74  / true
74 --> 
	75  / true
75 --> 
	76  / true
76 --> 
	77  / true
77 --> 
	78  / true
78 --> 
	79  / true
79 --> 
	80  / true
80 --> 
	81  / true
81 --> 
	82  / true
82 --> 
	83  / true
83 --> 
	84  / true
84 --> 
	85  / true
85 --> 
	86  / true
86 --> 
	87  / true
87 --> 
	88  / true
88 --> 
	89  / true
89 --> 
	90  / true
90 --> 
	91  / true
91 --> 
	92  / true
92 --> 
	68  / true
93 --> 
	158  / (exitcond)
	94  / (!exitcond)
94 --> 
	95  / true
95 --> 
	96  / true
96 --> 
	97  / true
97 --> 
	98  / true
98 --> 
	99  / true
99 --> 
	100  / true
100 --> 
	101  / true
101 --> 
	102  / true
102 --> 
	103  / true
103 --> 
	104  / true
104 --> 
	105  / true
105 --> 
	106  / true
106 --> 
	107  / true
107 --> 
	108  / true
108 --> 
	109  / true
109 --> 
	110  / true
110 --> 
	111  / true
111 --> 
	112  / true
112 --> 
	113  / true
113 --> 
	114  / true
114 --> 
	115  / true
115 --> 
	116  / true
116 --> 
	117  / true
117 --> 
	118  / true
118 --> 
	119  / true
119 --> 
	120  / true
120 --> 
	121  / true
121 --> 
	122  / true
122 --> 
	123  / true
123 --> 
	124  / true
124 --> 
	125  / true
125 --> 
	126  / true
126 --> 
	127  / true
127 --> 
	128  / true
128 --> 
	129  / true
129 --> 
	130  / true
130 --> 
	131  / true
131 --> 
	132  / true
132 --> 
	133  / true
133 --> 
	134  / true
134 --> 
	135  / true
135 --> 
	136  / true
136 --> 
	137  / true
137 --> 
	138  / true
138 --> 
	139  / true
139 --> 
	140  / true
140 --> 
	141  / true
141 --> 
	142  / true
142 --> 
	143  / true
143 --> 
	144  / true
144 --> 
	145  / true
145 --> 
	146  / true
146 --> 
	147  / true
147 --> 
	148  / true
148 --> 
	149  / true
149 --> 
	150  / true
150 --> 
	151  / true
151 --> 
	152  / true
152 --> 
	153  / true
153 --> 
	154  / true
154 --> 
	155  / true
155 --> 
	156  / true
156 --> 
	157  / true
157 --> 
	93  / true
158 --> 
	4  / true
* FSM state operations: 

 <State 1>: 1.57ns
ST_1: s_in [1/1] 0.00ns
:0  %s_in = alloca [614656 x float], align 4

ST_1: u_in [1/1] 0.00ns
:1  %u_in = alloca [614656 x float], align 4

ST_1: v_in [1/1] 0.00ns
:2  %v_in = alloca [614656 x float], align 4

ST_1: stg_162 [1/1] 1.57ns
:3  br label %1


 <State 2>: 4.81ns
ST_2: indvar_flatten [1/1] 0.00ns
:0  %indvar_flatten = phi i13 [ 0, %0 ], [ %indvar_flatten_next, %11 ]

ST_2: sweepnum [1/1] 0.00ns
:1  %sweepnum = phi i3 [ 0, %0 ], [ %sweepnum_mid2, %11 ]

ST_2: top_left [1/1] 0.00ns
:2  %top_left = phi i10 [ 0, %0 ], [ %top_left_1, %11 ]

ST_2: exitcond_flatten [1/1] 2.18ns
:3  %exitcond_flatten = icmp eq i13 %indvar_flatten, -3488

ST_2: indvar_flatten_next [1/1] 1.96ns
:4  %indvar_flatten_next = add i13 %indvar_flatten, 1

ST_2: stg_168 [1/1] 0.00ns
:5  br i1 %exitcond_flatten, label %12, label %.reset

ST_2: sweepnum_1 [1/1] 0.80ns
.reset:0  %sweepnum_1 = add i3 1, %sweepnum

ST_2: exitcond3 [1/1] 2.07ns
.reset:3  %exitcond3 = icmp eq i10 %top_left, -240

ST_2: top_left_mid2 [1/1] 1.37ns
.reset:4  %top_left_mid2 = select i1 %exitcond3, i10 0, i10 %top_left

ST_2: tmp_mid1 [1/1] 1.62ns
.reset:5  %tmp_mid1 = icmp eq i3 %sweepnum_1, -3

ST_2: tmp1 [1/1] 1.62ns
.reset:6  %tmp1 = icmp eq i3 %sweepnum, -3

ST_2: tmp_mid2 [1/1] 1.37ns
.reset:7  %tmp_mid2 = select i1 %exitcond3, i1 %tmp_mid1, i1 %tmp1

ST_2: sweepnum_mid2 [1/1] 1.37ns
.reset:8  %sweepnum_mid2 = select i1 %exitcond3, i3 %sweepnum_1, i3 %sweepnum

ST_2: tmp [1/1] 0.00ns
.reset:12  %tmp = trunc i10 %top_left_mid2 to i3

ST_2: tmp_7 [1/1] 1.37ns
.reset:13  %tmp_7 = or i3 %tmp, %sweepnum_mid2

ST_2: tmp_4 [1/1] 0.00ns
.reset:14  %tmp_4 = call i7 @_ssdm_op_PartSelect.i7.i10.i32.i32(i10 %top_left_mid2, i32 3, i32 9)

ST_2: stg_179 [1/1] 0.00ns
:0  ret void


 <State 3>: 8.46ns
ST_3: stg_180 [1/1] 0.00ns
.reset:1  call void (...)* @_ssdm_op_SpecLoopName([20 x i8]* @sweep_loop_row_loop_str)

ST_3: empty_14 [1/1] 0.00ns
.reset:2  %empty_14 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 4704, i64 4704, i64 4704)

ST_3: top_left_cast [1/1] 0.00ns
.reset:9  %top_left_cast = zext i10 %top_left_mid2 to i32

ST_3: stg_183 [1/1] 0.00ns
.reset:10  call void (...)* @_ssdm_op_SpecLoopName([9 x i8]* @p_str1811) nounwind

ST_3: tmp_5 [1/1] 0.00ns
.reset:11  %tmp_5 = call i32 (...)* @_ssdm_op_SpecRegionBegin([9 x i8]* @p_str1811)

ST_3: tmp_8 [1/1] 0.00ns
.reset:15  %tmp_8 = call i10 @_ssdm_op_BitConcatenate.i10.i7.i3(i7 %tmp_4, i3 %tmp_7)

ST_3: tmp_9 [1/1] 2.07ns
.reset:16  %tmp_9 = icmp eq i10 %tmp_8, 0

ST_3: tmp_cast5 [1/1] 0.00ns
.reset:17  %tmp_cast5 = zext i10 %top_left_mid2 to i20

ST_3: tmp_cast [1/1] 0.00ns
.reset:18  %tmp_cast = zext i10 %top_left_mid2 to i21

ST_3: tmp_s [1/1] 6.38ns
.reset:19  %tmp_s = mul i21 784, %tmp_cast

ST_3: tmp_2 [1/1] 0.00ns
.reset:20  %tmp_2 = trunc i21 %tmp_s to i20

ST_3: tmp_3 [1/1] 2.08ns
.reset:21  %tmp_3 = add i20 %tmp_2, %tmp_cast5

ST_3: tmp_24_cast [1/1] 0.00ns
.reset:22  %tmp_24_cast = zext i20 %tmp_3 to i64

ST_3: A_addr [1/1] 0.00ns
.reset:23  %A_addr = getelementptr [614656 x float]* %A, i64 0, i64 %tmp_24_cast

ST_3: S_addr [1/1] 0.00ns
.reset:24  %S_addr = getelementptr [614656 x float]* %S, i64 0, i64 %tmp_24_cast

ST_3: U_addr [1/1] 0.00ns
.reset:25  %U_addr = getelementptr [614656 x float]* %U, i64 0, i64 %tmp_24_cast

ST_3: V_addr [1/1] 0.00ns
.reset:26  %V_addr = getelementptr [614656 x float]* %V, i64 0, i64 %tmp_24_cast

ST_3: v_in_addr [1/1] 0.00ns
.reset:27  %v_in_addr = getelementptr [614656 x float]* %v_in, i64 0, i64 %tmp_24_cast

ST_3: u_in_addr [1/1] 0.00ns
.reset:28  %u_in_addr = getelementptr [614656 x float]* %u_in, i64 0, i64 %tmp_24_cast

ST_3: s_in_addr [1/1] 0.00ns
.reset:29  %s_in_addr = getelementptr [614656 x float]* %s_in, i64 0, i64 %tmp_24_cast

ST_3: stg_200 [1/1] 1.57ns
.reset:30  br label %2


 <State 4>: 3.89ns
ST_4: bottom_right_0_in [1/1] 0.00ns
:0  %bottom_right_0_in = phi i32 [ %top_left_cast, %.reset ], [ %bottom_right, %10 ]

ST_4: exitcond2 [1/1] 2.52ns
:1  %exitcond2 = icmp eq i32 %bottom_right_0_in, 783

ST_4: stg_203 [1/1] 0.00ns
:2  br i1 %exitcond2, label %11, label %_ifconv2

ST_4: bottom_right [1/1] 2.44ns
_ifconv2:0  %bottom_right = add nsw i32 1, %bottom_right_0_in

ST_4: tmp_10 [1/1] 0.00ns
_ifconv2:6  %tmp_10 = trunc i32 %bottom_right to i21

ST_4: empty_13 [1/1] 0.00ns
:0  %empty_13 = call i32 (...)* @_ssdm_op_SpecRegionEnd([9 x i8]* @p_str1811, i32 %tmp_5)

ST_4: top_left_1 [1/1] 1.84ns
:1  %top_left_1 = add i10 %top_left_mid2, 1

ST_4: stg_208 [1/1] 0.00ns
:2  br label %1


 <State 5>: 6.38ns
ST_5: w_in [4/4] 2.61ns
_ifconv2:5  %w_in = load float* %s_in_addr, align 4

ST_5: tmp_11 [1/1] 6.38ns
_ifconv2:7  %tmp_11 = mul i21 784, %tmp_10

ST_5: tmp_23 [1/1] 2.20ns
_ifconv2:11  %tmp_23 = add i21 %tmp_s, %tmp_10

ST_5: tmp_29_cast [1/1] 0.00ns
_ifconv2:12  %tmp_29_cast = sext i21 %tmp_23 to i64

ST_5: s_in_addr_1 [1/1] 0.00ns
_ifconv2:30  %s_in_addr_1 = getelementptr [614656 x float]* %s_in, i64 0, i64 %tmp_29_cast

ST_5: x_in [4/4] 2.61ns
_ifconv2:33  %x_in = load float* %s_in_addr_1, align 4

ST_5: w_in_1 [4/4] 2.61ns
_ifconv2:36  %w_in_1 = load float* %A_addr, align 4

ST_5: A_addr_1 [1/1] 0.00ns
_ifconv2:37  %A_addr_1 = getelementptr [614656 x float]* %A, i64 0, i64 %tmp_29_cast

ST_5: x_in_1 [4/4] 2.61ns
_ifconv2:39  %x_in_1 = load float* %A_addr_1, align 4


 <State 6>: 4.81ns
ST_6: w_in [3/4] 2.61ns
_ifconv2:5  %w_in = load float* %s_in_addr, align 4

ST_6: tmp_12 [1/1] 2.20ns
_ifconv2:8  %tmp_12 = add i21 %tmp_11, %tmp_10

ST_6: tmp_28_cast [1/1] 0.00ns
_ifconv2:9  %tmp_28_cast = sext i21 %tmp_12 to i64

ST_6: A_addr_3 [1/1] 0.00ns
_ifconv2:10  %A_addr_3 = getelementptr [614656 x float]* %A, i64 0, i64 %tmp_28_cast

ST_6: tmp_24 [1/1] 2.20ns
_ifconv2:14  %tmp_24 = add i21 %tmp_11, %tmp_cast

ST_6: tmp_32_cast [1/1] 0.00ns
_ifconv2:15  %tmp_32_cast = sext i21 %tmp_24 to i64

ST_6: s_in_addr_2 [1/1] 0.00ns
_ifconv2:31  %s_in_addr_2 = getelementptr [614656 x float]* %s_in, i64 0, i64 %tmp_32_cast

ST_6: s_in_addr_3 [1/1] 0.00ns
_ifconv2:32  %s_in_addr_3 = getelementptr [614656 x float]* %s_in, i64 0, i64 %tmp_28_cast

ST_6: x_in [3/4] 2.61ns
_ifconv2:33  %x_in = load float* %s_in_addr_1, align 4

ST_6: y_in [4/4] 2.61ns
_ifconv2:34  %y_in = load float* %s_in_addr_2, align 4

ST_6: z_in [4/4] 2.61ns
_ifconv2:35  %z_in = load float* %s_in_addr_3, align 4

ST_6: w_in_1 [3/4] 2.61ns
_ifconv2:36  %w_in_1 = load float* %A_addr, align 4

ST_6: A_addr_2 [1/1] 0.00ns
_ifconv2:38  %A_addr_2 = getelementptr [614656 x float]* %A, i64 0, i64 %tmp_32_cast

ST_6: x_in_1 [3/4] 2.61ns
_ifconv2:39  %x_in_1 = load float* %A_addr_1, align 4

ST_6: y_in_1 [4/4] 2.61ns
_ifconv2:40  %y_in_1 = load float* %A_addr_2, align 4

ST_6: z_in_1 [4/4] 2.61ns
_ifconv2:44  %z_in_1 = load float* %A_addr_3, align 4


 <State 7>: 2.61ns
ST_7: w_in [2/4] 2.61ns
_ifconv2:5  %w_in = load float* %s_in_addr, align 4

ST_7: x_in [2/4] 2.61ns
_ifconv2:33  %x_in = load float* %s_in_addr_1, align 4

ST_7: y_in [3/4] 2.61ns
_ifconv2:34  %y_in = load float* %s_in_addr_2, align 4

ST_7: z_in [3/4] 2.61ns
_ifconv2:35  %z_in = load float* %s_in_addr_3, align 4

ST_7: w_in_1 [2/4] 2.61ns
_ifconv2:36  %w_in_1 = load float* %A_addr, align 4

ST_7: x_in_1 [2/4] 2.61ns
_ifconv2:39  %x_in_1 = load float* %A_addr_1, align 4

ST_7: y_in_1 [3/4] 2.61ns
_ifconv2:40  %y_in_1 = load float* %A_addr_2, align 4

ST_7: z_in_1 [3/4] 2.61ns
_ifconv2:44  %z_in_1 = load float* %A_addr_3, align 4

ST_7: stg_242 [2/2] 2.61ns
_ifconv2:99  store float 0.000000e+00, float* %s_in_addr_1, align 4

ST_7: stg_243 [2/2] 2.61ns
_ifconv2:100  store float 0.000000e+00, float* %s_in_addr_2, align 4


 <State 8>: 3.98ns
ST_8: tmp_1 [1/1] 2.52ns
_ifconv2:4  %tmp_1 = icmp eq i32 %bottom_right_0_in, 0

ST_8: w_in [1/4] 2.61ns
_ifconv2:5  %w_in = load float* %s_in_addr, align 4

ST_8: x_in [1/4] 2.61ns
_ifconv2:33  %x_in = load float* %s_in_addr_1, align 4

ST_8: y_in [2/4] 2.61ns
_ifconv2:34  %y_in = load float* %s_in_addr_2, align 4

ST_8: z_in [2/4] 2.61ns
_ifconv2:35  %z_in = load float* %s_in_addr_3, align 4

ST_8: w_in_1 [1/4] 2.61ns
_ifconv2:36  %w_in_1 = load float* %A_addr, align 4

ST_8: x_in_1 [1/4] 2.61ns
_ifconv2:39  %x_in_1 = load float* %A_addr_1, align 4

ST_8: y_in_1 [2/4] 2.61ns
_ifconv2:40  %y_in_1 = load float* %A_addr_2, align 4

ST_8: x_in_2 [1/1] 0.00ns (grouped into LUT with out node x_in_3)
_ifconv2:42  %x_in_2 = select i1 %tmp_1, float %x_in_1, float %x_in

ST_8: w_in_2 [1/1] 0.00ns (grouped into LUT with out node w_in_3)
_ifconv2:43  %w_in_2 = select i1 %tmp_1, float %w_in_1, float %w_in

ST_8: z_in_1 [2/4] 2.61ns
_ifconv2:44  %z_in_1 = load float* %A_addr_3, align 4

ST_8: x_in_3 [1/1] 1.37ns (out node of the LUT)
_ifconv2:47  %x_in_3 = select i1 %tmp_9, float %x_in_2, float %x_in

ST_8: w_in_3 [1/1] 1.37ns (out node of the LUT)
_ifconv2:48  %w_in_3 = select i1 %tmp_9, float %w_in_2, float %w_in

ST_8: stg_257 [1/2] 2.61ns
_ifconv2:99  store float 0.000000e+00, float* %s_in_addr_1, align 4

ST_8: stg_258 [1/2] 2.61ns
_ifconv2:100  store float 0.000000e+00, float* %s_in_addr_2, align 4


 <State 9>: 3.98ns
ST_9: y_in [1/4] 2.61ns
_ifconv2:34  %y_in = load float* %s_in_addr_2, align 4

ST_9: z_in [1/4] 2.61ns
_ifconv2:35  %z_in = load float* %s_in_addr_3, align 4

ST_9: y_in_1 [1/4] 2.61ns
_ifconv2:40  %y_in_1 = load float* %A_addr_2, align 4

ST_9: y_in_2 [1/1] 0.00ns (grouped into LUT with out node y_in_3)
_ifconv2:41  %y_in_2 = select i1 %tmp_1, float %y_in_1, float %y_in

ST_9: z_in_1 [1/4] 2.61ns
_ifconv2:44  %z_in_1 = load float* %A_addr_3, align 4

ST_9: z_in_2 [1/1] 1.37ns
_ifconv2:45  %z_in_2 = select i1 %tmp_9, float %z_in_1, float %z_in

ST_9: y_in_3 [1/1] 1.37ns (out node of the LUT)
_ifconv2:46  %y_in_3 = select i1 %tmp_9, float %y_in_2, float %y_in


 <State 10>: 7.26ns
ST_10: u1 [5/5] 7.26ns
_ifconv2:49  %u1 = fsub float %z_in_2, %w_in_3

ST_10: u2 [5/5] 7.26ns
_ifconv2:50  %u2 = fadd float %y_in_3, %x_in_3

ST_10: u1_1 [5/5] 7.26ns
_ifconv2:54  %u1_1 = fadd float %z_in_2, %w_in_3

ST_10: u2_1 [5/5] 7.26ns
_ifconv2:55  %u2_1 = fsub float %y_in_3, %x_in_3


 <State 11>: 7.26ns
ST_11: u1 [4/5] 7.26ns
_ifconv2:49  %u1 = fsub float %z_in_2, %w_in_3

ST_11: u2 [4/5] 7.26ns
_ifconv2:50  %u2 = fadd float %y_in_3, %x_in_3

ST_11: u1_1 [4/5] 7.26ns
_ifconv2:54  %u1_1 = fadd float %z_in_2, %w_in_3

ST_11: u2_1 [4/5] 7.26ns
_ifconv2:55  %u2_1 = fsub float %y_in_3, %x_in_3


 <State 12>: 7.26ns
ST_12: u1 [3/5] 7.26ns
_ifconv2:49  %u1 = fsub float %z_in_2, %w_in_3

ST_12: u2 [3/5] 7.26ns
_ifconv2:50  %u2 = fadd float %y_in_3, %x_in_3

ST_12: u1_1 [3/5] 7.26ns
_ifconv2:54  %u1_1 = fadd float %z_in_2, %w_in_3

ST_12: u2_1 [3/5] 7.26ns
_ifconv2:55  %u2_1 = fsub float %y_in_3, %x_in_3


 <State 13>: 7.26ns
ST_13: u1 [2/5] 7.26ns
_ifconv2:49  %u1 = fsub float %z_in_2, %w_in_3

ST_13: u2 [2/5] 7.26ns
_ifconv2:50  %u2 = fadd float %y_in_3, %x_in_3

ST_13: u1_1 [2/5] 7.26ns
_ifconv2:54  %u1_1 = fadd float %z_in_2, %w_in_3

ST_13: u2_1 [2/5] 7.26ns
_ifconv2:55  %u2_1 = fsub float %y_in_3, %x_in_3


 <State 14>: 7.26ns
ST_14: u1 [1/5] 7.26ns
_ifconv2:49  %u1 = fsub float %z_in_2, %w_in_3

ST_14: u2 [1/5] 7.26ns
_ifconv2:50  %u2 = fadd float %y_in_3, %x_in_3

ST_14: u1_1 [1/5] 7.26ns
_ifconv2:54  %u1_1 = fadd float %z_in_2, %w_in_3

ST_14: u2_1 [1/5] 7.26ns
_ifconv2:55  %u2_1 = fsub float %y_in_3, %x_in_3


 <State 15>: 6.16ns
ST_15: call_ret [2/2] 6.16ns
_ifconv2:51  %call_ret = call fastcc { float, float } @"dut_calc_angle<float, float>"(float %u1, float %u2)

ST_15: call_ret1 [2/2] 6.16ns
_ifconv2:56  %call_ret1 = call fastcc { float, float } @"dut_calc_angle<float, float>"(float %u1_1, float %u2_1)


 <State 16>: 7.27ns
ST_16: call_ret [1/2] 7.27ns
_ifconv2:51  %call_ret = call fastcc { float, float } @"dut_calc_angle<float, float>"(float %u1, float %u2)

ST_16: cosA_half [1/1] 0.00ns
_ifconv2:52  %cosA_half = extractvalue { float, float } %call_ret, 0

ST_16: sinA_half [1/1] 0.00ns
_ifconv2:53  %sinA_half = extractvalue { float, float } %call_ret, 1

ST_16: call_ret1 [1/2] 7.27ns
_ifconv2:56  %call_ret1 = call fastcc { float, float } @"dut_calc_angle<float, float>"(float %u1_1, float %u2_1)

ST_16: cosB_half [1/1] 0.00ns
_ifconv2:57  %cosB_half = extractvalue { float, float } %call_ret1, 0

ST_16: sinB_half [1/1] 0.00ns
_ifconv2:58  %sinB_half = extractvalue { float, float } %call_ret1, 1


 <State 17>: 3.24ns
ST_17: uz_new [10/10] 1.87ns
_ifconv2:59  %uz_new = call fastcc float @dut_vm2x1_base(float %cosA_half, float %cosB_half, float %sinA_half, float %sinB_half)

ST_17: tmp_6_to_int [1/1] 0.00ns
_ifconv2:60  %tmp_6_to_int = bitcast float %cosA_half to i32

ST_17: tmp_6_neg [1/1] 1.37ns
_ifconv2:61  %tmp_6_neg = xor i32 %tmp_6_to_int, -2147483648

ST_17: a2_assign [1/1] 0.00ns
_ifconv2:62  %a2_assign = bitcast i32 %tmp_6_neg to float

ST_17: ux_new [10/10] 1.87ns
_ifconv2:63  %ux_new = call fastcc float @dut_vm2x1_base(float %sinA_half, float %cosB_half, float %a2_assign, float %sinB_half)

ST_17: tmp_7_to_int [1/1] 0.00ns
_ifconv2:64  %tmp_7_to_int = bitcast float %sinA_half to i32

ST_17: tmp_7_neg [1/1] 1.37ns
_ifconv2:65  %tmp_7_neg = xor i32 %tmp_7_to_int, -2147483648

ST_17: a2_assign_1 [1/1] 0.00ns
_ifconv2:66  %a2_assign_1 = bitcast i32 %tmp_7_neg to float

ST_17: vz_int_1 [10/10] 1.87ns
_ifconv2:67  %vz_int_1 = call fastcc float @dut_vm2x1_base(float %cosA_half, float %cosB_half, float %a2_assign_1, float %sinB_half)

ST_17: vy_int_1 [10/10] 1.87ns
_ifconv2:68  %vy_int_1 = call fastcc float @dut_vm2x1_base(float %sinA_half, float %cosB_half, float %cosA_half, float %sinB_half)


 <State 18>: 7.58ns
ST_18: uz_new [9/10] 7.58ns
_ifconv2:59  %uz_new = call fastcc float @dut_vm2x1_base(float %cosA_half, float %cosB_half, float %sinA_half, float %sinB_half)

ST_18: ux_new [9/10] 7.58ns
_ifconv2:63  %ux_new = call fastcc float @dut_vm2x1_base(float %sinA_half, float %cosB_half, float %a2_assign, float %sinB_half)

ST_18: vz_int_1 [9/10] 7.58ns
_ifconv2:67  %vz_int_1 = call fastcc float @dut_vm2x1_base(float %cosA_half, float %cosB_half, float %a2_assign_1, float %sinB_half)

ST_18: vy_int_1 [9/10] 7.58ns
_ifconv2:68  %vy_int_1 = call fastcc float @dut_vm2x1_base(float %sinA_half, float %cosB_half, float %cosA_half, float %sinB_half)


 <State 19>: 7.58ns
ST_19: uz_new [8/10] 7.58ns
_ifconv2:59  %uz_new = call fastcc float @dut_vm2x1_base(float %cosA_half, float %cosB_half, float %sinA_half, float %sinB_half)

ST_19: ux_new [8/10] 7.58ns
_ifconv2:63  %ux_new = call fastcc float @dut_vm2x1_base(float %sinA_half, float %cosB_half, float %a2_assign, float %sinB_half)

ST_19: vz_int_1 [8/10] 7.58ns
_ifconv2:67  %vz_int_1 = call fastcc float @dut_vm2x1_base(float %cosA_half, float %cosB_half, float %a2_assign_1, float %sinB_half)

ST_19: vy_int_1 [8/10] 7.58ns
_ifconv2:68  %vy_int_1 = call fastcc float @dut_vm2x1_base(float %sinA_half, float %cosB_half, float %cosA_half, float %sinB_half)


 <State 20>: 7.58ns
ST_20: uz_new [7/10] 7.58ns
_ifconv2:59  %uz_new = call fastcc float @dut_vm2x1_base(float %cosA_half, float %cosB_half, float %sinA_half, float %sinB_half)

ST_20: ux_new [7/10] 7.58ns
_ifconv2:63  %ux_new = call fastcc float @dut_vm2x1_base(float %sinA_half, float %cosB_half, float %a2_assign, float %sinB_half)

ST_20: vz_int_1 [7/10] 7.58ns
_ifconv2:67  %vz_int_1 = call fastcc float @dut_vm2x1_base(float %cosA_half, float %cosB_half, float %a2_assign_1, float %sinB_half)

ST_20: vy_int_1 [7/10] 7.58ns
_ifconv2:68  %vy_int_1 = call fastcc float @dut_vm2x1_base(float %sinA_half, float %cosB_half, float %cosA_half, float %sinB_half)


 <State 21>: 7.58ns
ST_21: uz_new [6/10] 7.58ns
_ifconv2:59  %uz_new = call fastcc float @dut_vm2x1_base(float %cosA_half, float %cosB_half, float %sinA_half, float %sinB_half)

ST_21: ux_new [6/10] 7.58ns
_ifconv2:63  %ux_new = call fastcc float @dut_vm2x1_base(float %sinA_half, float %cosB_half, float %a2_assign, float %sinB_half)

ST_21: vz_int_1 [6/10] 7.58ns
_ifconv2:67  %vz_int_1 = call fastcc float @dut_vm2x1_base(float %cosA_half, float %cosB_half, float %a2_assign_1, float %sinB_half)

ST_21: vy_int_1 [6/10] 7.58ns
_ifconv2:68  %vy_int_1 = call fastcc float @dut_vm2x1_base(float %sinA_half, float %cosB_half, float %cosA_half, float %sinB_half)


 <State 22>: 7.58ns
ST_22: uz_new [5/10] 7.58ns
_ifconv2:59  %uz_new = call fastcc float @dut_vm2x1_base(float %cosA_half, float %cosB_half, float %sinA_half, float %sinB_half)

ST_22: ux_new [5/10] 7.58ns
_ifconv2:63  %ux_new = call fastcc float @dut_vm2x1_base(float %sinA_half, float %cosB_half, float %a2_assign, float %sinB_half)

ST_22: vz_int_1 [5/10] 7.58ns
_ifconv2:67  %vz_int_1 = call fastcc float @dut_vm2x1_base(float %cosA_half, float %cosB_half, float %a2_assign_1, float %sinB_half)

ST_22: vy_int_1 [5/10] 7.58ns
_ifconv2:68  %vy_int_1 = call fastcc float @dut_vm2x1_base(float %sinA_half, float %cosB_half, float %cosA_half, float %sinB_half)


 <State 23>: 7.58ns
ST_23: uz_new [4/10] 7.58ns
_ifconv2:59  %uz_new = call fastcc float @dut_vm2x1_base(float %cosA_half, float %cosB_half, float %sinA_half, float %sinB_half)

ST_23: ux_new [4/10] 7.58ns
_ifconv2:63  %ux_new = call fastcc float @dut_vm2x1_base(float %sinA_half, float %cosB_half, float %a2_assign, float %sinB_half)

ST_23: vz_int_1 [4/10] 7.58ns
_ifconv2:67  %vz_int_1 = call fastcc float @dut_vm2x1_base(float %cosA_half, float %cosB_half, float %a2_assign_1, float %sinB_half)

ST_23: vy_int_1 [4/10] 7.58ns
_ifconv2:68  %vy_int_1 = call fastcc float @dut_vm2x1_base(float %sinA_half, float %cosB_half, float %cosA_half, float %sinB_half)


 <State 24>: 7.58ns
ST_24: uz_new [3/10] 7.58ns
_ifconv2:59  %uz_new = call fastcc float @dut_vm2x1_base(float %cosA_half, float %cosB_half, float %sinA_half, float %sinB_half)

ST_24: ux_new [3/10] 7.58ns
_ifconv2:63  %ux_new = call fastcc float @dut_vm2x1_base(float %sinA_half, float %cosB_half, float %a2_assign, float %sinB_half)

ST_24: vz_int_1 [3/10] 7.58ns
_ifconv2:67  %vz_int_1 = call fastcc float @dut_vm2x1_base(float %cosA_half, float %cosB_half, float %a2_assign_1, float %sinB_half)

ST_24: vy_int_1 [3/10] 7.58ns
_ifconv2:68  %vy_int_1 = call fastcc float @dut_vm2x1_base(float %sinA_half, float %cosB_half, float %cosA_half, float %sinB_half)


 <State 25>: 7.58ns
ST_25: uz_new [2/10] 7.58ns
_ifconv2:59  %uz_new = call fastcc float @dut_vm2x1_base(float %cosA_half, float %cosB_half, float %sinA_half, float %sinB_half)

ST_25: ux_new [2/10] 7.58ns
_ifconv2:63  %ux_new = call fastcc float @dut_vm2x1_base(float %sinA_half, float %cosB_half, float %a2_assign, float %sinB_half)

ST_25: vz_int_1 [2/10] 7.58ns
_ifconv2:67  %vz_int_1 = call fastcc float @dut_vm2x1_base(float %cosA_half, float %cosB_half, float %a2_assign_1, float %sinB_half)

ST_25: vy_int_1 [2/10] 7.58ns
_ifconv2:68  %vy_int_1 = call fastcc float @dut_vm2x1_base(float %sinA_half, float %cosB_half, float %cosA_half, float %sinB_half)


 <State 26>: 7.26ns
ST_26: uz_new [1/10] 7.26ns
_ifconv2:59  %uz_new = call fastcc float @dut_vm2x1_base(float %cosA_half, float %cosB_half, float %sinA_half, float %sinB_half)

ST_26: ux_new [1/10] 7.26ns
_ifconv2:63  %ux_new = call fastcc float @dut_vm2x1_base(float %sinA_half, float %cosB_half, float %a2_assign, float %sinB_half)

ST_26: vz_int_1 [1/10] 7.26ns
_ifconv2:67  %vz_int_1 = call fastcc float @dut_vm2x1_base(float %cosA_half, float %cosB_half, float %a2_assign_1, float %sinB_half)

ST_26: vy_int_1 [1/10] 7.26ns
_ifconv2:68  %vy_int_1 = call fastcc float @dut_vm2x1_base(float %sinA_half, float %cosB_half, float %cosA_half, float %sinB_half)


 <State 27>: 3.24ns
ST_27: vy_int_to_int [1/1] 0.00ns
_ifconv2:72  %vy_int_to_int = bitcast float %vy_int_1 to i32

ST_27: vy_int_neg [1/1] 1.37ns
_ifconv2:73  %vy_int_neg = xor i32 %vy_int_to_int, -2147483648

ST_27: vy_int [1/1] 0.00ns
_ifconv2:74  %vy_int = bitcast i32 %vy_int_neg to float

ST_27: w_out1 [10/10] 1.87ns
_ifconv2:75  %w_out1 = call fastcc float @dut_vm2x1_base(float %w_in_3, float %vz_int_1, float %x_in_3, float %vy_int)

ST_27: w_out2 [10/10] 1.87ns
_ifconv2:76  %w_out2 = call fastcc float @dut_vm2x1_base(float %y_in_3, float %vz_int_1, float %z_in_2, float %vy_int)

ST_27: z_out1 [10/10] 1.87ns
_ifconv2:78  %z_out1 = call fastcc float @dut_vm2x1_base(float %w_in_3, float %vy_int_1, float %x_in_3, float %vz_int_1)

ST_27: z_out2 [10/10] 1.87ns
_ifconv2:79  %z_out2 = call fastcc float @dut_vm2x1_base(float %y_in_3, float %vy_int_1, float %z_in_2, float %vz_int_1)


 <State 28>: 7.58ns
ST_28: w_out1 [9/10] 7.58ns
_ifconv2:75  %w_out1 = call fastcc float @dut_vm2x1_base(float %w_in_3, float %vz_int_1, float %x_in_3, float %vy_int)

ST_28: w_out2 [9/10] 7.58ns
_ifconv2:76  %w_out2 = call fastcc float @dut_vm2x1_base(float %y_in_3, float %vz_int_1, float %z_in_2, float %vy_int)

ST_28: z_out1 [9/10] 7.58ns
_ifconv2:78  %z_out1 = call fastcc float @dut_vm2x1_base(float %w_in_3, float %vy_int_1, float %x_in_3, float %vz_int_1)

ST_28: z_out2 [9/10] 7.58ns
_ifconv2:79  %z_out2 = call fastcc float @dut_vm2x1_base(float %y_in_3, float %vy_int_1, float %z_in_2, float %vz_int_1)


 <State 29>: 7.58ns
ST_29: w_out1 [8/10] 7.58ns
_ifconv2:75  %w_out1 = call fastcc float @dut_vm2x1_base(float %w_in_3, float %vz_int_1, float %x_in_3, float %vy_int)

ST_29: w_out2 [8/10] 7.58ns
_ifconv2:76  %w_out2 = call fastcc float @dut_vm2x1_base(float %y_in_3, float %vz_int_1, float %z_in_2, float %vy_int)

ST_29: z_out1 [8/10] 7.58ns
_ifconv2:78  %z_out1 = call fastcc float @dut_vm2x1_base(float %w_in_3, float %vy_int_1, float %x_in_3, float %vz_int_1)

ST_29: z_out2 [8/10] 7.58ns
_ifconv2:79  %z_out2 = call fastcc float @dut_vm2x1_base(float %y_in_3, float %vy_int_1, float %z_in_2, float %vz_int_1)


 <State 30>: 7.58ns
ST_30: w_out1 [7/10] 7.58ns
_ifconv2:75  %w_out1 = call fastcc float @dut_vm2x1_base(float %w_in_3, float %vz_int_1, float %x_in_3, float %vy_int)

ST_30: w_out2 [7/10] 7.58ns
_ifconv2:76  %w_out2 = call fastcc float @dut_vm2x1_base(float %y_in_3, float %vz_int_1, float %z_in_2, float %vy_int)

ST_30: z_out1 [7/10] 7.58ns
_ifconv2:78  %z_out1 = call fastcc float @dut_vm2x1_base(float %w_in_3, float %vy_int_1, float %x_in_3, float %vz_int_1)

ST_30: z_out2 [7/10] 7.58ns
_ifconv2:79  %z_out2 = call fastcc float @dut_vm2x1_base(float %y_in_3, float %vy_int_1, float %z_in_2, float %vz_int_1)


 <State 31>: 7.58ns
ST_31: w_out1 [6/10] 7.58ns
_ifconv2:75  %w_out1 = call fastcc float @dut_vm2x1_base(float %w_in_3, float %vz_int_1, float %x_in_3, float %vy_int)

ST_31: w_out2 [6/10] 7.58ns
_ifconv2:76  %w_out2 = call fastcc float @dut_vm2x1_base(float %y_in_3, float %vz_int_1, float %z_in_2, float %vy_int)

ST_31: z_out1 [6/10] 7.58ns
_ifconv2:78  %z_out1 = call fastcc float @dut_vm2x1_base(float %w_in_3, float %vy_int_1, float %x_in_3, float %vz_int_1)

ST_31: z_out2 [6/10] 7.58ns
_ifconv2:79  %z_out2 = call fastcc float @dut_vm2x1_base(float %y_in_3, float %vy_int_1, float %z_in_2, float %vz_int_1)


 <State 32>: 7.58ns
ST_32: w_out1 [5/10] 7.58ns
_ifconv2:75  %w_out1 = call fastcc float @dut_vm2x1_base(float %w_in_3, float %vz_int_1, float %x_in_3, float %vy_int)

ST_32: w_out2 [5/10] 7.58ns
_ifconv2:76  %w_out2 = call fastcc float @dut_vm2x1_base(float %y_in_3, float %vz_int_1, float %z_in_2, float %vy_int)

ST_32: z_out1 [5/10] 7.58ns
_ifconv2:78  %z_out1 = call fastcc float @dut_vm2x1_base(float %w_in_3, float %vy_int_1, float %x_in_3, float %vz_int_1)

ST_32: z_out2 [5/10] 7.58ns
_ifconv2:79  %z_out2 = call fastcc float @dut_vm2x1_base(float %y_in_3, float %vy_int_1, float %z_in_2, float %vz_int_1)


 <State 33>: 7.58ns
ST_33: w_out1 [4/10] 7.58ns
_ifconv2:75  %w_out1 = call fastcc float @dut_vm2x1_base(float %w_in_3, float %vz_int_1, float %x_in_3, float %vy_int)

ST_33: w_out2 [4/10] 7.58ns
_ifconv2:76  %w_out2 = call fastcc float @dut_vm2x1_base(float %y_in_3, float %vz_int_1, float %z_in_2, float %vy_int)

ST_33: z_out1 [4/10] 7.58ns
_ifconv2:78  %z_out1 = call fastcc float @dut_vm2x1_base(float %w_in_3, float %vy_int_1, float %x_in_3, float %vz_int_1)

ST_33: z_out2 [4/10] 7.58ns
_ifconv2:79  %z_out2 = call fastcc float @dut_vm2x1_base(float %y_in_3, float %vy_int_1, float %z_in_2, float %vz_int_1)


 <State 34>: 7.58ns
ST_34: w_out1 [3/10] 7.58ns
_ifconv2:75  %w_out1 = call fastcc float @dut_vm2x1_base(float %w_in_3, float %vz_int_1, float %x_in_3, float %vy_int)

ST_34: w_out2 [3/10] 7.58ns
_ifconv2:76  %w_out2 = call fastcc float @dut_vm2x1_base(float %y_in_3, float %vz_int_1, float %z_in_2, float %vy_int)

ST_34: z_out1 [3/10] 7.58ns
_ifconv2:78  %z_out1 = call fastcc float @dut_vm2x1_base(float %w_in_3, float %vy_int_1, float %x_in_3, float %vz_int_1)

ST_34: z_out2 [3/10] 7.58ns
_ifconv2:79  %z_out2 = call fastcc float @dut_vm2x1_base(float %y_in_3, float %vy_int_1, float %z_in_2, float %vz_int_1)


 <State 35>: 7.58ns
ST_35: w_out1 [2/10] 7.58ns
_ifconv2:75  %w_out1 = call fastcc float @dut_vm2x1_base(float %w_in_3, float %vz_int_1, float %x_in_3, float %vy_int)

ST_35: w_out2 [2/10] 7.58ns
_ifconv2:76  %w_out2 = call fastcc float @dut_vm2x1_base(float %y_in_3, float %vz_int_1, float %z_in_2, float %vy_int)

ST_35: z_out1 [2/10] 7.58ns
_ifconv2:78  %z_out1 = call fastcc float @dut_vm2x1_base(float %w_in_3, float %vy_int_1, float %x_in_3, float %vz_int_1)

ST_35: z_out2 [2/10] 7.58ns
_ifconv2:79  %z_out2 = call fastcc float @dut_vm2x1_base(float %y_in_3, float %vy_int_1, float %z_in_2, float %vz_int_1)


 <State 36>: 7.26ns
ST_36: w_out1 [1/10] 7.26ns
_ifconv2:75  %w_out1 = call fastcc float @dut_vm2x1_base(float %w_in_3, float %vz_int_1, float %x_in_3, float %vy_int)

ST_36: w_out2 [1/10] 7.26ns
_ifconv2:76  %w_out2 = call fastcc float @dut_vm2x1_base(float %y_in_3, float %vz_int_1, float %z_in_2, float %vy_int)

ST_36: z_out1 [1/10] 7.26ns
_ifconv2:78  %z_out1 = call fastcc float @dut_vm2x1_base(float %w_in_3, float %vy_int_1, float %x_in_3, float %vz_int_1)

ST_36: z_out2 [1/10] 7.26ns
_ifconv2:79  %z_out2 = call fastcc float @dut_vm2x1_base(float %y_in_3, float %vy_int_1, float %z_in_2, float %vz_int_1)


 <State 37>: 3.24ns
ST_37: uy_new_1_0_to_int [1/1] 0.00ns
_ifconv2:69  %uy_new_1_0_to_int = bitcast float %ux_new to i32

ST_37: uy_new_1_0_neg [1/1] 1.37ns
_ifconv2:70  %uy_new_1_0_neg = xor i32 %uy_new_1_0_to_int, -2147483648

ST_37: uy_int [1/1] 0.00ns
_ifconv2:71  %uy_int = bitcast i32 %uy_new_1_0_neg to float

ST_37: w_out_int [10/10] 1.87ns
_ifconv2:77  %w_out_int = call fastcc float @dut_vm2x1_base(float %uz_new, float %w_out1, float %uy_int, float %w_out2)

ST_37: z_out_int [10/10] 1.87ns
_ifconv2:80  %z_out_int = call fastcc float @dut_vm2x1_base(float %ux_new, float %z_out1, float %uz_new, float %z_out2)


 <State 38>: 7.58ns
ST_38: w_out_int [9/10] 7.58ns
_ifconv2:77  %w_out_int = call fastcc float @dut_vm2x1_base(float %uz_new, float %w_out1, float %uy_int, float %w_out2)

ST_38: z_out_int [9/10] 7.58ns
_ifconv2:80  %z_out_int = call fastcc float @dut_vm2x1_base(float %ux_new, float %z_out1, float %uz_new, float %z_out2)


 <State 39>: 7.58ns
ST_39: w_out_int [8/10] 7.58ns
_ifconv2:77  %w_out_int = call fastcc float @dut_vm2x1_base(float %uz_new, float %w_out1, float %uy_int, float %w_out2)

ST_39: z_out_int [8/10] 7.58ns
_ifconv2:80  %z_out_int = call fastcc float @dut_vm2x1_base(float %ux_new, float %z_out1, float %uz_new, float %z_out2)


 <State 40>: 7.58ns
ST_40: w_out_int [7/10] 7.58ns
_ifconv2:77  %w_out_int = call fastcc float @dut_vm2x1_base(float %uz_new, float %w_out1, float %uy_int, float %w_out2)

ST_40: z_out_int [7/10] 7.58ns
_ifconv2:80  %z_out_int = call fastcc float @dut_vm2x1_base(float %ux_new, float %z_out1, float %uz_new, float %z_out2)


 <State 41>: 7.58ns
ST_41: w_out_int [6/10] 7.58ns
_ifconv2:77  %w_out_int = call fastcc float @dut_vm2x1_base(float %uz_new, float %w_out1, float %uy_int, float %w_out2)

ST_41: z_out_int [6/10] 7.58ns
_ifconv2:80  %z_out_int = call fastcc float @dut_vm2x1_base(float %ux_new, float %z_out1, float %uz_new, float %z_out2)


 <State 42>: 7.58ns
ST_42: w_out_int [5/10] 7.58ns
_ifconv2:77  %w_out_int = call fastcc float @dut_vm2x1_base(float %uz_new, float %w_out1, float %uy_int, float %w_out2)

ST_42: z_out_int [5/10] 7.58ns
_ifconv2:80  %z_out_int = call fastcc float @dut_vm2x1_base(float %ux_new, float %z_out1, float %uz_new, float %z_out2)


 <State 43>: 7.58ns
ST_43: w_out_int [4/10] 7.58ns
_ifconv2:77  %w_out_int = call fastcc float @dut_vm2x1_base(float %uz_new, float %w_out1, float %uy_int, float %w_out2)

ST_43: z_out_int [4/10] 7.58ns
_ifconv2:80  %z_out_int = call fastcc float @dut_vm2x1_base(float %ux_new, float %z_out1, float %uz_new, float %z_out2)


 <State 44>: 7.58ns
ST_44: w_out_int [3/10] 7.58ns
_ifconv2:77  %w_out_int = call fastcc float @dut_vm2x1_base(float %uz_new, float %w_out1, float %uy_int, float %w_out2)

ST_44: z_out_int [3/10] 7.58ns
_ifconv2:80  %z_out_int = call fastcc float @dut_vm2x1_base(float %ux_new, float %z_out1, float %uz_new, float %z_out2)


 <State 45>: 7.58ns
ST_45: w_out_int [2/10] 7.58ns
_ifconv2:77  %w_out_int = call fastcc float @dut_vm2x1_base(float %uz_new, float %w_out1, float %uy_int, float %w_out2)

ST_45: z_out_int [2/10] 7.58ns
_ifconv2:80  %z_out_int = call fastcc float @dut_vm2x1_base(float %ux_new, float %z_out1, float %uz_new, float %z_out2)


 <State 46>: 7.26ns
ST_46: w_out_int [1/10] 7.26ns
_ifconv2:77  %w_out_int = call fastcc float @dut_vm2x1_base(float %uz_new, float %w_out1, float %uy_int, float %w_out2)

ST_46: z_out_int [1/10] 7.26ns
_ifconv2:80  %z_out_int = call fastcc float @dut_vm2x1_base(float %ux_new, float %z_out1, float %uz_new, float %z_out2)


 <State 47>: 3.98ns
ST_47: p_Val2_s [1/1] 0.00ns
_ifconv2:81  %p_Val2_s = bitcast float %w_out_int to i32

ST_47: p_Result_s [1/1] 0.00ns
_ifconv2:82  %p_Result_s = call i1 @_ssdm_op_BitSelect.i1.i32.i32(i32 %p_Val2_s, i32 31)

ST_47: w_out_1_neg [1/1] 0.00ns (grouped into LUT with out node w_out_2)
_ifconv2:83  %w_out_1_neg = xor i32 %p_Val2_s, -2147483648

ST_47: w_out [1/1] 0.00ns (grouped into LUT with out node w_out_2)
_ifconv2:84  %w_out = bitcast i32 %w_out_1_neg to float

ST_47: w_out_2 [1/1] 1.37ns (out node of the LUT)
_ifconv2:88  %w_out_2 = select i1 %p_Result_s, float %w_out, float %w_out_int

ST_47: p_Val2_1 [1/1] 0.00ns
_ifconv2:91  %p_Val2_1 = bitcast float %z_out_int to i32

ST_47: p_Result_1 [1/1] 0.00ns
_ifconv2:92  %p_Result_1 = call i1 @_ssdm_op_BitSelect.i1.i32.i32(i32 %p_Val2_1, i32 31)

ST_47: z_out_1_neg [1/1] 0.00ns (grouped into LUT with out node z_out_2)
_ifconv2:93  %z_out_1_neg = xor i32 %p_Val2_1, -2147483648

ST_47: z_out [1/1] 0.00ns (grouped into LUT with out node z_out_2)
_ifconv2:94  %z_out = bitcast i32 %z_out_1_neg to float

ST_47: z_out_2 [1/1] 1.37ns (out node of the LUT)
_ifconv2:95  %z_out_2 = select i1 %p_Result_1, float %z_out, float %z_out_int

ST_47: stg_416 [2/2] 2.61ns
_ifconv2:98  store float %w_out_2, float* %s_in_addr, align 4

ST_47: stg_417 [2/2] 2.61ns
_ifconv2:101  store float %z_out_2, float* %s_in_addr_3, align 4


 <State 48>: 2.74ns
ST_48: empty [1/1] 0.00ns
_ifconv2:1  %empty = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 0, i64 783, i64 0)

ST_48: stg_419 [1/1] 0.00ns
_ifconv2:2  call void (...)* @_ssdm_op_SpecLoopName([9 x i8]* @p_str1812) nounwind

ST_48: tmp_6 [1/1] 0.00ns
_ifconv2:3  %tmp_6 = call i32 (...)* @_ssdm_op_SpecRegionBegin([9 x i8]* @p_str1812)

ST_48: S_addr_1 [1/1] 0.00ns
_ifconv2:13  %S_addr_1 = getelementptr [614656 x float]* %S, i64 0, i64 %tmp_29_cast

ST_48: S_addr_2 [1/1] 0.00ns
_ifconv2:16  %S_addr_2 = getelementptr [614656 x float]* %S, i64 0, i64 %tmp_32_cast

ST_48: S_addr_3 [1/1] 0.00ns
_ifconv2:17  %S_addr_3 = getelementptr [614656 x float]* %S, i64 0, i64 %tmp_28_cast

ST_48: U_addr_1 [1/1] 0.00ns
_ifconv2:18  %U_addr_1 = getelementptr [614656 x float]* %U, i64 0, i64 %tmp_29_cast

ST_48: U_addr_2 [1/1] 0.00ns
_ifconv2:19  %U_addr_2 = getelementptr [614656 x float]* %U, i64 0, i64 %tmp_32_cast

ST_48: U_addr_3 [1/1] 0.00ns
_ifconv2:20  %U_addr_3 = getelementptr [614656 x float]* %U, i64 0, i64 %tmp_28_cast

ST_48: V_addr_1 [1/1] 0.00ns
_ifconv2:21  %V_addr_1 = getelementptr [614656 x float]* %V, i64 0, i64 %tmp_29_cast

ST_48: V_addr_2 [1/1] 0.00ns
_ifconv2:22  %V_addr_2 = getelementptr [614656 x float]* %V, i64 0, i64 %tmp_32_cast

ST_48: V_addr_3 [1/1] 0.00ns
_ifconv2:23  %V_addr_3 = getelementptr [614656 x float]* %V, i64 0, i64 %tmp_28_cast

ST_48: v_in_addr_1 [1/1] 0.00ns
_ifconv2:24  %v_in_addr_1 = getelementptr [614656 x float]* %v_in, i64 0, i64 %tmp_29_cast

ST_48: v_in_addr_2 [1/1] 0.00ns
_ifconv2:25  %v_in_addr_2 = getelementptr [614656 x float]* %v_in, i64 0, i64 %tmp_32_cast

ST_48: v_in_addr_3 [1/1] 0.00ns
_ifconv2:26  %v_in_addr_3 = getelementptr [614656 x float]* %v_in, i64 0, i64 %tmp_28_cast

ST_48: u_in_addr_1 [1/1] 0.00ns
_ifconv2:27  %u_in_addr_1 = getelementptr [614656 x float]* %u_in, i64 0, i64 %tmp_29_cast

ST_48: u_in_addr_2 [1/1] 0.00ns
_ifconv2:28  %u_in_addr_2 = getelementptr [614656 x float]* %u_in, i64 0, i64 %tmp_32_cast

ST_48: u_in_addr_3 [1/1] 0.00ns
_ifconv2:29  %u_in_addr_3 = getelementptr [614656 x float]* %u_in, i64 0, i64 %tmp_28_cast

ST_48: vw_int_to_int [1/1] 0.00ns
_ifconv2:85  %vw_int_to_int = bitcast float %vz_int_1 to i32

ST_48: vw_int_neg [1/1] 1.37ns
_ifconv2:86  %vw_int_neg = xor i32 %vw_int_to_int, -2147483648

ST_48: vw_int [1/1] 0.00ns
_ifconv2:87  %vw_int = bitcast i32 %vw_int_neg to float

ST_48: vw_int_3 [1/1] 1.37ns
_ifconv2:89  %vw_int_3 = select i1 %p_Result_s, float %vw_int, float %vz_int_1

ST_48: vx_int [1/1] 1.37ns
_ifconv2:90  %vx_int = select i1 %p_Result_s, float %vy_int_1, float %vy_int

ST_48: vy_int_2 [1/1] 1.37ns
_ifconv2:96  %vy_int_2 = select i1 %p_Result_1, float %vy_int, float %vy_int_1

ST_48: vz_int [1/1] 1.37ns
_ifconv2:97  %vz_int = select i1 %p_Result_1, float %vw_int, float %vz_int_1

ST_48: stg_443 [1/2] 2.61ns
_ifconv2:98  store float %w_out_2, float* %s_in_addr, align 4

ST_48: stg_444 [1/2] 2.61ns
_ifconv2:101  store float %z_out_2, float* %s_in_addr_3, align 4

ST_48: stg_445 [1/1] 0.00ns
_ifconv2:102  br i1 %tmp_mid2, label %3, label %._crit_edge_ifconv

ST_48: stg_446 [2/2] 2.61ns
:0  store float %w_out_2, float* %S_addr, align 4

ST_48: stg_447 [2/2] 2.61ns
:1  store float 0.000000e+00, float* %S_addr_1, align 4


 <State 49>: 2.61ns
ST_49: stg_448 [1/2] 2.61ns
:0  store float %w_out_2, float* %S_addr, align 4

ST_49: stg_449 [1/2] 2.61ns
:1  store float 0.000000e+00, float* %S_addr_1, align 4

ST_49: stg_450 [2/2] 2.61ns
:2  store float 0.000000e+00, float* %S_addr_2, align 4

ST_49: stg_451 [2/2] 2.61ns
:3  store float %z_out_2, float* %S_addr_3, align 4


 <State 50>: 2.61ns
ST_50: stg_452 [1/2] 2.61ns
:2  store float 0.000000e+00, float* %S_addr_2, align 4

ST_50: stg_453 [1/2] 2.61ns
:3  store float %z_out_2, float* %S_addr_3, align 4

ST_50: stg_454 [1/1] 0.00ns
:4  br label %._crit_edge_ifconv

ST_50: uw_in [4/4] 2.61ns
._crit_edge_ifconv:0  %uw_in = load float* %u_in_addr, align 4

ST_50: ux_in [4/4] 2.61ns
._crit_edge_ifconv:1  %ux_in = load float* %u_in_addr_1, align 4

ST_50: vw_in [4/4] 2.61ns
._crit_edge_ifconv:4  %vw_in = load float* %v_in_addr, align 4

ST_50: vx_in [4/4] 2.61ns
._crit_edge_ifconv:5  %vx_in = load float* %v_in_addr_1, align 4

ST_50: tmp_28 [1/1] 0.00ns (grouped into LUT with out node tmp_16)
._crit_edge_ifconv:8  %tmp_28 = trunc i32 %bottom_right_0_in to i10

ST_50: tmp_13 [1/1] 0.00ns (grouped into LUT with out node tmp_16)
._crit_edge_ifconv:9  %tmp_13 = or i10 %tmp_28, %tmp_8

ST_50: tmp_14 [1/1] 0.00ns (grouped into LUT with out node tmp_16)
._crit_edge_ifconv:10  %tmp_14 = call i22 @_ssdm_op_PartSelect.i22.i32.i32.i32(i32 %bottom_right_0_in, i32 10, i32 31)

ST_50: tmp_15 [1/1] 0.00ns (grouped into LUT with out node tmp_16)
._crit_edge_ifconv:11  %tmp_15 = call i32 @_ssdm_op_BitConcatenate.i32.i22.i10(i22 %tmp_14, i10 %tmp_13)

ST_50: tmp_16 [1/1] 2.52ns (out node of the LUT)
._crit_edge_ifconv:12  %tmp_16 = icmp eq i32 %tmp_15, 0


 <State 51>: 2.61ns
ST_51: uw_in [3/4] 2.61ns
._crit_edge_ifconv:0  %uw_in = load float* %u_in_addr, align 4

ST_51: ux_in [3/4] 2.61ns
._crit_edge_ifconv:1  %ux_in = load float* %u_in_addr_1, align 4

ST_51: uy_in [4/4] 2.61ns
._crit_edge_ifconv:2  %uy_in = load float* %u_in_addr_2, align 4

ST_51: uz_in [4/4] 2.61ns
._crit_edge_ifconv:3  %uz_in = load float* %u_in_addr_3, align 4

ST_51: vw_in [3/4] 2.61ns
._crit_edge_ifconv:4  %vw_in = load float* %v_in_addr, align 4

ST_51: vx_in [3/4] 2.61ns
._crit_edge_ifconv:5  %vx_in = load float* %v_in_addr_1, align 4

ST_51: vy_in [4/4] 2.61ns
._crit_edge_ifconv:6  %vy_in = load float* %v_in_addr_2, align 4

ST_51: vz_in [4/4] 2.61ns
._crit_edge_ifconv:7  %vz_in = load float* %v_in_addr_3, align 4


 <State 52>: 2.61ns
ST_52: uw_in [2/4] 2.61ns
._crit_edge_ifconv:0  %uw_in = load float* %u_in_addr, align 4

ST_52: ux_in [2/4] 2.61ns
._crit_edge_ifconv:1  %ux_in = load float* %u_in_addr_1, align 4

ST_52: uy_in [3/4] 2.61ns
._crit_edge_ifconv:2  %uy_in = load float* %u_in_addr_2, align 4

ST_52: uz_in [3/4] 2.61ns
._crit_edge_ifconv:3  %uz_in = load float* %u_in_addr_3, align 4

ST_52: vw_in [2/4] 2.61ns
._crit_edge_ifconv:4  %vw_in = load float* %v_in_addr, align 4

ST_52: vx_in [2/4] 2.61ns
._crit_edge_ifconv:5  %vx_in = load float* %v_in_addr_1, align 4

ST_52: vy_in [3/4] 2.61ns
._crit_edge_ifconv:6  %vy_in = load float* %v_in_addr_2, align 4

ST_52: vz_in [3/4] 2.61ns
._crit_edge_ifconv:7  %vz_in = load float* %v_in_addr_3, align 4


 <State 53>: 5.85ns
ST_53: uw_in [1/4] 2.61ns
._crit_edge_ifconv:0  %uw_in = load float* %u_in_addr, align 4

ST_53: ux_in [1/4] 2.61ns
._crit_edge_ifconv:1  %ux_in = load float* %u_in_addr_1, align 4

ST_53: uy_in [2/4] 2.61ns
._crit_edge_ifconv:2  %uy_in = load float* %u_in_addr_2, align 4

ST_53: uz_in [2/4] 2.61ns
._crit_edge_ifconv:3  %uz_in = load float* %u_in_addr_3, align 4

ST_53: vw_in [1/4] 2.61ns
._crit_edge_ifconv:4  %vw_in = load float* %v_in_addr, align 4

ST_53: vx_in [1/4] 2.61ns
._crit_edge_ifconv:5  %vx_in = load float* %v_in_addr_1, align 4

ST_53: vy_in [2/4] 2.61ns
._crit_edge_ifconv:6  %vy_in = load float* %v_in_addr_2, align 4

ST_53: vz_in [2/4] 2.61ns
._crit_edge_ifconv:7  %vz_in = load float* %v_in_addr_3, align 4

ST_53: tmp_17 [1/1] 1.37ns
._crit_edge_ifconv:13  %tmp_17 = or i1 %tmp_16, %tmp_9

ST_53: a2_assign_9 [1/1] 1.37ns
._crit_edge_ifconv:16  %a2_assign_9 = select i1 %tmp_17, float 0.000000e+00, float %vx_in

ST_53: vw_in_1 [1/1] 1.37ns
._crit_edge_ifconv:17  %vw_in_1 = select i1 %tmp_16, float 1.000000e+00, float %vw_in

ST_53: a2_assign_7 [1/1] 1.37ns
._crit_edge_ifconv:20  %a2_assign_7 = select i1 %tmp_17, float 0.000000e+00, float %ux_in

ST_53: uw_in_1 [1/1] 1.37ns
._crit_edge_ifconv:21  %uw_in_1 = select i1 %tmp_16, float 1.000000e+00, float %uw_in

ST_53: uw_out [10/10] 1.87ns
._crit_edge_ifconv:22  %uw_out = call fastcc float @dut_vm2x1_base(float %uw_in_1, float %uz_new, float %a2_assign_7, float %uy_int)

ST_53: ux_out [10/10] 1.87ns
._crit_edge_ifconv:23  %ux_out = call fastcc float @dut_vm2x1_base(float %uw_in_1, float %ux_new, float %a2_assign_7, float %uz_new)

ST_53: vw_out [10/10] 1.87ns
._crit_edge_ifconv:26  %vw_out = call fastcc float @dut_vm2x1_base(float %vw_in_1, float %vw_int_3, float %a2_assign_9, float %vx_int)

ST_53: vx_out [10/10] 1.87ns
._crit_edge_ifconv:27  %vx_out = call fastcc float @dut_vm2x1_base(float %vw_in_1, float %vy_int_2, float %a2_assign_9, float %vz_int)


 <State 54>: 7.58ns
ST_54: uy_in [1/4] 2.61ns
._crit_edge_ifconv:2  %uy_in = load float* %u_in_addr_2, align 4

ST_54: uz_in [1/4] 2.61ns
._crit_edge_ifconv:3  %uz_in = load float* %u_in_addr_3, align 4

ST_54: vy_in [1/4] 2.61ns
._crit_edge_ifconv:6  %vy_in = load float* %v_in_addr_2, align 4

ST_54: vz_in [1/4] 2.61ns
._crit_edge_ifconv:7  %vz_in = load float* %v_in_addr_3, align 4

ST_54: a4_assign_1 [1/1] 1.37ns
._crit_edge_ifconv:14  %a4_assign_1 = select i1 %tmp_17, float 1.000000e+00, float %vz_in

ST_54: a3_assign_1 [1/1] 1.37ns
._crit_edge_ifconv:15  %a3_assign_1 = select i1 %tmp_17, float 0.000000e+00, float %vy_in

ST_54: a4_assign [1/1] 1.37ns
._crit_edge_ifconv:18  %a4_assign = select i1 %tmp_17, float 1.000000e+00, float %uz_in

ST_54: a3_assign [1/1] 1.37ns
._crit_edge_ifconv:19  %a3_assign = select i1 %tmp_17, float 0.000000e+00, float %uy_in

ST_54: uw_out [9/10] 7.58ns
._crit_edge_ifconv:22  %uw_out = call fastcc float @dut_vm2x1_base(float %uw_in_1, float %uz_new, float %a2_assign_7, float %uy_int)

ST_54: ux_out [9/10] 7.58ns
._crit_edge_ifconv:23  %ux_out = call fastcc float @dut_vm2x1_base(float %uw_in_1, float %ux_new, float %a2_assign_7, float %uz_new)

ST_54: uy_out [10/10] 1.87ns
._crit_edge_ifconv:24  %uy_out = call fastcc float @dut_vm2x1_base(float %a3_assign, float %uz_new, float %a4_assign, float %uy_int)

ST_54: uz_out [10/10] 1.87ns
._crit_edge_ifconv:25  %uz_out = call fastcc float @dut_vm2x1_base(float %a3_assign, float %ux_new, float %a4_assign, float %uz_new)

ST_54: vw_out [9/10] 7.58ns
._crit_edge_ifconv:26  %vw_out = call fastcc float @dut_vm2x1_base(float %vw_in_1, float %vw_int_3, float %a2_assign_9, float %vx_int)

ST_54: vx_out [9/10] 7.58ns
._crit_edge_ifconv:27  %vx_out = call fastcc float @dut_vm2x1_base(float %vw_in_1, float %vy_int_2, float %a2_assign_9, float %vz_int)

ST_54: vy_out [10/10] 1.87ns
._crit_edge_ifconv:28  %vy_out = call fastcc float @dut_vm2x1_base(float %a3_assign_1, float %vw_int_3, float %a4_assign_1, float %vx_int)

ST_54: vz_out [10/10] 1.87ns
._crit_edge_ifconv:29  %vz_out = call fastcc float @dut_vm2x1_base(float %a3_assign_1, float %vy_int_2, float %a4_assign_1, float %vz_int)


 <State 55>: 7.58ns
ST_55: uw_out [8/10] 7.58ns
._crit_edge_ifconv:22  %uw_out = call fastcc float @dut_vm2x1_base(float %uw_in_1, float %uz_new, float %a2_assign_7, float %uy_int)

ST_55: ux_out [8/10] 7.58ns
._crit_edge_ifconv:23  %ux_out = call fastcc float @dut_vm2x1_base(float %uw_in_1, float %ux_new, float %a2_assign_7, float %uz_new)

ST_55: uy_out [9/10] 7.58ns
._crit_edge_ifconv:24  %uy_out = call fastcc float @dut_vm2x1_base(float %a3_assign, float %uz_new, float %a4_assign, float %uy_int)

ST_55: uz_out [9/10] 7.58ns
._crit_edge_ifconv:25  %uz_out = call fastcc float @dut_vm2x1_base(float %a3_assign, float %ux_new, float %a4_assign, float %uz_new)

ST_55: vw_out [8/10] 7.58ns
._crit_edge_ifconv:26  %vw_out = call fastcc float @dut_vm2x1_base(float %vw_in_1, float %vw_int_3, float %a2_assign_9, float %vx_int)

ST_55: vx_out [8/10] 7.58ns
._crit_edge_ifconv:27  %vx_out = call fastcc float @dut_vm2x1_base(float %vw_in_1, float %vy_int_2, float %a2_assign_9, float %vz_int)

ST_55: vy_out [9/10] 7.58ns
._crit_edge_ifconv:28  %vy_out = call fastcc float @dut_vm2x1_base(float %a3_assign_1, float %vw_int_3, float %a4_assign_1, float %vx_int)

ST_55: vz_out [9/10] 7.58ns
._crit_edge_ifconv:29  %vz_out = call fastcc float @dut_vm2x1_base(float %a3_assign_1, float %vy_int_2, float %a4_assign_1, float %vz_int)


 <State 56>: 7.58ns
ST_56: uw_out [7/10] 7.58ns
._crit_edge_ifconv:22  %uw_out = call fastcc float @dut_vm2x1_base(float %uw_in_1, float %uz_new, float %a2_assign_7, float %uy_int)

ST_56: ux_out [7/10] 7.58ns
._crit_edge_ifconv:23  %ux_out = call fastcc float @dut_vm2x1_base(float %uw_in_1, float %ux_new, float %a2_assign_7, float %uz_new)

ST_56: uy_out [8/10] 7.58ns
._crit_edge_ifconv:24  %uy_out = call fastcc float @dut_vm2x1_base(float %a3_assign, float %uz_new, float %a4_assign, float %uy_int)

ST_56: uz_out [8/10] 7.58ns
._crit_edge_ifconv:25  %uz_out = call fastcc float @dut_vm2x1_base(float %a3_assign, float %ux_new, float %a4_assign, float %uz_new)

ST_56: vw_out [7/10] 7.58ns
._crit_edge_ifconv:26  %vw_out = call fastcc float @dut_vm2x1_base(float %vw_in_1, float %vw_int_3, float %a2_assign_9, float %vx_int)

ST_56: vx_out [7/10] 7.58ns
._crit_edge_ifconv:27  %vx_out = call fastcc float @dut_vm2x1_base(float %vw_in_1, float %vy_int_2, float %a2_assign_9, float %vz_int)

ST_56: vy_out [8/10] 7.58ns
._crit_edge_ifconv:28  %vy_out = call fastcc float @dut_vm2x1_base(float %a3_assign_1, float %vw_int_3, float %a4_assign_1, float %vx_int)

ST_56: vz_out [8/10] 7.58ns
._crit_edge_ifconv:29  %vz_out = call fastcc float @dut_vm2x1_base(float %a3_assign_1, float %vy_int_2, float %a4_assign_1, float %vz_int)


 <State 57>: 7.58ns
ST_57: uw_out [6/10] 7.58ns
._crit_edge_ifconv:22  %uw_out = call fastcc float @dut_vm2x1_base(float %uw_in_1, float %uz_new, float %a2_assign_7, float %uy_int)

ST_57: ux_out [6/10] 7.58ns
._crit_edge_ifconv:23  %ux_out = call fastcc float @dut_vm2x1_base(float %uw_in_1, float %ux_new, float %a2_assign_7, float %uz_new)

ST_57: uy_out [7/10] 7.58ns
._crit_edge_ifconv:24  %uy_out = call fastcc float @dut_vm2x1_base(float %a3_assign, float %uz_new, float %a4_assign, float %uy_int)

ST_57: uz_out [7/10] 7.58ns
._crit_edge_ifconv:25  %uz_out = call fastcc float @dut_vm2x1_base(float %a3_assign, float %ux_new, float %a4_assign, float %uz_new)

ST_57: vw_out [6/10] 7.58ns
._crit_edge_ifconv:26  %vw_out = call fastcc float @dut_vm2x1_base(float %vw_in_1, float %vw_int_3, float %a2_assign_9, float %vx_int)

ST_57: vx_out [6/10] 7.58ns
._crit_edge_ifconv:27  %vx_out = call fastcc float @dut_vm2x1_base(float %vw_in_1, float %vy_int_2, float %a2_assign_9, float %vz_int)

ST_57: vy_out [7/10] 7.58ns
._crit_edge_ifconv:28  %vy_out = call fastcc float @dut_vm2x1_base(float %a3_assign_1, float %vw_int_3, float %a4_assign_1, float %vx_int)

ST_57: vz_out [7/10] 7.58ns
._crit_edge_ifconv:29  %vz_out = call fastcc float @dut_vm2x1_base(float %a3_assign_1, float %vy_int_2, float %a4_assign_1, float %vz_int)


 <State 58>: 7.58ns
ST_58: uw_out [5/10] 7.58ns
._crit_edge_ifconv:22  %uw_out = call fastcc float @dut_vm2x1_base(float %uw_in_1, float %uz_new, float %a2_assign_7, float %uy_int)

ST_58: ux_out [5/10] 7.58ns
._crit_edge_ifconv:23  %ux_out = call fastcc float @dut_vm2x1_base(float %uw_in_1, float %ux_new, float %a2_assign_7, float %uz_new)

ST_58: uy_out [6/10] 7.58ns
._crit_edge_ifconv:24  %uy_out = call fastcc float @dut_vm2x1_base(float %a3_assign, float %uz_new, float %a4_assign, float %uy_int)

ST_58: uz_out [6/10] 7.58ns
._crit_edge_ifconv:25  %uz_out = call fastcc float @dut_vm2x1_base(float %a3_assign, float %ux_new, float %a4_assign, float %uz_new)

ST_58: vw_out [5/10] 7.58ns
._crit_edge_ifconv:26  %vw_out = call fastcc float @dut_vm2x1_base(float %vw_in_1, float %vw_int_3, float %a2_assign_9, float %vx_int)

ST_58: vx_out [5/10] 7.58ns
._crit_edge_ifconv:27  %vx_out = call fastcc float @dut_vm2x1_base(float %vw_in_1, float %vy_int_2, float %a2_assign_9, float %vz_int)

ST_58: vy_out [6/10] 7.58ns
._crit_edge_ifconv:28  %vy_out = call fastcc float @dut_vm2x1_base(float %a3_assign_1, float %vw_int_3, float %a4_assign_1, float %vx_int)

ST_58: vz_out [6/10] 7.58ns
._crit_edge_ifconv:29  %vz_out = call fastcc float @dut_vm2x1_base(float %a3_assign_1, float %vy_int_2, float %a4_assign_1, float %vz_int)


 <State 59>: 7.58ns
ST_59: uw_out [4/10] 7.58ns
._crit_edge_ifconv:22  %uw_out = call fastcc float @dut_vm2x1_base(float %uw_in_1, float %uz_new, float %a2_assign_7, float %uy_int)

ST_59: ux_out [4/10] 7.58ns
._crit_edge_ifconv:23  %ux_out = call fastcc float @dut_vm2x1_base(float %uw_in_1, float %ux_new, float %a2_assign_7, float %uz_new)

ST_59: uy_out [5/10] 7.58ns
._crit_edge_ifconv:24  %uy_out = call fastcc float @dut_vm2x1_base(float %a3_assign, float %uz_new, float %a4_assign, float %uy_int)

ST_59: uz_out [5/10] 7.58ns
._crit_edge_ifconv:25  %uz_out = call fastcc float @dut_vm2x1_base(float %a3_assign, float %ux_new, float %a4_assign, float %uz_new)

ST_59: vw_out [4/10] 7.58ns
._crit_edge_ifconv:26  %vw_out = call fastcc float @dut_vm2x1_base(float %vw_in_1, float %vw_int_3, float %a2_assign_9, float %vx_int)

ST_59: vx_out [4/10] 7.58ns
._crit_edge_ifconv:27  %vx_out = call fastcc float @dut_vm2x1_base(float %vw_in_1, float %vy_int_2, float %a2_assign_9, float %vz_int)

ST_59: vy_out [5/10] 7.58ns
._crit_edge_ifconv:28  %vy_out = call fastcc float @dut_vm2x1_base(float %a3_assign_1, float %vw_int_3, float %a4_assign_1, float %vx_int)

ST_59: vz_out [5/10] 7.58ns
._crit_edge_ifconv:29  %vz_out = call fastcc float @dut_vm2x1_base(float %a3_assign_1, float %vy_int_2, float %a4_assign_1, float %vz_int)


 <State 60>: 7.58ns
ST_60: uw_out [3/10] 7.58ns
._crit_edge_ifconv:22  %uw_out = call fastcc float @dut_vm2x1_base(float %uw_in_1, float %uz_new, float %a2_assign_7, float %uy_int)

ST_60: ux_out [3/10] 7.58ns
._crit_edge_ifconv:23  %ux_out = call fastcc float @dut_vm2x1_base(float %uw_in_1, float %ux_new, float %a2_assign_7, float %uz_new)

ST_60: uy_out [4/10] 7.58ns
._crit_edge_ifconv:24  %uy_out = call fastcc float @dut_vm2x1_base(float %a3_assign, float %uz_new, float %a4_assign, float %uy_int)

ST_60: uz_out [4/10] 7.58ns
._crit_edge_ifconv:25  %uz_out = call fastcc float @dut_vm2x1_base(float %a3_assign, float %ux_new, float %a4_assign, float %uz_new)

ST_60: vw_out [3/10] 7.58ns
._crit_edge_ifconv:26  %vw_out = call fastcc float @dut_vm2x1_base(float %vw_in_1, float %vw_int_3, float %a2_assign_9, float %vx_int)

ST_60: vx_out [3/10] 7.58ns
._crit_edge_ifconv:27  %vx_out = call fastcc float @dut_vm2x1_base(float %vw_in_1, float %vy_int_2, float %a2_assign_9, float %vz_int)

ST_60: vy_out [4/10] 7.58ns
._crit_edge_ifconv:28  %vy_out = call fastcc float @dut_vm2x1_base(float %a3_assign_1, float %vw_int_3, float %a4_assign_1, float %vx_int)

ST_60: vz_out [4/10] 7.58ns
._crit_edge_ifconv:29  %vz_out = call fastcc float @dut_vm2x1_base(float %a3_assign_1, float %vy_int_2, float %a4_assign_1, float %vz_int)


 <State 61>: 7.58ns
ST_61: uw_out [2/10] 7.58ns
._crit_edge_ifconv:22  %uw_out = call fastcc float @dut_vm2x1_base(float %uw_in_1, float %uz_new, float %a2_assign_7, float %uy_int)

ST_61: ux_out [2/10] 7.58ns
._crit_edge_ifconv:23  %ux_out = call fastcc float @dut_vm2x1_base(float %uw_in_1, float %ux_new, float %a2_assign_7, float %uz_new)

ST_61: uy_out [3/10] 7.58ns
._crit_edge_ifconv:24  %uy_out = call fastcc float @dut_vm2x1_base(float %a3_assign, float %uz_new, float %a4_assign, float %uy_int)

ST_61: uz_out [3/10] 7.58ns
._crit_edge_ifconv:25  %uz_out = call fastcc float @dut_vm2x1_base(float %a3_assign, float %ux_new, float %a4_assign, float %uz_new)

ST_61: vw_out [2/10] 7.58ns
._crit_edge_ifconv:26  %vw_out = call fastcc float @dut_vm2x1_base(float %vw_in_1, float %vw_int_3, float %a2_assign_9, float %vx_int)

ST_61: vx_out [2/10] 7.58ns
._crit_edge_ifconv:27  %vx_out = call fastcc float @dut_vm2x1_base(float %vw_in_1, float %vy_int_2, float %a2_assign_9, float %vz_int)

ST_61: vy_out [3/10] 7.58ns
._crit_edge_ifconv:28  %vy_out = call fastcc float @dut_vm2x1_base(float %a3_assign_1, float %vw_int_3, float %a4_assign_1, float %vx_int)

ST_61: vz_out [3/10] 7.58ns
._crit_edge_ifconv:29  %vz_out = call fastcc float @dut_vm2x1_base(float %a3_assign_1, float %vy_int_2, float %a4_assign_1, float %vz_int)


 <State 62>: 7.58ns
ST_62: uw_out [1/10] 7.26ns
._crit_edge_ifconv:22  %uw_out = call fastcc float @dut_vm2x1_base(float %uw_in_1, float %uz_new, float %a2_assign_7, float %uy_int)

ST_62: ux_out [1/10] 7.26ns
._crit_edge_ifconv:23  %ux_out = call fastcc float @dut_vm2x1_base(float %uw_in_1, float %ux_new, float %a2_assign_7, float %uz_new)

ST_62: uy_out [2/10] 7.58ns
._crit_edge_ifconv:24  %uy_out = call fastcc float @dut_vm2x1_base(float %a3_assign, float %uz_new, float %a4_assign, float %uy_int)

ST_62: uz_out [2/10] 7.58ns
._crit_edge_ifconv:25  %uz_out = call fastcc float @dut_vm2x1_base(float %a3_assign, float %ux_new, float %a4_assign, float %uz_new)

ST_62: vw_out [1/10] 7.26ns
._crit_edge_ifconv:26  %vw_out = call fastcc float @dut_vm2x1_base(float %vw_in_1, float %vw_int_3, float %a2_assign_9, float %vx_int)

ST_62: vx_out [1/10] 7.26ns
._crit_edge_ifconv:27  %vx_out = call fastcc float @dut_vm2x1_base(float %vw_in_1, float %vy_int_2, float %a2_assign_9, float %vz_int)

ST_62: vy_out [2/10] 7.58ns
._crit_edge_ifconv:28  %vy_out = call fastcc float @dut_vm2x1_base(float %a3_assign_1, float %vw_int_3, float %a4_assign_1, float %vx_int)

ST_62: vz_out [2/10] 7.58ns
._crit_edge_ifconv:29  %vz_out = call fastcc float @dut_vm2x1_base(float %a3_assign_1, float %vy_int_2, float %a4_assign_1, float %vz_int)


 <State 63>: 7.26ns
ST_63: uy_out [1/10] 7.26ns
._crit_edge_ifconv:24  %uy_out = call fastcc float @dut_vm2x1_base(float %a3_assign, float %uz_new, float %a4_assign, float %uy_int)

ST_63: uz_out [1/10] 7.26ns
._crit_edge_ifconv:25  %uz_out = call fastcc float @dut_vm2x1_base(float %a3_assign, float %ux_new, float %a4_assign, float %uz_new)

ST_63: vy_out [1/10] 7.26ns
._crit_edge_ifconv:28  %vy_out = call fastcc float @dut_vm2x1_base(float %a3_assign_1, float %vw_int_3, float %a4_assign_1, float %vx_int)

ST_63: vz_out [1/10] 7.26ns
._crit_edge_ifconv:29  %vz_out = call fastcc float @dut_vm2x1_base(float %a3_assign_1, float %vy_int_2, float %a4_assign_1, float %vz_int)

ST_63: stg_581 [2/2] 2.61ns
._crit_edge_ifconv:30  store float %uw_out, float* %u_in_addr, align 4

ST_63: stg_582 [2/2] 2.61ns
._crit_edge_ifconv:31  store float %ux_out, float* %u_in_addr_1, align 4

ST_63: stg_583 [2/2] 2.61ns
._crit_edge_ifconv:34  store float %vw_out, float* %v_in_addr, align 4

ST_63: stg_584 [2/2] 2.61ns
._crit_edge_ifconv:35  store float %vx_out, float* %v_in_addr_1, align 4


 <State 64>: 2.61ns
ST_64: stg_585 [1/2] 2.61ns
._crit_edge_ifconv:30  store float %uw_out, float* %u_in_addr, align 4

ST_64: stg_586 [1/2] 2.61ns
._crit_edge_ifconv:31  store float %ux_out, float* %u_in_addr_1, align 4

ST_64: stg_587 [2/2] 2.61ns
._crit_edge_ifconv:32  store float %uy_out, float* %u_in_addr_2, align 4

ST_64: stg_588 [2/2] 2.61ns
._crit_edge_ifconv:33  store float %uz_out, float* %u_in_addr_3, align 4

ST_64: stg_589 [1/2] 2.61ns
._crit_edge_ifconv:34  store float %vw_out, float* %v_in_addr, align 4

ST_64: stg_590 [1/2] 2.61ns
._crit_edge_ifconv:35  store float %vx_out, float* %v_in_addr_1, align 4

ST_64: stg_591 [2/2] 2.61ns
._crit_edge_ifconv:36  store float %vy_out, float* %v_in_addr_2, align 4

ST_64: stg_592 [2/2] 2.61ns
._crit_edge_ifconv:37  store float %vz_out, float* %v_in_addr_3, align 4


 <State 65>: 2.61ns
ST_65: stg_593 [1/2] 2.61ns
._crit_edge_ifconv:32  store float %uy_out, float* %u_in_addr_2, align 4

ST_65: stg_594 [1/2] 2.61ns
._crit_edge_ifconv:33  store float %uz_out, float* %u_in_addr_3, align 4

ST_65: stg_595 [1/2] 2.61ns
._crit_edge_ifconv:36  store float %vy_out, float* %v_in_addr_2, align 4

ST_65: stg_596 [1/2] 2.61ns
._crit_edge_ifconv:37  store float %vz_out, float* %v_in_addr_3, align 4

ST_65: stg_597 [1/1] 0.00ns
._crit_edge_ifconv:38  br i1 %tmp_mid2, label %4, label %._crit_edge18

ST_65: stg_598 [2/2] 2.61ns
:0  store float %uw_out, float* %U_addr, align 4

ST_65: stg_599 [2/2] 2.61ns
:1  store float %ux_out, float* %U_addr_1, align 4

ST_65: stg_600 [2/2] 2.61ns
:4  store float %vw_out, float* %V_addr, align 4

ST_65: stg_601 [2/2] 2.61ns
:5  store float %vx_out, float* %V_addr_1, align 4


 <State 66>: 2.61ns
ST_66: stg_602 [1/2] 2.61ns
:0  store float %uw_out, float* %U_addr, align 4

ST_66: stg_603 [1/2] 2.61ns
:1  store float %ux_out, float* %U_addr_1, align 4

ST_66: stg_604 [2/2] 2.61ns
:2  store float %uy_out, float* %U_addr_2, align 4

ST_66: stg_605 [2/2] 2.61ns
:3  store float %uz_out, float* %U_addr_3, align 4

ST_66: stg_606 [1/2] 2.61ns
:4  store float %vw_out, float* %V_addr, align 4

ST_66: stg_607 [1/2] 2.61ns
:5  store float %vx_out, float* %V_addr_1, align 4

ST_66: stg_608 [2/2] 2.61ns
:6  store float %vy_out, float* %V_addr_2, align 4

ST_66: stg_609 [2/2] 2.61ns
:7  store float %vz_out, float* %V_addr_3, align 4


 <State 67>: 2.61ns
ST_67: stg_610 [1/2] 2.61ns
:2  store float %uy_out, float* %U_addr_2, align 4

ST_67: stg_611 [1/2] 2.61ns
:3  store float %uz_out, float* %U_addr_3, align 4

ST_67: stg_612 [1/2] 2.61ns
:6  store float %vy_out, float* %V_addr_2, align 4

ST_67: stg_613 [1/2] 2.61ns
:7  store float %vz_out, float* %V_addr_3, align 4

ST_67: stg_614 [1/1] 0.00ns
:8  br label %._crit_edge18

ST_67: stg_615 [1/1] 1.57ns
._crit_edge18:0  br label %5


 <State 68>: 6.63ns
ST_68: off_col [1/1] 0.00ns
:0  %off_col = phi i10 [ 0, %._crit_edge18 ], [ %off_col_1, %._crit_edge19 ]

ST_68: exitcond1 [1/1] 2.07ns
:1  %exitcond1 = icmp eq i10 %off_col, -240

ST_68: off_col_1 [1/1] 1.84ns
:2  %off_col_1 = add i10 %off_col, 1

ST_68: stg_619 [1/1] 1.57ns
:3  br i1 %exitcond1, label %.preheader, label %6

ST_68: off_col_cast [1/1] 0.00ns
:0  %off_col_cast = zext i10 %off_col to i32

ST_68: empty_8 [1/1] 0.00ns
:1  %empty_8 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 784, i64 784, i64 784)

ST_68: stg_622 [1/1] 0.00ns
:2  call void (...)* @_ssdm_op_SpecLoopName([8 x i8]* @p_str1813) nounwind

ST_68: tmp_18 [1/1] 0.00ns
:3  %tmp_18 = call i32 (...)* @_ssdm_op_SpecRegionBegin([8 x i8]* @p_str1813)

ST_68: stg_624 [1/1] 0.00ns
:4  call void (...)* @_ssdm_op_SpecPipeline(i32 100, i32 1, i32 1, i32 0, [1 x i8]* @p_str1806) nounwind

ST_68: tmp_19 [1/1] 2.52ns
:5  %tmp_19 = icmp eq i32 %off_col_cast, %bottom_right

ST_68: tmp_20 [1/1] 2.07ns
:6  %tmp_20 = icmp eq i10 %off_col, %top_left_mid2

ST_68: or_cond6 [1/1] 1.37ns
:7  %or_cond6 = or i1 %tmp_19, %tmp_20

ST_68: stg_628 [1/1] 0.00ns
:8  br i1 %or_cond6, label %._crit_edge19, label %_ifconv

ST_68: tmp_23_cast6 [1/1] 0.00ns
_ifconv:0  %tmp_23_cast6 = zext i10 %off_col to i21

ST_68: tmp_23_cast [1/1] 0.00ns
_ifconv:1  %tmp_23_cast = zext i10 %off_col to i20

ST_68: tmp_27 [1/1] 2.08ns
_ifconv:2  %tmp_27 = add i20 %tmp_2, %tmp_23_cast

ST_68: tmp_36_cast [1/1] 0.00ns
_ifconv:3  %tmp_36_cast = zext i20 %tmp_27 to i64

ST_68: A_addr_4 [1/1] 0.00ns
_ifconv:4  %A_addr_4 = getelementptr [614656 x float]* %A, i64 0, i64 %tmp_36_cast

ST_68: tmp_29 [1/1] 2.20ns
_ifconv:5  %tmp_29 = add i21 %tmp_11, %tmp_23_cast6

ST_68: tmp_37_cast [1/1] 0.00ns
_ifconv:6  %tmp_37_cast = sext i21 %tmp_29 to i64

ST_68: A_addr_6 [1/1] 0.00ns
_ifconv:7  %A_addr_6 = getelementptr [614656 x float]* %A, i64 0, i64 %tmp_37_cast

ST_68: S_addr_4 [1/1] 0.00ns
_ifconv:8  %S_addr_4 = getelementptr [614656 x float]* %S, i64 0, i64 %tmp_36_cast

ST_68: S_addr_5 [1/1] 0.00ns
_ifconv:9  %S_addr_5 = getelementptr [614656 x float]* %S, i64 0, i64 %tmp_37_cast

ST_68: s_in_addr_4 [1/1] 0.00ns
_ifconv:10  %s_in_addr_4 = getelementptr [614656 x float]* %s_in, i64 0, i64 %tmp_36_cast

ST_68: s_in_addr_5 [1/1] 0.00ns
_ifconv:11  %s_in_addr_5 = getelementptr [614656 x float]* %s_in, i64 0, i64 %tmp_37_cast

ST_68: w_in_4 [4/4] 2.61ns
_ifconv:12  %w_in_4 = load float* %A_addr_4, align 4

ST_68: w_in_5 [4/4] 2.61ns
_ifconv:13  %w_in_5 = load float* %s_in_addr_4, align 4

ST_68: tmp_25 [1/1] 2.52ns
_ifconv:15  %tmp_25 = icmp sgt i32 %off_col_cast, %bottom_right

ST_68: y_in_4 [4/4] 2.61ns
_ifconv:17  %y_in_4 = load float* %A_addr_6, align 4

ST_68: y_in_5 [4/4] 2.61ns
_ifconv:18  %y_in_5 = load float* %s_in_addr_5, align 4


 <State 69>: 2.61ns
ST_69: w_in_4 [3/4] 2.61ns
_ifconv:12  %w_in_4 = load float* %A_addr_4, align 4

ST_69: w_in_5 [3/4] 2.61ns
_ifconv:13  %w_in_5 = load float* %s_in_addr_4, align 4

ST_69: y_in_4 [3/4] 2.61ns
_ifconv:17  %y_in_4 = load float* %A_addr_6, align 4

ST_69: y_in_5 [3/4] 2.61ns
_ifconv:18  %y_in_5 = load float* %s_in_addr_5, align 4


 <State 70>: 2.61ns
ST_70: w_in_4 [2/4] 2.61ns
_ifconv:12  %w_in_4 = load float* %A_addr_4, align 4

ST_70: w_in_5 [2/4] 2.61ns
_ifconv:13  %w_in_5 = load float* %s_in_addr_4, align 4

ST_70: y_in_4 [2/4] 2.61ns
_ifconv:17  %y_in_4 = load float* %A_addr_6, align 4

ST_70: y_in_5 [2/4] 2.61ns
_ifconv:18  %y_in_5 = load float* %s_in_addr_5, align 4


 <State 71>: 5.85ns
ST_71: w_in_4 [1/4] 2.61ns
_ifconv:12  %w_in_4 = load float* %A_addr_4, align 4

ST_71: w_in_5 [1/4] 2.61ns
_ifconv:13  %w_in_5 = load float* %s_in_addr_4, align 4

ST_71: w_in_6 [1/1] 1.37ns
_ifconv:14  %w_in_6 = select i1 %tmp_16, float %w_in_4, float %w_in_5

ST_71: or_cond1 [1/1] 0.00ns (grouped into LUT with out node y_in_6)
_ifconv:16  %or_cond1 = and i1 %tmp_9, %tmp_25

ST_71: y_in_4 [1/4] 2.61ns
_ifconv:17  %y_in_4 = load float* %A_addr_6, align 4

ST_71: y_in_5 [1/4] 2.61ns
_ifconv:18  %y_in_5 = load float* %s_in_addr_5, align 4

ST_71: y_in_6 [1/1] 1.37ns (out node of the LUT)
_ifconv:19  %y_in_6 = select i1 %or_cond1, float %y_in_4, float %y_in_5

ST_71: w_out_3 [10/10] 1.87ns
_ifconv:20  %w_out_3 = call fastcc float @dut_vm2x1_base(float %uz_new, float %w_in_6, float %uy_int, float %y_in_6)


 <State 72>: 7.58ns
ST_72: w_out_3 [9/10] 7.58ns
_ifconv:20  %w_out_3 = call fastcc float @dut_vm2x1_base(float %uz_new, float %w_in_6, float %uy_int, float %y_in_6)


 <State 73>: 7.58ns
ST_73: w_out_3 [8/10] 7.58ns
_ifconv:20  %w_out_3 = call fastcc float @dut_vm2x1_base(float %uz_new, float %w_in_6, float %uy_int, float %y_in_6)


 <State 74>: 7.58ns
ST_74: w_out_3 [7/10] 7.58ns
_ifconv:20  %w_out_3 = call fastcc float @dut_vm2x1_base(float %uz_new, float %w_in_6, float %uy_int, float %y_in_6)


 <State 75>: 7.58ns
ST_75: w_out_3 [6/10] 7.58ns
_ifconv:20  %w_out_3 = call fastcc float @dut_vm2x1_base(float %uz_new, float %w_in_6, float %uy_int, float %y_in_6)


 <State 76>: 7.58ns
ST_76: w_out_3 [5/10] 7.58ns
_ifconv:20  %w_out_3 = call fastcc float @dut_vm2x1_base(float %uz_new, float %w_in_6, float %uy_int, float %y_in_6)


 <State 77>: 7.58ns
ST_77: w_out_3 [4/10] 7.58ns
_ifconv:20  %w_out_3 = call fastcc float @dut_vm2x1_base(float %uz_new, float %w_in_6, float %uy_int, float %y_in_6)


 <State 78>: 7.58ns
ST_78: w_out_3 [3/10] 7.58ns
_ifconv:20  %w_out_3 = call fastcc float @dut_vm2x1_base(float %uz_new, float %w_in_6, float %uy_int, float %y_in_6)


 <State 79>: 7.58ns
ST_79: w_out_3 [2/10] 7.58ns
_ifconv:20  %w_out_3 = call fastcc float @dut_vm2x1_base(float %uz_new, float %w_in_6, float %uy_int, float %y_in_6)


 <State 80>: 7.26ns
ST_80: w_out_3 [1/10] 7.26ns
_ifconv:20  %w_out_3 = call fastcc float @dut_vm2x1_base(float %uz_new, float %w_in_6, float %uy_int, float %y_in_6)


 <State 81>: 2.61ns
ST_81: y_out [10/10] 1.87ns
_ifconv:21  %y_out = call fastcc float @dut_vm2x1_base(float %ux_new, float %w_in_6, float %uz_new, float %y_in_6)

ST_81: stg_672 [2/2] 2.61ns
_ifconv:22  store float %w_out_3, float* %s_in_addr_4, align 4

ST_81: stg_673 [2/2] 2.61ns
:0  store float %w_out_3, float* %S_addr_4, align 4


 <State 82>: 7.58ns
ST_82: y_out [9/10] 7.58ns
_ifconv:21  %y_out = call fastcc float @dut_vm2x1_base(float %ux_new, float %w_in_6, float %uz_new, float %y_in_6)

ST_82: stg_675 [1/2] 2.61ns
_ifconv:22  store float %w_out_3, float* %s_in_addr_4, align 4

ST_82: stg_676 [1/2] 2.61ns
:0  store float %w_out_3, float* %S_addr_4, align 4


 <State 83>: 7.58ns
ST_83: y_out [8/10] 7.58ns
_ifconv:21  %y_out = call fastcc float @dut_vm2x1_base(float %ux_new, float %w_in_6, float %uz_new, float %y_in_6)


 <State 84>: 7.58ns
ST_84: y_out [7/10] 7.58ns
_ifconv:21  %y_out = call fastcc float @dut_vm2x1_base(float %ux_new, float %w_in_6, float %uz_new, float %y_in_6)


 <State 85>: 7.58ns
ST_85: y_out [6/10] 7.58ns
_ifconv:21  %y_out = call fastcc float @dut_vm2x1_base(float %ux_new, float %w_in_6, float %uz_new, float %y_in_6)


 <State 86>: 7.58ns
ST_86: y_out [5/10] 7.58ns
_ifconv:21  %y_out = call fastcc float @dut_vm2x1_base(float %ux_new, float %w_in_6, float %uz_new, float %y_in_6)


 <State 87>: 7.58ns
ST_87: y_out [4/10] 7.58ns
_ifconv:21  %y_out = call fastcc float @dut_vm2x1_base(float %ux_new, float %w_in_6, float %uz_new, float %y_in_6)


 <State 88>: 7.58ns
ST_88: y_out [3/10] 7.58ns
_ifconv:21  %y_out = call fastcc float @dut_vm2x1_base(float %ux_new, float %w_in_6, float %uz_new, float %y_in_6)


 <State 89>: 7.58ns
ST_89: y_out [2/10] 7.58ns
_ifconv:21  %y_out = call fastcc float @dut_vm2x1_base(float %ux_new, float %w_in_6, float %uz_new, float %y_in_6)


 <State 90>: 7.26ns
ST_90: y_out [1/10] 7.26ns
_ifconv:21  %y_out = call fastcc float @dut_vm2x1_base(float %ux_new, float %w_in_6, float %uz_new, float %y_in_6)


 <State 91>: 2.61ns
ST_91: stg_685 [2/2] 2.61ns
_ifconv:23  store float %y_out, float* %s_in_addr_5, align 4

ST_91: stg_686 [2/2] 2.61ns
:1  store float %y_out, float* %S_addr_5, align 4


 <State 92>: 2.61ns
ST_92: stg_687 [1/2] 2.61ns
_ifconv:23  store float %y_out, float* %s_in_addr_5, align 4

ST_92: stg_688 [1/1] 0.00ns
_ifconv:24  br i1 %tmp_mid2, label %7, label %._crit_edge20

ST_92: stg_689 [1/2] 2.61ns
:1  store float %y_out, float* %S_addr_5, align 4

ST_92: stg_690 [1/1] 0.00ns
:2  br label %._crit_edge20

ST_92: stg_691 [1/1] 0.00ns
._crit_edge20:0  br label %._crit_edge19

ST_92: empty_9 [1/1] 0.00ns
._crit_edge19:0  %empty_9 = call i32 (...)* @_ssdm_op_SpecRegionEnd([8 x i8]* @p_str1813, i32 %tmp_18)

ST_92: stg_693 [1/1] 0.00ns
._crit_edge19:1  br label %5


 <State 93>: 6.63ns
ST_93: off_row [1/1] 0.00ns
.preheader:0  %off_row = phi i10 [ %off_row_1, %._crit_edge21 ], [ 0, %5 ]

ST_93: phi_mul [1/1] 0.00ns
.preheader:1  %phi_mul = phi i20 [ %next_mul, %._crit_edge21 ], [ 0, %5 ]

ST_93: phi_mul_cast [1/1] 0.00ns
.preheader:2  %phi_mul_cast = zext i20 %phi_mul to i21

ST_93: exitcond [1/1] 2.07ns
.preheader:3  %exitcond = icmp eq i10 %off_row, -240

ST_93: off_row_1 [1/1] 1.84ns
.preheader:4  %off_row_1 = add i10 %off_row, 1

ST_93: stg_699 [1/1] 0.00ns
.preheader:5  br i1 %exitcond, label %10, label %8

ST_93: off_row_cast [1/1] 0.00ns
:0  %off_row_cast = zext i10 %off_row to i32

ST_93: empty_10 [1/1] 0.00ns
:1  %empty_10 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 784, i64 784, i64 784)

ST_93: stg_702 [1/1] 0.00ns
:2  call void (...)* @_ssdm_op_SpecLoopName([8 x i8]* @p_str1814) nounwind

ST_93: tmp_26 [1/1] 0.00ns
:3  %tmp_26 = call i32 (...)* @_ssdm_op_SpecRegionBegin([8 x i8]* @p_str1814)

ST_93: stg_704 [1/1] 0.00ns
:4  call void (...)* @_ssdm_op_SpecPipeline(i32 100, i32 1, i32 1, i32 0, [1 x i8]* @p_str1806) nounwind

ST_93: tmp_21 [1/1] 2.52ns
:5  %tmp_21 = icmp eq i32 %off_row_cast, %bottom_right

ST_93: tmp_22 [1/1] 2.07ns
:6  %tmp_22 = icmp eq i10 %off_row, %top_left_mid2

ST_93: or_cond [1/1] 1.37ns
:7  %or_cond = or i1 %tmp_21, %tmp_22

ST_93: next_mul [1/1] 2.08ns
:8  %next_mul = add i20 %phi_mul, 784

ST_93: stg_709 [1/1] 0.00ns
:9  br i1 %or_cond, label %._crit_edge21, label %_ifconv1

ST_93: tmp_31 [1/1] 2.08ns
_ifconv1:0  %tmp_31 = add i20 %tmp_cast5, %phi_mul

ST_93: tmp_39_cast [1/1] 0.00ns
_ifconv1:1  %tmp_39_cast = zext i20 %tmp_31 to i64

ST_93: A_addr_5 [1/1] 0.00ns
_ifconv1:2  %A_addr_5 = getelementptr [614656 x float]* %A, i64 0, i64 %tmp_39_cast

ST_93: tmp_32 [1/1] 2.20ns
_ifconv1:3  %tmp_32 = add i21 %tmp_10, %phi_mul_cast

ST_93: tmp_40_cast [1/1] 0.00ns
_ifconv1:4  %tmp_40_cast = zext i21 %tmp_32 to i64

ST_93: A_addr_7 [1/1] 0.00ns
_ifconv1:5  %A_addr_7 = getelementptr [614656 x float]* %A, i64 0, i64 %tmp_40_cast

ST_93: S_addr_6 [1/1] 0.00ns
_ifconv1:6  %S_addr_6 = getelementptr [614656 x float]* %S, i64 0, i64 %tmp_39_cast

ST_93: S_addr_7 [1/1] 0.00ns
_ifconv1:7  %S_addr_7 = getelementptr [614656 x float]* %S, i64 0, i64 %tmp_40_cast

ST_93: U_addr_4 [1/1] 0.00ns
_ifconv1:8  %U_addr_4 = getelementptr [614656 x float]* %U, i64 0, i64 %tmp_39_cast

ST_93: U_addr_5 [1/1] 0.00ns
_ifconv1:9  %U_addr_5 = getelementptr [614656 x float]* %U, i64 0, i64 %tmp_40_cast

ST_93: V_addr_4 [1/1] 0.00ns
_ifconv1:10  %V_addr_4 = getelementptr [614656 x float]* %V, i64 0, i64 %tmp_39_cast

ST_93: V_addr_5 [1/1] 0.00ns
_ifconv1:11  %V_addr_5 = getelementptr [614656 x float]* %V, i64 0, i64 %tmp_40_cast

ST_93: v_in_addr_4 [1/1] 0.00ns
_ifconv1:12  %v_in_addr_4 = getelementptr [614656 x float]* %v_in, i64 0, i64 %tmp_39_cast

ST_93: v_in_addr_5 [1/1] 0.00ns
_ifconv1:13  %v_in_addr_5 = getelementptr [614656 x float]* %v_in, i64 0, i64 %tmp_40_cast

ST_93: u_in_addr_4 [1/1] 0.00ns
_ifconv1:14  %u_in_addr_4 = getelementptr [614656 x float]* %u_in, i64 0, i64 %tmp_39_cast

ST_93: u_in_addr_5 [1/1] 0.00ns
_ifconv1:15  %u_in_addr_5 = getelementptr [614656 x float]* %u_in, i64 0, i64 %tmp_40_cast

ST_93: s_in_addr_6 [1/1] 0.00ns
_ifconv1:16  %s_in_addr_6 = getelementptr [614656 x float]* %s_in, i64 0, i64 %tmp_39_cast

ST_93: s_in_addr_7 [1/1] 0.00ns
_ifconv1:17  %s_in_addr_7 = getelementptr [614656 x float]* %s_in, i64 0, i64 %tmp_40_cast

ST_93: w_in_7 [4/4] 2.61ns
_ifconv1:18  %w_in_7 = load float* %A_addr_5, align 4

ST_93: w_in_8 [4/4] 2.61ns
_ifconv1:19  %w_in_8 = load float* %s_in_addr_6, align 4

ST_93: vw_in_2 [4/4] 2.61ns
_ifconv1:20  %vw_in_2 = load float* %v_in_addr_4, align 4

ST_93: uw_in_2 [4/4] 2.61ns
_ifconv1:21  %uw_in_2 = load float* %u_in_addr_4, align 4

ST_93: tmp_30 [1/1] 2.52ns
_ifconv1:25  %tmp_30 = icmp sgt i32 %off_row_cast, %bottom_right

ST_93: x_in_4 [4/4] 2.61ns
_ifconv1:27  %x_in_4 = load float* %A_addr_7, align 4

ST_93: x_in_5 [4/4] 2.61ns
_ifconv1:28  %x_in_5 = load float* %s_in_addr_7, align 4

ST_93: vx_in_1 [4/4] 2.61ns
_ifconv1:30  %vx_in_1 = load float* %v_in_addr_5, align 4

ST_93: ux_in_1 [4/4] 2.61ns
_ifconv1:31  %ux_in_1 = load float* %u_in_addr_5, align 4


 <State 94>: 2.61ns
ST_94: w_in_7 [3/4] 2.61ns
_ifconv1:18  %w_in_7 = load float* %A_addr_5, align 4

ST_94: w_in_8 [3/4] 2.61ns
_ifconv1:19  %w_in_8 = load float* %s_in_addr_6, align 4

ST_94: vw_in_2 [3/4] 2.61ns
_ifconv1:20  %vw_in_2 = load float* %v_in_addr_4, align 4

ST_94: uw_in_2 [3/4] 2.61ns
_ifconv1:21  %uw_in_2 = load float* %u_in_addr_4, align 4

ST_94: x_in_4 [3/4] 2.61ns
_ifconv1:27  %x_in_4 = load float* %A_addr_7, align 4

ST_94: x_in_5 [3/4] 2.61ns
_ifconv1:28  %x_in_5 = load float* %s_in_addr_7, align 4

ST_94: vx_in_1 [3/4] 2.61ns
_ifconv1:30  %vx_in_1 = load float* %v_in_addr_5, align 4

ST_94: ux_in_1 [3/4] 2.61ns
_ifconv1:31  %ux_in_1 = load float* %u_in_addr_5, align 4


 <State 95>: 2.61ns
ST_95: w_in_7 [2/4] 2.61ns
_ifconv1:18  %w_in_7 = load float* %A_addr_5, align 4

ST_95: w_in_8 [2/4] 2.61ns
_ifconv1:19  %w_in_8 = load float* %s_in_addr_6, align 4

ST_95: vw_in_2 [2/4] 2.61ns
_ifconv1:20  %vw_in_2 = load float* %v_in_addr_4, align 4

ST_95: uw_in_2 [2/4] 2.61ns
_ifconv1:21  %uw_in_2 = load float* %u_in_addr_4, align 4

ST_95: x_in_4 [2/4] 2.61ns
_ifconv1:27  %x_in_4 = load float* %A_addr_7, align 4

ST_95: x_in_5 [2/4] 2.61ns
_ifconv1:28  %x_in_5 = load float* %s_in_addr_7, align 4

ST_95: vx_in_1 [2/4] 2.61ns
_ifconv1:30  %vx_in_1 = load float* %v_in_addr_5, align 4

ST_95: ux_in_1 [2/4] 2.61ns
_ifconv1:31  %ux_in_1 = load float* %u_in_addr_5, align 4


 <State 96>: 5.85ns
ST_96: w_in_7 [1/4] 2.61ns
_ifconv1:18  %w_in_7 = load float* %A_addr_5, align 4

ST_96: w_in_8 [1/4] 2.61ns
_ifconv1:19  %w_in_8 = load float* %s_in_addr_6, align 4

ST_96: vw_in_2 [1/4] 2.61ns
_ifconv1:20  %vw_in_2 = load float* %v_in_addr_4, align 4

ST_96: uw_in_2 [1/4] 2.61ns
_ifconv1:21  %uw_in_2 = load float* %u_in_addr_4, align 4

ST_96: a1_assign_s [1/1] 1.37ns
_ifconv1:22  %a1_assign_s = select i1 %tmp_16, float 0.000000e+00, float %vw_in_2

ST_96: a1_assign_3 [1/1] 1.37ns
_ifconv1:23  %a1_assign_3 = select i1 %tmp_16, float 0.000000e+00, float %uw_in_2

ST_96: w_in_9 [1/1] 1.37ns
_ifconv1:24  %w_in_9 = select i1 %tmp_16, float %w_in_7, float %w_in_8

ST_96: or_cond2 [1/1] 0.00ns (grouped into LUT with out node x_in_6)
_ifconv1:26  %or_cond2 = and i1 %tmp_9, %tmp_30

ST_96: x_in_4 [1/4] 2.61ns
_ifconv1:27  %x_in_4 = load float* %A_addr_7, align 4

ST_96: x_in_5 [1/4] 2.61ns
_ifconv1:28  %x_in_5 = load float* %s_in_addr_7, align 4

ST_96: x_in_6 [1/1] 1.37ns (out node of the LUT)
_ifconv1:29  %x_in_6 = select i1 %or_cond2, float %x_in_4, float %x_in_5

ST_96: vx_in_1 [1/4] 2.61ns
_ifconv1:30  %vx_in_1 = load float* %v_in_addr_5, align 4

ST_96: ux_in_1 [1/4] 2.61ns
_ifconv1:31  %ux_in_1 = load float* %u_in_addr_5, align 4

ST_96: a2_assign_s [1/1] 1.37ns
_ifconv1:32  %a2_assign_s = select i1 %tmp_9, float 0.000000e+00, float %vx_in_1

ST_96: a2_assign_2 [1/1] 1.37ns
_ifconv1:33  %a2_assign_2 = select i1 %tmp_9, float 0.000000e+00, float %ux_in_1

ST_96: w_out_4 [10/10] 1.87ns
_ifconv1:34  %w_out_4 = call fastcc float @dut_vm2x1_base(float %w_in_9, float %vw_int_3, float %x_in_6, float %vx_int)


 <State 97>: 7.58ns
ST_97: w_out_4 [9/10] 7.58ns
_ifconv1:34  %w_out_4 = call fastcc float @dut_vm2x1_base(float %w_in_9, float %vw_int_3, float %x_in_6, float %vx_int)


 <State 98>: 7.58ns
ST_98: w_out_4 [8/10] 7.58ns
_ifconv1:34  %w_out_4 = call fastcc float @dut_vm2x1_base(float %w_in_9, float %vw_int_3, float %x_in_6, float %vx_int)


 <State 99>: 7.58ns
ST_99: w_out_4 [7/10] 7.58ns
_ifconv1:34  %w_out_4 = call fastcc float @dut_vm2x1_base(float %w_in_9, float %vw_int_3, float %x_in_6, float %vx_int)


 <State 100>: 7.58ns
ST_100: w_out_4 [6/10] 7.58ns
_ifconv1:34  %w_out_4 = call fastcc float @dut_vm2x1_base(float %w_in_9, float %vw_int_3, float %x_in_6, float %vx_int)


 <State 101>: 7.58ns
ST_101: w_out_4 [5/10] 7.58ns
_ifconv1:34  %w_out_4 = call fastcc float @dut_vm2x1_base(float %w_in_9, float %vw_int_3, float %x_in_6, float %vx_int)


 <State 102>: 7.58ns
ST_102: w_out_4 [4/10] 7.58ns
_ifconv1:34  %w_out_4 = call fastcc float @dut_vm2x1_base(float %w_in_9, float %vw_int_3, float %x_in_6, float %vx_int)


 <State 103>: 7.58ns
ST_103: w_out_4 [3/10] 7.58ns
_ifconv1:34  %w_out_4 = call fastcc float @dut_vm2x1_base(float %w_in_9, float %vw_int_3, float %x_in_6, float %vx_int)


 <State 104>: 7.58ns
ST_104: w_out_4 [2/10] 7.58ns
_ifconv1:34  %w_out_4 = call fastcc float @dut_vm2x1_base(float %w_in_9, float %vw_int_3, float %x_in_6, float %vx_int)


 <State 105>: 7.26ns
ST_105: w_out_4 [1/10] 7.26ns
_ifconv1:34  %w_out_4 = call fastcc float @dut_vm2x1_base(float %w_in_9, float %vw_int_3, float %x_in_6, float %vx_int)


 <State 106>: 2.61ns
ST_106: x_out [10/10] 1.87ns
_ifconv1:35  %x_out = call fastcc float @dut_vm2x1_base(float %w_in_9, float %vy_int_2, float %x_in_6, float %vz_int)

ST_106: stg_779 [2/2] 2.61ns
_ifconv1:40  store float %w_out_4, float* %s_in_addr_6, align 4

ST_106: stg_780 [2/2] 2.61ns
:0  store float %w_out_4, float* %S_addr_6, align 4


 <State 107>: 7.58ns
ST_107: x_out [9/10] 7.58ns
_ifconv1:35  %x_out = call fastcc float @dut_vm2x1_base(float %w_in_9, float %vy_int_2, float %x_in_6, float %vz_int)

ST_107: stg_782 [1/2] 2.61ns
_ifconv1:40  store float %w_out_4, float* %s_in_addr_6, align 4

ST_107: stg_783 [1/2] 2.61ns
:0  store float %w_out_4, float* %S_addr_6, align 4


 <State 108>: 7.58ns
ST_108: x_out [8/10] 7.58ns
_ifconv1:35  %x_out = call fastcc float @dut_vm2x1_base(float %w_in_9, float %vy_int_2, float %x_in_6, float %vz_int)


 <State 109>: 7.58ns
ST_109: x_out [7/10] 7.58ns
_ifconv1:35  %x_out = call fastcc float @dut_vm2x1_base(float %w_in_9, float %vy_int_2, float %x_in_6, float %vz_int)


 <State 110>: 7.58ns
ST_110: x_out [6/10] 7.58ns
_ifconv1:35  %x_out = call fastcc float @dut_vm2x1_base(float %w_in_9, float %vy_int_2, float %x_in_6, float %vz_int)


 <State 111>: 7.58ns
ST_111: x_out [5/10] 7.58ns
_ifconv1:35  %x_out = call fastcc float @dut_vm2x1_base(float %w_in_9, float %vy_int_2, float %x_in_6, float %vz_int)


 <State 112>: 7.58ns
ST_112: x_out [4/10] 7.58ns
_ifconv1:35  %x_out = call fastcc float @dut_vm2x1_base(float %w_in_9, float %vy_int_2, float %x_in_6, float %vz_int)


 <State 113>: 7.58ns
ST_113: x_out [3/10] 7.58ns
_ifconv1:35  %x_out = call fastcc float @dut_vm2x1_base(float %w_in_9, float %vy_int_2, float %x_in_6, float %vz_int)


 <State 114>: 7.58ns
ST_114: x_out [2/10] 7.58ns
_ifconv1:35  %x_out = call fastcc float @dut_vm2x1_base(float %w_in_9, float %vy_int_2, float %x_in_6, float %vz_int)


 <State 115>: 7.26ns
ST_115: x_out [1/10] 7.26ns
_ifconv1:35  %x_out = call fastcc float @dut_vm2x1_base(float %w_in_9, float %vy_int_2, float %x_in_6, float %vz_int)


 <State 116>: 2.61ns
ST_116: vw_out_1 [10/10] 1.87ns
_ifconv1:36  %vw_out_1 = call fastcc float @dut_vm2x1_base(float %a1_assign_s, float %vw_int_3, float %a2_assign_s, float %vx_int)

ST_116: stg_793 [2/2] 2.61ns
_ifconv1:41  store float %x_out, float* %s_in_addr_7, align 4

ST_116: stg_794 [2/2] 2.61ns
:1  store float %x_out, float* %S_addr_7, align 4


 <State 117>: 7.58ns
ST_117: vw_out_1 [9/10] 7.58ns
_ifconv1:36  %vw_out_1 = call fastcc float @dut_vm2x1_base(float %a1_assign_s, float %vw_int_3, float %a2_assign_s, float %vx_int)

ST_117: stg_796 [1/2] 2.61ns
_ifconv1:41  store float %x_out, float* %s_in_addr_7, align 4

ST_117: stg_797 [1/2] 2.61ns
:1  store float %x_out, float* %S_addr_7, align 4


 <State 118>: 7.58ns
ST_118: vw_out_1 [8/10] 7.58ns
_ifconv1:36  %vw_out_1 = call fastcc float @dut_vm2x1_base(float %a1_assign_s, float %vw_int_3, float %a2_assign_s, float %vx_int)


 <State 119>: 7.58ns
ST_119: vw_out_1 [7/10] 7.58ns
_ifconv1:36  %vw_out_1 = call fastcc float @dut_vm2x1_base(float %a1_assign_s, float %vw_int_3, float %a2_assign_s, float %vx_int)


 <State 120>: 7.58ns
ST_120: vw_out_1 [6/10] 7.58ns
_ifconv1:36  %vw_out_1 = call fastcc float @dut_vm2x1_base(float %a1_assign_s, float %vw_int_3, float %a2_assign_s, float %vx_int)


 <State 121>: 7.58ns
ST_121: vw_out_1 [5/10] 7.58ns
_ifconv1:36  %vw_out_1 = call fastcc float @dut_vm2x1_base(float %a1_assign_s, float %vw_int_3, float %a2_assign_s, float %vx_int)


 <State 122>: 7.58ns
ST_122: vw_out_1 [4/10] 7.58ns
_ifconv1:36  %vw_out_1 = call fastcc float @dut_vm2x1_base(float %a1_assign_s, float %vw_int_3, float %a2_assign_s, float %vx_int)


 <State 123>: 7.58ns
ST_123: vw_out_1 [3/10] 7.58ns
_ifconv1:36  %vw_out_1 = call fastcc float @dut_vm2x1_base(float %a1_assign_s, float %vw_int_3, float %a2_assign_s, float %vx_int)


 <State 124>: 7.58ns
ST_124: vw_out_1 [2/10] 7.58ns
_ifconv1:36  %vw_out_1 = call fastcc float @dut_vm2x1_base(float %a1_assign_s, float %vw_int_3, float %a2_assign_s, float %vx_int)


 <State 125>: 7.26ns
ST_125: vw_out_1 [1/10] 7.26ns
_ifconv1:36  %vw_out_1 = call fastcc float @dut_vm2x1_base(float %a1_assign_s, float %vw_int_3, float %a2_assign_s, float %vx_int)


 <State 126>: 2.61ns
ST_126: vx_out_1 [10/10] 1.87ns
_ifconv1:37  %vx_out_1 = call fastcc float @dut_vm2x1_base(float %a1_assign_s, float %vy_int_2, float %a2_assign_s, float %vz_int)

ST_126: stg_807 [2/2] 2.61ns
_ifconv1:42  store float %vw_out_1, float* %v_in_addr_4, align 4

ST_126: stg_808 [2/2] 2.61ns
:2  store float %vw_out_1, float* %V_addr_4, align 4


 <State 127>: 7.58ns
ST_127: vx_out_1 [9/10] 7.58ns
_ifconv1:37  %vx_out_1 = call fastcc float @dut_vm2x1_base(float %a1_assign_s, float %vy_int_2, float %a2_assign_s, float %vz_int)

ST_127: stg_810 [1/2] 2.61ns
_ifconv1:42  store float %vw_out_1, float* %v_in_addr_4, align 4

ST_127: stg_811 [1/2] 2.61ns
:2  store float %vw_out_1, float* %V_addr_4, align 4


 <State 128>: 7.58ns
ST_128: vx_out_1 [8/10] 7.58ns
_ifconv1:37  %vx_out_1 = call fastcc float @dut_vm2x1_base(float %a1_assign_s, float %vy_int_2, float %a2_assign_s, float %vz_int)


 <State 129>: 7.58ns
ST_129: vx_out_1 [7/10] 7.58ns
_ifconv1:37  %vx_out_1 = call fastcc float @dut_vm2x1_base(float %a1_assign_s, float %vy_int_2, float %a2_assign_s, float %vz_int)


 <State 130>: 7.58ns
ST_130: vx_out_1 [6/10] 7.58ns
_ifconv1:37  %vx_out_1 = call fastcc float @dut_vm2x1_base(float %a1_assign_s, float %vy_int_2, float %a2_assign_s, float %vz_int)


 <State 131>: 7.58ns
ST_131: vx_out_1 [5/10] 7.58ns
_ifconv1:37  %vx_out_1 = call fastcc float @dut_vm2x1_base(float %a1_assign_s, float %vy_int_2, float %a2_assign_s, float %vz_int)


 <State 132>: 7.58ns
ST_132: vx_out_1 [4/10] 7.58ns
_ifconv1:37  %vx_out_1 = call fastcc float @dut_vm2x1_base(float %a1_assign_s, float %vy_int_2, float %a2_assign_s, float %vz_int)


 <State 133>: 7.58ns
ST_133: vx_out_1 [3/10] 7.58ns
_ifconv1:37  %vx_out_1 = call fastcc float @dut_vm2x1_base(float %a1_assign_s, float %vy_int_2, float %a2_assign_s, float %vz_int)


 <State 134>: 7.58ns
ST_134: vx_out_1 [2/10] 7.58ns
_ifconv1:37  %vx_out_1 = call fastcc float @dut_vm2x1_base(float %a1_assign_s, float %vy_int_2, float %a2_assign_s, float %vz_int)


 <State 135>: 7.26ns
ST_135: vx_out_1 [1/10] 7.26ns
_ifconv1:37  %vx_out_1 = call fastcc float @dut_vm2x1_base(float %a1_assign_s, float %vy_int_2, float %a2_assign_s, float %vz_int)


 <State 136>: 2.61ns
ST_136: uw_out_1 [10/10] 1.87ns
_ifconv1:38  %uw_out_1 = call fastcc float @dut_vm2x1_base(float %a1_assign_3, float %uz_new, float %a2_assign_2, float %uy_int)

ST_136: stg_821 [2/2] 2.61ns
_ifconv1:43  store float %vx_out_1, float* %v_in_addr_5, align 4

ST_136: stg_822 [2/2] 2.61ns
:3  store float %vx_out_1, float* %V_addr_5, align 4


 <State 137>: 7.58ns
ST_137: uw_out_1 [9/10] 7.58ns
_ifconv1:38  %uw_out_1 = call fastcc float @dut_vm2x1_base(float %a1_assign_3, float %uz_new, float %a2_assign_2, float %uy_int)

ST_137: stg_824 [1/2] 2.61ns
_ifconv1:43  store float %vx_out_1, float* %v_in_addr_5, align 4

ST_137: stg_825 [1/2] 2.61ns
:3  store float %vx_out_1, float* %V_addr_5, align 4


 <State 138>: 7.58ns
ST_138: uw_out_1 [8/10] 7.58ns
_ifconv1:38  %uw_out_1 = call fastcc float @dut_vm2x1_base(float %a1_assign_3, float %uz_new, float %a2_assign_2, float %uy_int)


 <State 139>: 7.58ns
ST_139: uw_out_1 [7/10] 7.58ns
_ifconv1:38  %uw_out_1 = call fastcc float @dut_vm2x1_base(float %a1_assign_3, float %uz_new, float %a2_assign_2, float %uy_int)


 <State 140>: 7.58ns
ST_140: uw_out_1 [6/10] 7.58ns
_ifconv1:38  %uw_out_1 = call fastcc float @dut_vm2x1_base(float %a1_assign_3, float %uz_new, float %a2_assign_2, float %uy_int)


 <State 141>: 7.58ns
ST_141: uw_out_1 [5/10] 7.58ns
_ifconv1:38  %uw_out_1 = call fastcc float @dut_vm2x1_base(float %a1_assign_3, float %uz_new, float %a2_assign_2, float %uy_int)


 <State 142>: 7.58ns
ST_142: uw_out_1 [4/10] 7.58ns
_ifconv1:38  %uw_out_1 = call fastcc float @dut_vm2x1_base(float %a1_assign_3, float %uz_new, float %a2_assign_2, float %uy_int)


 <State 143>: 7.58ns
ST_143: uw_out_1 [3/10] 7.58ns
_ifconv1:38  %uw_out_1 = call fastcc float @dut_vm2x1_base(float %a1_assign_3, float %uz_new, float %a2_assign_2, float %uy_int)


 <State 144>: 7.58ns
ST_144: uw_out_1 [2/10] 7.58ns
_ifconv1:38  %uw_out_1 = call fastcc float @dut_vm2x1_base(float %a1_assign_3, float %uz_new, float %a2_assign_2, float %uy_int)


 <State 145>: 7.26ns
ST_145: uw_out_1 [1/10] 7.26ns
_ifconv1:38  %uw_out_1 = call fastcc float @dut_vm2x1_base(float %a1_assign_3, float %uz_new, float %a2_assign_2, float %uy_int)


 <State 146>: 2.61ns
ST_146: ux_out_1 [10/10] 1.87ns
_ifconv1:39  %ux_out_1 = call fastcc float @dut_vm2x1_base(float %a1_assign_3, float %ux_new, float %a2_assign_2, float %uz_new)

ST_146: stg_835 [2/2] 2.61ns
_ifconv1:44  store float %uw_out_1, float* %u_in_addr_4, align 4

ST_146: stg_836 [2/2] 2.61ns
:4  store float %uw_out_1, float* %U_addr_4, align 4


 <State 147>: 7.58ns
ST_147: ux_out_1 [9/10] 7.58ns
_ifconv1:39  %ux_out_1 = call fastcc float @dut_vm2x1_base(float %a1_assign_3, float %ux_new, float %a2_assign_2, float %uz_new)

ST_147: stg_838 [1/2] 2.61ns
_ifconv1:44  store float %uw_out_1, float* %u_in_addr_4, align 4

ST_147: stg_839 [1/2] 2.61ns
:4  store float %uw_out_1, float* %U_addr_4, align 4


 <State 148>: 7.58ns
ST_148: ux_out_1 [8/10] 7.58ns
_ifconv1:39  %ux_out_1 = call fastcc float @dut_vm2x1_base(float %a1_assign_3, float %ux_new, float %a2_assign_2, float %uz_new)


 <State 149>: 7.58ns
ST_149: ux_out_1 [7/10] 7.58ns
_ifconv1:39  %ux_out_1 = call fastcc float @dut_vm2x1_base(float %a1_assign_3, float %ux_new, float %a2_assign_2, float %uz_new)


 <State 150>: 7.58ns
ST_150: ux_out_1 [6/10] 7.58ns
_ifconv1:39  %ux_out_1 = call fastcc float @dut_vm2x1_base(float %a1_assign_3, float %ux_new, float %a2_assign_2, float %uz_new)


 <State 151>: 7.58ns
ST_151: ux_out_1 [5/10] 7.58ns
_ifconv1:39  %ux_out_1 = call fastcc float @dut_vm2x1_base(float %a1_assign_3, float %ux_new, float %a2_assign_2, float %uz_new)


 <State 152>: 7.58ns
ST_152: ux_out_1 [4/10] 7.58ns
_ifconv1:39  %ux_out_1 = call fastcc float @dut_vm2x1_base(float %a1_assign_3, float %ux_new, float %a2_assign_2, float %uz_new)


 <State 153>: 7.58ns
ST_153: ux_out_1 [3/10] 7.58ns
_ifconv1:39  %ux_out_1 = call fastcc float @dut_vm2x1_base(float %a1_assign_3, float %ux_new, float %a2_assign_2, float %uz_new)


 <State 154>: 7.58ns
ST_154: ux_out_1 [2/10] 7.58ns
_ifconv1:39  %ux_out_1 = call fastcc float @dut_vm2x1_base(float %a1_assign_3, float %ux_new, float %a2_assign_2, float %uz_new)


 <State 155>: 7.26ns
ST_155: ux_out_1 [1/10] 7.26ns
_ifconv1:39  %ux_out_1 = call fastcc float @dut_vm2x1_base(float %a1_assign_3, float %ux_new, float %a2_assign_2, float %uz_new)


 <State 156>: 2.61ns
ST_156: stg_848 [2/2] 2.61ns
_ifconv1:45  store float %ux_out_1, float* %u_in_addr_5, align 4

ST_156: stg_849 [2/2] 2.61ns
:5  store float %ux_out_1, float* %U_addr_5, align 4


 <State 157>: 2.61ns
ST_157: stg_850 [1/2] 2.61ns
_ifconv1:45  store float %ux_out_1, float* %u_in_addr_5, align 4

ST_157: stg_851 [1/1] 0.00ns
_ifconv1:46  br i1 %tmp_mid2, label %9, label %._crit_edge23

ST_157: stg_852 [1/2] 2.61ns
:5  store float %ux_out_1, float* %U_addr_5, align 4

ST_157: stg_853 [1/1] 0.00ns
:6  br label %._crit_edge23

ST_157: stg_854 [1/1] 0.00ns
._crit_edge23:0  br label %._crit_edge21

ST_157: empty_11 [1/1] 0.00ns
._crit_edge21:0  %empty_11 = call i32 (...)* @_ssdm_op_SpecRegionEnd([8 x i8]* @p_str1814, i32 %tmp_26)

ST_157: stg_856 [1/1] 0.00ns
._crit_edge21:1  br label %.preheader


 <State 158>: 0.00ns
ST_158: empty_12 [1/1] 0.00ns
:0  %empty_12 = call i32 (...)* @_ssdm_op_SpecRegionEnd([9 x i8]* @p_str1812, i32 %tmp_6)

ST_158: stg_858 [1/1] 0.00ns
:1  br label %2



============================================================
+ Verbose Summary: Timing violations
============================================================
Target clock period: 10ns, clock uncertainty: 1.25ns.

 No timing violations. 


============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
 - Input state : 
  - Chain level:
	State 1
	State 2
	State 3
	State 4
	State 5
	State 6
	State 7
	State 8
	State 9
	State 10
	State 11
	State 12
	State 13
	State 14
	State 15
	State 16
	State 17
	State 18
	State 19
	State 20
	State 21
	State 22
	State 23
	State 24
	State 25
	State 26
	State 27
	State 28
	State 29
	State 30
	State 31
	State 32
	State 33
	State 34
	State 35
	State 36
	State 37
	State 38
	State 39
	State 40
	State 41
	State 42
	State 43
	State 44
	State 45
	State 46
	State 47
	State 48
	State 49
	State 50
	State 51
	State 52
	State 53
	State 54
	State 55
	State 56
	State 57
	State 58
	State 59
	State 60
	State 61
	State 62
	State 63
	State 64
	State 65
	State 66
	State 67
	State 68
	State 69
	State 70
	State 71
	State 72
	State 73
	State 74
	State 75
	State 76
	State 77
	State 78
	State 79
	State 80
	State 81
	State 82
	State 83
	State 84
	State 85
	State 86
	State 87
	State 88
	State 89
	State 90
	State 91
	State 92
	State 93
	State 94
	State 95
	State 96
	State 97
	State 98
	State 99
	State 100
	State 101
	State 102
	State 103
	State 104
	State 105
	State 106
	State 107
	State 108
	State 109
	State 110
	State 111
	State 112
	State 113
	State 114
	State 115
	State 116
	State 117
	State 118
	State 119
	State 120
	State 121
	State 122
	State 123
	State 124
	State 125
	State 126
	State 127
	State 128
	State 129
	State 130
	State 131
	State 132
	State 133
	State 134
	State 135
	State 136
	State 137
	State 138
	State 139
	State 140
	State 141
	State 142
	State 143
	State 144
	State 145
	State 146
	State 147
	State 148
	State 149
	State 150
	State 151
	State 152
	State 153
	State 154
	State 155
	State 156
	State 157
	State 158


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
