

================================================================
== Vivado HLS Report for 'dut_svd_pairs'
================================================================
* Date:           Fri Nov 11 18:59:57 2022

* Version:        2016.2 (Build 1577090 on Thu Jun 02 16:59:10 MDT 2016)
* Project:        pca.prj
* Solution:       solution1
* Product family: zynq
* Target device:  xc7z020clg484-1


================================================================
== Performance Estimates
================================================================
+ Timing (ns): 
    * Summary: 
    +--------+-------+----------+------------+
    |  Clock | Target| Estimated| Uncertainty|
    +--------+-------+----------+------------+
    |ap_clk  |  10.00|     14.33|        1.25|
    +--------+-------+----------+------------+

+ Latency (clock cycles): 
    * Summary: 
    +-------------+-------------+-------------+-------------+---------+
    |          Latency          |          Interval         | Pipeline|
    |     min     |     max     |     min     |     max     |   Type  |
    +-------------+-------------+-------------+-------------+---------+
    |  31318299336|  31321368696|  31318299336|  31321368696|   none  |
    +-------------+-------------+-------------+-------------+---------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        +------------------------------+-------------+-------------+-------------------+-----------+-----------+--------+----------+
        |                              |          Latency          |     Iteration     |  Initiation Interval  |  Trip  |          |
        |           Loop Name          |     min     |     max     |      Latency      |  achieved |   target  |  Count | Pipelined|
        +------------------------------+-------------+-------------+-------------------+-----------+-----------+--------+----------+
        |- col_load                    |       309680|       309680|                790|          -|          -|     392|    no    |
        | + row_load                   |          787|          787|                  5|          1|          1|     784|    yes   |
        |- sweep_loop_step_loop        |  31317682320|  31320751680| 3999704 ~ 4000096 |          -|          -|    7830|    no    |
        | + diag_index_update          |         1176|         1568|       3 ~ 4       |          -|          -|     392|    no    |
        | + diag_px                    |         3256|         3256|                129|          8|          8|     392|    yes   |
        | + off_diag_px_off_diag_loop  |      3995266|      3995266|                 29|         26|          8|  153664|    yes   |
        |- col_store_row_store         |       307332|       307332|                  6|          1|          1|  307328|    yes   |
        +------------------------------+-------------+-------------+-------------------+-----------+-----------+--------+----------+

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 0
ResetActiveHigh: 1
IsCombinational: 0
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 0
HasVarLatency: 1
IsPipeline: 0
IsRtlPipelined: 0
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0

+ Individual pipeline summary: 
  * Pipeline-0: initiation interval (II) = 1, depth = 5
  * Pipeline-1: initiation interval (II) = 8, depth = 129
  * Pipeline-2: initiation interval (II) = 26, depth = 29
  * Pipeline-3: initiation interval (II) = 1, depth = 6


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states: 183
* Pipeline: 4
  Pipeline-0: II = 1, D = 5, States = { 3 4 5 6 7 }
  Pipeline-1: II = 8, D = 129, States = { 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 }
  Pipeline-2: II = 26, D = 29, States = { 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 }
  Pipeline-3: II = 1, D = 6, States = { 177 178 179 180 181 182 }
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 
	2  / true
2 --> 
	9  / (exitcond9)
	3  / (!exitcond9)
3 --> 
	8  / (exitcond8)
	4  / (!exitcond8)
4 --> 
	5  / true
5 --> 
	6  / true
6 --> 
	7  / true
7 --> 
	3  / true
8 --> 
	2  / true
9 --> 
	177  / (exitcond_flatten1)
	10  / (!exitcond_flatten1)
10 --> 
	17  / (exitcond5)
	15  / (!exitcond5 & tmp_17)
	11  / (!exitcond5 & !tmp_17 & !tmp_18)
	12  / (!exitcond5 & !tmp_17 & tmp_18)
11 --> 
	14  / true
12 --> 
	13  / true
13 --> 
	14  / true
14 --> 
	10  / true
15 --> 
	16  / true
16 --> 
	14  / true
17 --> 
	146  / (exitcond4)
	18  / (!exitcond4)
18 --> 
	19  / true
19 --> 
	20  / true
20 --> 
	21  / true
21 --> 
	22  / true
22 --> 
	23  / true
23 --> 
	24  / true
24 --> 
	25  / true
25 --> 
	26  / true
26 --> 
	27  / true
27 --> 
	28  / true
28 --> 
	29  / true
29 --> 
	30  / true
30 --> 
	31  / true
31 --> 
	32  / true
32 --> 
	33  / true
33 --> 
	34  / true
34 --> 
	35  / true
35 --> 
	36  / true
36 --> 
	37  / true
37 --> 
	38  / true
38 --> 
	39  / true
39 --> 
	40  / true
40 --> 
	41  / true
41 --> 
	42  / true
42 --> 
	43  / true
43 --> 
	44  / true
44 --> 
	45  / true
45 --> 
	46  / true
46 --> 
	47  / true
47 --> 
	48  / true
48 --> 
	49  / true
49 --> 
	50  / true
50 --> 
	51  / true
51 --> 
	52  / true
52 --> 
	53  / true
53 --> 
	54  / true
54 --> 
	55  / true
55 --> 
	56  / true
56 --> 
	57  / true
57 --> 
	58  / true
58 --> 
	59  / true
59 --> 
	60  / true
60 --> 
	61  / true
61 --> 
	62  / true
62 --> 
	63  / true
63 --> 
	64  / true
64 --> 
	65  / true
65 --> 
	66  / true
66 --> 
	67  / true
67 --> 
	68  / true
68 --> 
	69  / true
69 --> 
	70  / true
70 --> 
	71  / true
71 --> 
	72  / true
72 --> 
	73  / true
73 --> 
	74  / true
74 --> 
	75  / true
75 --> 
	76  / true
76 --> 
	77  / true
77 --> 
	78  / true
78 --> 
	79  / true
79 --> 
	80  / true
80 --> 
	81  / true
81 --> 
	82  / true
82 --> 
	83  / true
83 --> 
	84  / true
84 --> 
	85  / true
85 --> 
	86  / true
86 --> 
	87  / true
87 --> 
	88  / true
88 --> 
	89  / true
89 --> 
	90  / true
90 --> 
	91  / true
91 --> 
	92  / true
92 --> 
	93  / true
93 --> 
	94  / true
94 --> 
	95  / true
95 --> 
	96  / true
96 --> 
	97  / true
97 --> 
	98  / true
98 --> 
	99  / true
99 --> 
	100  / true
100 --> 
	101  / true
101 --> 
	102  / true
102 --> 
	103  / true
103 --> 
	104  / true
104 --> 
	105  / true
105 --> 
	106  / true
106 --> 
	107  / true
107 --> 
	108  / true
108 --> 
	109  / true
109 --> 
	110  / true
110 --> 
	111  / true
111 --> 
	112  / true
112 --> 
	113  / true
113 --> 
	114  / true
114 --> 
	115  / true
115 --> 
	116  / true
116 --> 
	117  / true
117 --> 
	118  / true
118 --> 
	119  / true
119 --> 
	120  / true
120 --> 
	121  / true
121 --> 
	122  / true
122 --> 
	123  / true
123 --> 
	124  / true
124 --> 
	125  / true
125 --> 
	126  / true
126 --> 
	127  / true
127 --> 
	128  / true
128 --> 
	129  / true
129 --> 
	130  / true
130 --> 
	131  / true
131 --> 
	132  / true
132 --> 
	133  / true
133 --> 
	134  / true
134 --> 
	135  / true
135 --> 
	136  / true
136 --> 
	137  / true
137 --> 
	138  / true
138 --> 
	139  / true
139 --> 
	140  / true
140 --> 
	141  / true
141 --> 
	142  / true
142 --> 
	143  / true
143 --> 
	144  / true
144 --> 
	145  / true
145 --> 
	17  / true
146 --> 
	147  / true
147 --> 
	148  / true
148 --> 
	176  / (exitcond_flatten)
	149  / (!exitcond_flatten)
149 --> 
	150  / true
150 --> 
	151  / true
151 --> 
	152  / true
152 --> 
	153  / true
153 --> 
	154  / true
154 --> 
	155  / true
155 --> 
	156  / true
156 --> 
	157  / true
157 --> 
	158  / true
158 --> 
	159  / true
159 --> 
	160  / true
160 --> 
	161  / true
161 --> 
	162  / true
162 --> 
	163  / true
163 --> 
	164  / true
164 --> 
	165  / true
165 --> 
	166  / true
166 --> 
	167  / true
167 --> 
	168  / true
168 --> 
	169  / true
169 --> 
	170  / true
170 --> 
	171  / true
171 --> 
	172  / true
172 --> 
	173  / true
173 --> 
	174  / true
174 --> 
	175  / true
175 --> 
	147  / true
176 --> 
	9  / true
177 --> 
	183  / (exitcond_flatten2)
	178  / (!exitcond_flatten2)
178 --> 
	179  / true
179 --> 
	180  / true
180 --> 
	181  / true
181 --> 
	182  / true
182 --> 
	177  / true
183 --> 
* FSM state operations: 

 <State 1>: 1.57ns
ST_1: diag1_i [1/1] 0.00ns
:0  %diag1_i = alloca [784 x i32], align 4

ST_1: diag2_i [1/1] 0.00ns
:1  %diag2_i = alloca [784 x i32], align 4

ST_1: s_col1 [1/1] 0.00ns
:2  %s_col1 = alloca [614656 x float], align 4

ST_1: s_col2 [1/1] 0.00ns
:3  %s_col2 = alloca [614656 x float], align 4

ST_1: u_col1 [1/1] 0.00ns
:4  %u_col1 = alloca [614656 x float], align 4

ST_1: u_col2 [1/1] 0.00ns
:5  %u_col2 = alloca [614656 x float], align 4

ST_1: v_col1 [1/1] 0.00ns
:6  %v_col1 = alloca [614656 x float], align 4

ST_1: v_col2 [1/1] 0.00ns
:7  %v_col2 = alloca [614656 x float], align 4

ST_1: diag_w_out [1/1] 0.00ns
:8  %diag_w_out = alloca [392 x float], align 16

ST_1: diag_x_out [1/1] 0.00ns
:9  %diag_x_out = alloca [392 x float], align 16

ST_1: diag_y_out [1/1] 0.00ns
:10  %diag_y_out = alloca [392 x float], align 16

ST_1: diag_z_out [1/1] 0.00ns
:11  %diag_z_out = alloca [392 x float], align 16

ST_1: uw_new [1/1] 0.00ns
:12  %uw_new = alloca [392 x float], align 16

ST_1: ux_new [1/1] 0.00ns
:13  %ux_new = alloca [392 x float], align 16

ST_1: uy_new [1/1] 0.00ns
:14  %uy_new = alloca [392 x float], align 16

ST_1: uz_new [1/1] 0.00ns
:15  %uz_new = alloca [392 x float], align 16

ST_1: vw_new [1/1] 0.00ns
:16  %vw_new = alloca [392 x float], align 16

ST_1: vx_new [1/1] 0.00ns
:17  %vx_new = alloca [392 x float], align 16

ST_1: vy_new [1/1] 0.00ns
:18  %vy_new = alloca [392 x float], align 16

ST_1: vz_new [1/1] 0.00ns
:19  %vz_new = alloca [392 x float], align 16

ST_1: stg_204 [1/1] 1.57ns
:20  br label %1


 <State 2>: 3.60ns
ST_2: col [1/1] 0.00ns
:0  %col = phi i9 [ 0, %0 ], [ %col_1, %4 ]

ST_2: phi_mul1 [1/1] 0.00ns
:1  %phi_mul1 = phi i20 [ 0, %0 ], [ %next_mul1, %4 ]

ST_2: next_mul1 [1/1] 2.08ns
:2  %next_mul1 = add i20 %phi_mul1, 1568

ST_2: exitcond9 [1/1] 2.03ns
:3  %exitcond9 = icmp eq i9 %col, -120

ST_2: col_1 [1/1] 1.84ns
:4  %col_1 = add i9 %col, 1

ST_2: stg_210 [1/1] 1.57ns
:5  br i1 %exitcond9, label %.preheader12.preheader, label %2

ST_2: empty [1/1] 0.00ns
:0  %empty = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 392, i64 392, i64 392)

ST_2: stg_212 [1/1] 0.00ns
:1  call void (...)* @_ssdm_op_SpecLoopName([9 x i8]* @p_str1810) nounwind

ST_2: tmp_5 [1/1] 0.00ns
:2  %tmp_5 = call i32 (...)* @_ssdm_op_SpecRegionBegin([9 x i8]* @p_str1810)

ST_2: tmp [1/1] 0.00ns
:3  %tmp = call i10 @_ssdm_op_BitConcatenate.i10.i9.i1(i9 %col, i1 false)

ST_2: tmp_cast [1/1] 0.00ns
:4  %tmp_cast = zext i10 %tmp to i32

ST_2: tmp_1 [1/1] 0.00ns
:5  %tmp_1 = zext i9 %col to i64

ST_2: diag2_i_addr [1/1] 0.00ns
:6  %diag2_i_addr = getelementptr [784 x i32]* %diag2_i, i64 0, i64 %tmp_1

ST_2: diag1_i_addr [1/1] 0.00ns
:7  %diag1_i_addr = getelementptr [784 x i32]* %diag1_i, i64 0, i64 %tmp_1

ST_2: stg_219 [1/1] 2.71ns
:8  store i32 %tmp_cast, i32* %diag1_i_addr, align 4

ST_2: tmp_2 [1/1] 0.00ns
:9  %tmp_2 = or i10 %tmp, 1

ST_2: tmp_2_cast [1/1] 0.00ns
:10  %tmp_2_cast = zext i10 %tmp_2 to i32

ST_2: stg_222 [1/1] 2.71ns
:11  store i32 %tmp_2_cast, i32* %diag2_i_addr, align 4

ST_2: tmp_3_cast [1/1] 0.00ns
:12  %tmp_3_cast = zext i10 %tmp to i20

ST_2: tmp_4_cast [1/1] 0.00ns
:13  %tmp_4_cast = zext i10 %tmp_2 to i20

ST_2: stg_225 [1/1] 1.57ns
:14  br label %3


 <State 3>: 4.69ns
ST_3: row [1/1] 0.00ns
:0  %row = phi i10 [ 0, %2 ], [ %row_1, %ifBlock ]

ST_3: phi_mul [1/1] 0.00ns
:1  %phi_mul = phi i20 [ 0, %2 ], [ %next_mul, %ifBlock ]

ST_3: exitcond8 [1/1] 2.07ns
:2  %exitcond8 = icmp eq i10 %row, -240

ST_3: row_1 [1/1] 1.84ns
:3  %row_1 = add i10 %row, 1

ST_3: stg_230 [1/1] 0.00ns
:4  br i1 %exitcond8, label %4, label %ifBlock

ST_3: tmp_7_cast [1/1] 0.00ns
ifBlock:4  %tmp_7_cast = zext i10 %row to i20

ST_3: next_mul [1/1] 2.08ns
ifBlock:5  %next_mul = add i20 %phi_mul, 784

ST_3: tmp_14 [1/1] 2.08ns
ifBlock:6  %tmp_14 = add i20 %phi_mul, %tmp_3_cast

ST_3: tmp_31_cast [1/1] 0.00ns
ifBlock:7  %tmp_31_cast = zext i20 %tmp_14 to i64

ST_3: A_addr [1/1] 0.00ns
ifBlock:8  %A_addr = getelementptr [614656 x float]* %A, i64 0, i64 %tmp_31_cast

ST_3: tmp_15 [1/1] 2.08ns
ifBlock:9  %tmp_15 = add i20 %phi_mul, %tmp_4_cast

ST_3: tmp_37_cast [1/1] 0.00ns
ifBlock:10  %tmp_37_cast = zext i20 %tmp_15 to i64

ST_3: A_addr_1 [1/1] 0.00ns
ifBlock:11  %A_addr_1 = getelementptr [614656 x float]* %A, i64 0, i64 %tmp_37_cast

ST_3: tmp_16 [1/1] 2.08ns
ifBlock:12  %tmp_16 = add i20 %phi_mul1, %tmp_7_cast

ST_3: A_load [4/4] 2.61ns
ifBlock:16  %A_load = load float* %A_addr, align 4

ST_3: A_load_1 [4/4] 2.61ns
ifBlock:18  %A_load_1 = load float* %A_addr_1, align 4


 <State 4>: 2.61ns
ST_4: A_load [3/4] 2.61ns
ifBlock:16  %A_load = load float* %A_addr, align 4

ST_4: A_load_1 [3/4] 2.61ns
ifBlock:18  %A_load_1 = load float* %A_addr_1, align 4


 <State 5>: 2.61ns
ST_5: A_load [2/4] 2.61ns
ifBlock:16  %A_load = load float* %A_addr, align 4

ST_5: A_load_1 [2/4] 2.61ns
ifBlock:18  %A_load_1 = load float* %A_addr_1, align 4


 <State 6>: 5.22ns
ST_6: tmp_38_cast [1/1] 0.00ns
ifBlock:13  %tmp_38_cast = zext i20 %tmp_16 to i64

ST_6: s_col1_addr [1/1] 0.00ns
ifBlock:14  %s_col1_addr = getelementptr [614656 x float]* %s_col1, i64 0, i64 %tmp_38_cast

ST_6: s_col2_addr [1/1] 0.00ns
ifBlock:15  %s_col2_addr = getelementptr [614656 x float]* %s_col2, i64 0, i64 %tmp_38_cast

ST_6: A_load [1/4] 2.61ns
ifBlock:16  %A_load = load float* %A_addr, align 4

ST_6: stg_250 [2/2] 2.61ns
ifBlock:17  store float %A_load, float* %s_col1_addr, align 4

ST_6: A_load_1 [1/4] 2.61ns
ifBlock:18  %A_load_1 = load float* %A_addr_1, align 4

ST_6: stg_252 [2/2] 2.61ns
ifBlock:19  store float %A_load_1, float* %s_col2_addr, align 4


 <State 7>: 2.61ns
ST_7: empty_8 [1/1] 0.00ns
ifBlock:0  %empty_8 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 784, i64 784, i64 784)

ST_7: stg_254 [1/1] 0.00ns
ifBlock:1  call void (...)* @_ssdm_op_SpecLoopName([9 x i8]* @p_str1811) nounwind

ST_7: tmp_12 [1/1] 0.00ns
ifBlock:2  %tmp_12 = call i32 (...)* @_ssdm_op_SpecRegionBegin([9 x i8]* @p_str1811)

ST_7: stg_256 [1/1] 0.00ns
ifBlock:3  call void (...)* @_ssdm_op_SpecPipeline(i32 -1, i32 1, i32 1, i32 0, [1 x i8]* @p_str1806) nounwind

ST_7: stg_257 [1/2] 2.61ns
ifBlock:17  store float %A_load, float* %s_col1_addr, align 4

ST_7: stg_258 [1/2] 2.61ns
ifBlock:19  store float %A_load_1, float* %s_col2_addr, align 4

ST_7: empty_9 [1/1] 0.00ns
ifBlock:20  %empty_9 = call i32 (...)* @_ssdm_op_SpecRegionEnd([9 x i8]* @p_str1811, i32 %tmp_12)

ST_7: stg_260 [1/1] 0.00ns
ifBlock:21  br label %3


 <State 8>: 0.00ns
ST_8: empty_10 [1/1] 0.00ns
:0  %empty_10 = call i32 (...)* @_ssdm_op_SpecRegionEnd([9 x i8]* @p_str1810, i32 %tmp_5)

ST_8: stg_262 [1/1] 0.00ns
:1  br label %1


 <State 9>: 6.18ns
ST_9: indvar_flatten1 [1/1] 0.00ns
.preheader12.preheader:0  %indvar_flatten1 = phi i13 [ %indvar_flatten_next2, %30 ], [ 0, %1 ]

ST_9: sweepnum [1/1] 0.00ns
.preheader12.preheader:1  %sweepnum = phi i4 [ %sweepnum_cast_mid2_v, %30 ], [ 0, %1 ]

ST_9: step [1/1] 0.00ns
.preheader12.preheader:2  %step = phi i10 [ %step_1, %30 ], [ 0, %1 ]

ST_9: exitcond_flatten1 [1/1] 2.18ns
.preheader12.preheader:3  %exitcond_flatten1 = icmp eq i13 %indvar_flatten1, -362

ST_9: indvar_flatten_next2 [1/1] 1.96ns
.preheader12.preheader:4  %indvar_flatten_next2 = add i13 %indvar_flatten1, 1

ST_9: stg_268 [1/1] 1.57ns
.preheader12.preheader:5  br i1 %exitcond_flatten1, label %.preheader.preheader, label %.preheader12

ST_9: sweepnum_1 [1/1] 0.80ns
.preheader12:0  %sweepnum_1 = add i4 1, %sweepnum

ST_9: stg_270 [1/1] 0.00ns
.preheader12:1  call void (...)* @_ssdm_op_SpecLoopName([21 x i8]* @sweep_loop_step_loop_str)

ST_9: empty_17 [1/1] 0.00ns
.preheader12:2  %empty_17 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 7830, i64 7830, i64 7830)

ST_9: exitcond [1/1] 2.07ns
.preheader12:3  %exitcond = icmp eq i10 %step, -241

ST_9: step_mid2 [1/1] 1.37ns
.preheader12:4  %step_mid2 = select i1 %exitcond, i10 0, i10 %step

ST_9: sweepnum_cast_mid2_v [1/1] 1.37ns
.preheader12:5  %sweepnum_cast_mid2_v = select i1 %exitcond, i4 %sweepnum_1, i4 %sweepnum

ST_9: tmp_3 [1/1] 0.00ns
.preheader12:6  %tmp_3 = trunc i4 %sweepnum_cast_mid2_v to i1

ST_9: tmp_4 [1/1] 0.00ns
.preheader12:7  %tmp_4 = trunc i10 %step_mid2 to i1

ST_9: stg_277 [1/1] 0.00ns
.preheader12:8  call void (...)* @_ssdm_op_SpecLoopName([10 x i8]* @p_str1813) nounwind

ST_9: tmp_s [1/1] 0.00ns
.preheader12:9  %tmp_s = call i32 (...)* @_ssdm_op_SpecRegionBegin([10 x i8]* @p_str1813)

ST_9: INPUT_BANK [1/1] 1.37ns
.preheader12:10  %INPUT_BANK = xor i1 %tmp_3, %tmp_4

ST_9: tmp1 [1/1] 0.00ns (grouped into LUT with out node OUTPUT_BANK)
.preheader12:11  %tmp1 = xor i1 %tmp_4, true

ST_9: OUTPUT_BANK [1/1] 1.37ns (out node of the LUT)
.preheader12:12  %OUTPUT_BANK = xor i1 %tmp_3, %tmp1

ST_9: tmp_8_cast1 [1/1] 1.37ns
.preheader12:13  %tmp_8_cast1 = select i1 %INPUT_BANK, i10 392, i10 0

ST_9: tmp_8_cast [1/1] 1.37ns
.preheader12:14  %tmp_8_cast = select i1 %INPUT_BANK, i64 392, i64 0

ST_9: diag2_i_addr_1 [1/1] 0.00ns
.preheader12:15  %diag2_i_addr_1 = getelementptr [784 x i32]* %diag2_i, i64 0, i64 %tmp_8_cast

ST_9: tmp_9_cast [1/1] 1.37ns
.preheader12:16  %tmp_9_cast = select i1 %INPUT_BANK, i64 783, i64 391

ST_9: diag2_i_addr_4 [1/1] 0.00ns
.preheader12:17  %diag2_i_addr_4 = getelementptr [784 x i32]* %diag2_i, i64 0, i64 %tmp_9_cast

ST_9: diag1_i_addr_1 [1/1] 0.00ns
.preheader12:18  %diag1_i_addr_1 = getelementptr [784 x i32]* %diag1_i, i64 0, i64 %tmp_8_cast

ST_9: diag1_i_addr_5 [1/1] 0.00ns
.preheader12:19  %diag1_i_addr_5 = getelementptr [784 x i32]* %diag1_i, i64 0, i64 %tmp_9_cast

ST_9: tmp_10_cast1 [1/1] 1.37ns
.preheader12:20  %tmp_10_cast1 = select i1 %OUTPUT_BANK, i10 392, i10 0

ST_9: tmp_10_cast [1/1] 1.37ns
.preheader12:21  %tmp_10_cast = select i1 %OUTPUT_BANK, i64 392, i64 0

ST_9: tmp_12_cast [1/1] 1.37ns
.preheader12:22  %tmp_12_cast = select i1 %OUTPUT_BANK, i64 783, i64 391

ST_9: diag2_i_addr_3 [1/1] 0.00ns
.preheader12:23  %diag2_i_addr_3 = getelementptr [784 x i32]* %diag2_i, i64 0, i64 %tmp_12_cast

ST_9: tmp_14_cast [1/1] 1.37ns
.preheader12:24  %tmp_14_cast = select i1 %OUTPUT_BANK, i64 782, i64 390

ST_9: diag2_i_addr_5 [1/1] 0.00ns
.preheader12:25  %diag2_i_addr_5 = getelementptr [784 x i32]* %diag2_i, i64 0, i64 %tmp_14_cast

ST_9: diag1_i_addr_2 [1/1] 0.00ns
.preheader12:26  %diag1_i_addr_2 = getelementptr [784 x i32]* %diag1_i, i64 0, i64 %tmp_10_cast

ST_9: tmp_15_cast [1/1] 1.37ns
.preheader12:27  %tmp_15_cast = select i1 %OUTPUT_BANK, i64 393, i64 1

ST_9: diag1_i_addr_3 [1/1] 0.00ns
.preheader12:28  %diag1_i_addr_3 = getelementptr [784 x i32]* %diag1_i, i64 0, i64 %tmp_15_cast

ST_9: stg_298 [1/1] 1.57ns
.preheader12:29  br label %5


 <State 10>: 4.55ns
ST_10: px [1/1] 0.00ns
:0  %px = phi i9 [ 0, %.preheader12 ], [ %px_1, %12 ]

ST_10: exitcond5 [1/1] 2.03ns
:1  %exitcond5 = icmp eq i9 %px, -120

ST_10: empty_11 [1/1] 0.00ns
:2  %empty_11 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 392, i64 392, i64 392)

ST_10: px_1 [1/1] 1.84ns
:3  %px_1 = add i9 %px, 1

ST_10: stg_303 [1/1] 1.57ns
:4  br i1 %exitcond5, label %.preheader11, label %6

ST_10: stg_304 [1/1] 0.00ns
:0  call void (...)* @_ssdm_op_SpecLoopName([18 x i8]* @p_str1814) nounwind

ST_10: tmp_17 [1/1] 2.03ns
:1  %tmp_17 = icmp eq i9 %px, 0

ST_10: stg_306 [1/1] 0.00ns
:2  br i1 %tmp_17, label %7, label %8

ST_10: tmp_18 [1/1] 2.03ns
:0  %tmp_18 = icmp eq i9 %px, -121

ST_10: stg_308 [1/1] 0.00ns
:1  br i1 %tmp_18, label %9, label %10

ST_10: tmp_23_cast [1/1] 0.00ns
:0  %tmp_23_cast = zext i9 %px to i10

ST_10: tmp_47 [1/1] 1.84ns
:1  %tmp_47 = add i10 %tmp_8_cast1, %tmp_23_cast

ST_10: tmp_141_cast [1/1] 0.00ns
:2  %tmp_141_cast = zext i10 %tmp_47 to i64

ST_10: diag2_i_addr_6 [1/1] 0.00ns
:3  %diag2_i_addr_6 = getelementptr [784 x i32]* %diag2_i, i64 0, i64 %tmp_141_cast

ST_10: diag1_i_addr_6 [1/1] 0.00ns
:4  %diag1_i_addr_6 = getelementptr [784 x i32]* %diag1_i, i64 0, i64 %tmp_141_cast

ST_10: diag1_i_load_3 [2/2] 2.71ns
:5  %diag1_i_load_3 = load i32* %diag1_i_addr_6, align 4

ST_10: tmp_25_cast [1/1] 0.00ns
:6  %tmp_25_cast = zext i9 %px_1 to i10

ST_10: tmp_48 [1/1] 1.84ns
:7  %tmp_48 = add i10 %tmp_10_cast1, %tmp_25_cast

ST_10: diag2_i_load_3 [2/2] 2.71ns
:11  %diag2_i_load_3 = load i32* %diag2_i_addr_6, align 4

ST_10: tmp_26 [1/1] 1.84ns
:12  %tmp_26 = add i9 %px, -1

ST_10: tmp_27_cast [1/1] 0.00ns
:13  %tmp_27_cast = zext i9 %tmp_26 to i10

ST_10: tmp_55 [1/1] 1.84ns
:14  %tmp_55 = add i10 %tmp_10_cast1, %tmp_27_cast

ST_10: diag1_i_load_2 [2/2] 2.71ns
:0  %diag1_i_load_2 = load i32* %diag1_i_addr_5, align 4

ST_10: diag1_i_load [2/2] 2.71ns
:0  %diag1_i_load = load i32* %diag1_i_addr_1, align 16


 <State 11>: 5.42ns
ST_11: diag1_i_load_3 [1/2] 2.71ns
:5  %diag1_i_load_3 = load i32* %diag1_i_addr_6, align 4

ST_11: tmp_142_cast [1/1] 0.00ns
:8  %tmp_142_cast = zext i10 %tmp_48 to i64

ST_11: diag1_i_addr_7 [1/1] 0.00ns
:9  %diag1_i_addr_7 = getelementptr [784 x i32]* %diag1_i, i64 0, i64 %tmp_142_cast

ST_11: stg_326 [1/1] 2.71ns
:10  store i32 %diag1_i_load_3, i32* %diag1_i_addr_7, align 4

ST_11: diag2_i_load_3 [1/2] 2.71ns
:11  %diag2_i_load_3 = load i32* %diag2_i_addr_6, align 4

ST_11: tmp_143_cast [1/1] 0.00ns
:15  %tmp_143_cast = zext i10 %tmp_55 to i64

ST_11: diag2_i_addr_7 [1/1] 0.00ns
:16  %diag2_i_addr_7 = getelementptr [784 x i32]* %diag2_i, i64 0, i64 %tmp_143_cast

ST_11: stg_330 [1/1] 2.71ns
:17  store i32 %diag2_i_load_3, i32* %diag2_i_addr_7, align 4

ST_11: stg_331 [1/1] 0.00ns
:18  br label %11


 <State 12>: 5.42ns
ST_12: diag1_i_load_2 [1/2] 2.71ns
:0  %diag1_i_load_2 = load i32* %diag1_i_addr_5, align 4

ST_12: stg_333 [1/1] 2.71ns
:1  store i32 %diag1_i_load_2, i32* %diag2_i_addr_3, align 4


 <State 13>: 2.71ns
ST_13: diag2_i_load_2 [2/2] 2.71ns
:2  %diag2_i_load_2 = load i32* %diag2_i_addr_4, align 4


 <State 14>: 5.42ns
ST_14: diag2_i_load_2 [1/2] 2.71ns
:2  %diag2_i_load_2 = load i32* %diag2_i_addr_4, align 4

ST_14: stg_336 [1/1] 2.71ns
:3  store i32 %diag2_i_load_2, i32* %diag2_i_addr_5, align 8

ST_14: stg_337 [1/1] 0.00ns
:4  br label %11

ST_14: stg_338 [1/1] 0.00ns
:0  br label %12

ST_14: stg_339 [1/1] 0.00ns
:0  br label %5


 <State 15>: 5.42ns
ST_15: diag1_i_load [1/2] 2.71ns
:0  %diag1_i_load = load i32* %diag1_i_addr_1, align 16

ST_15: stg_341 [1/1] 2.71ns
:1  store i32 %diag1_i_load, i32* %diag1_i_addr_2, align 16

ST_15: diag2_i_load [2/2] 2.71ns
:2  %diag2_i_load = load i32* %diag2_i_addr_1, align 16


 <State 16>: 5.42ns
ST_16: diag2_i_load [1/2] 2.71ns
:2  %diag2_i_load = load i32* %diag2_i_addr_1, align 16

ST_16: stg_344 [1/1] 2.71ns
:3  store i32 %diag2_i_load, i32* %diag1_i_addr_3, align 4

ST_16: stg_345 [1/1] 0.00ns
:4  br label %12


 <State 17>: 4.55ns
ST_17: px1 [1/1] 0.00ns
.preheader11:0  %px1 = phi i9 [ %px_3, %"svd2x2<float, float, float>.exit" ], [ 0, %5 ]

ST_17: exitcond4 [1/1] 2.03ns
.preheader11:1  %exitcond4 = icmp eq i9 %px1, -120

ST_17: px_3 [1/1] 1.84ns
.preheader11:2  %px_3 = add i9 %px1, 1

ST_17: stg_349 [1/1] 0.00ns
.preheader11:3  br i1 %exitcond4, label %.preheader10.preheader, label %_ifconv

ST_17: tmp_21_cast [1/1] 0.00ns
_ifconv:5  %tmp_21_cast = zext i9 %px1 to i10

ST_17: tmp_27 [1/1] 1.84ns
_ifconv:6  %tmp_27 = add i10 %tmp_8_cast1, %tmp_21_cast

ST_17: tmp_135_cast [1/1] 0.00ns
_ifconv:7  %tmp_135_cast = zext i10 %tmp_27 to i64

ST_17: diag2_i_addr_2 [1/1] 0.00ns
_ifconv:8  %diag2_i_addr_2 = getelementptr [784 x i32]* %diag2_i, i64 0, i64 %tmp_135_cast

ST_17: diag1_i_addr_4 [1/1] 0.00ns
_ifconv:12  %diag1_i_addr_4 = getelementptr [784 x i32]* %diag1_i, i64 0, i64 %tmp_135_cast

ST_17: d1_i_3 [2/2] 2.71ns
_ifconv:13  %d1_i_3 = load i32* %diag1_i_addr_4, align 4

ST_17: d2_i [2/2] 2.71ns
_ifconv:14  %d2_i = load i32* %diag2_i_addr_2, align 4


 <State 18>: 8.58ns
ST_18: tmp_28 [1/1] 0.00ns
_ifconv:9  %tmp_28 = call i10 @_ssdm_op_BitConcatenate.i10.i9.i1(i9 %px1, i1 %INPUT_BANK)

ST_18: tmp_137_cast [1/1] 0.00ns
_ifconv:10  %tmp_137_cast = zext i10 %tmp_28 to i21

ST_18: tmp_29 [1/1] 6.38ns
_ifconv:11  %tmp_29 = mul i21 784, %tmp_137_cast

ST_18: d1_i_3 [1/2] 2.71ns
_ifconv:13  %d1_i_3 = load i32* %diag1_i_addr_4, align 4

ST_18: d2_i [1/2] 2.71ns
_ifconv:14  %d2_i = load i32* %diag2_i_addr_2, align 4

ST_18: tmp_22 [1/1] 2.52ns
_ifconv:15  %tmp_22 = icmp slt i32 %d1_i_3, %d2_i

ST_18: tmp_30 [1/1] 0.00ns
_ifconv:16  %tmp_30 = trunc i32 %d1_i_3 to i21

ST_18: tmp_31 [1/1] 0.00ns
_ifconv:17  %tmp_31 = trunc i32 %d2_i to i21

ST_18: tmp_32 [1/1] 0.00ns (grouped into LUT with out node tmp_33)
_ifconv:18  %tmp_32 = select i1 %tmp_22, i21 %tmp_30, i21 %tmp_31

ST_18: tmp_33 [1/1] 2.20ns (out node of the LUT)
_ifconv:19  %tmp_33 = add i21 %tmp_29, %tmp_32

ST_18: tmp_35 [1/1] 0.00ns (grouped into LUT with out node tmp_37)
_ifconv:25  %tmp_35 = select i1 %tmp_22, i21 %tmp_31, i21 %tmp_30

ST_18: tmp_37 [1/1] 2.20ns (out node of the LUT)
_ifconv:26  %tmp_37 = add i21 %tmp_29, %tmp_35


 <State 19>: 2.61ns
ST_19: tmp_139_cast [1/1] 0.00ns
_ifconv:20  %tmp_139_cast = sext i21 %tmp_33 to i64

ST_19: s_col1_addr_2 [1/1] 0.00ns
_ifconv:21  %s_col1_addr_2 = getelementptr [614656 x float]* %s_col1, i64 0, i64 %tmp_139_cast

ST_19: s_col2_addr_2 [1/1] 0.00ns
_ifconv:22  %s_col2_addr_2 = getelementptr [614656 x float]* %s_col2, i64 0, i64 %tmp_139_cast

ST_19: w_in_7 [4/4] 2.61ns
_ifconv:23  %w_in_7 = load float* %s_col1_addr_2, align 4

ST_19: x_in [4/4] 2.61ns
_ifconv:24  %x_in = load float* %s_col2_addr_2, align 4

ST_19: tmp_140_cast [1/1] 0.00ns
_ifconv:27  %tmp_140_cast = sext i21 %tmp_37 to i64

ST_19: s_col1_addr_3 [1/1] 0.00ns
_ifconv:28  %s_col1_addr_3 = getelementptr [614656 x float]* %s_col1, i64 0, i64 %tmp_140_cast

ST_19: s_col2_addr_3 [1/1] 0.00ns
_ifconv:29  %s_col2_addr_3 = getelementptr [614656 x float]* %s_col2, i64 0, i64 %tmp_140_cast

ST_19: y_in_7 [4/4] 2.61ns
_ifconv:30  %y_in_7 = load float* %s_col1_addr_3, align 4

ST_19: z_in [4/4] 2.61ns
_ifconv:31  %z_in = load float* %s_col2_addr_3, align 4


 <State 20>: 2.61ns
ST_20: w_in_7 [3/4] 2.61ns
_ifconv:23  %w_in_7 = load float* %s_col1_addr_2, align 4

ST_20: x_in [3/4] 2.61ns
_ifconv:24  %x_in = load float* %s_col2_addr_2, align 4

ST_20: y_in_7 [3/4] 2.61ns
_ifconv:30  %y_in_7 = load float* %s_col1_addr_3, align 4

ST_20: z_in [3/4] 2.61ns
_ifconv:31  %z_in = load float* %s_col2_addr_3, align 4


 <State 21>: 2.61ns
ST_21: w_in_7 [2/4] 2.61ns
_ifconv:23  %w_in_7 = load float* %s_col1_addr_2, align 4

ST_21: x_in [2/4] 2.61ns
_ifconv:24  %x_in = load float* %s_col2_addr_2, align 4

ST_21: y_in_7 [2/4] 2.61ns
_ifconv:30  %y_in_7 = load float* %s_col1_addr_3, align 4

ST_21: z_in [2/4] 2.61ns
_ifconv:31  %z_in = load float* %s_col2_addr_3, align 4


 <State 22>: 3.98ns
ST_22: w_in_7 [1/4] 2.61ns
_ifconv:23  %w_in_7 = load float* %s_col1_addr_2, align 4

ST_22: x_in [1/4] 2.61ns
_ifconv:24  %x_in = load float* %s_col2_addr_2, align 4

ST_22: y_in_7 [1/4] 2.61ns
_ifconv:30  %y_in_7 = load float* %s_col1_addr_3, align 4

ST_22: z_in [1/4] 2.61ns
_ifconv:31  %z_in = load float* %s_col2_addr_3, align 4

ST_22: z_in_1 [1/1] 1.37ns
_ifconv:32  %z_in_1 = select i1 %tmp_22, float %z_in, float %y_in_7

ST_22: y_in [1/1] 1.37ns
_ifconv:33  %y_in = select i1 %tmp_22, float %y_in_7, float %z_in

ST_22: x_in_1 [1/1] 1.37ns
_ifconv:34  %x_in_1 = select i1 %tmp_22, float %x_in, float %w_in_7

ST_22: w_in [1/1] 1.37ns
_ifconv:35  %w_in = select i1 %tmp_22, float %w_in_7, float %x_in


 <State 23>: 7.26ns
ST_23: u1 [5/5] 7.26ns
_ifconv:48  %u1 = fsub float %z_in_1, %w_in

ST_23: u2 [5/5] 7.26ns
_ifconv:49  %u2 = fadd float %y_in, %x_in_1

ST_23: u1_1 [5/5] 7.26ns
calc_angle<float, float>.exit:2  %u1_1 = fadd float %z_in_1, %w_in


 <State 24>: 7.26ns
ST_24: u1 [4/5] 7.26ns
_ifconv:48  %u1 = fsub float %z_in_1, %w_in

ST_24: u2 [4/5] 7.26ns
_ifconv:49  %u2 = fadd float %y_in, %x_in_1

ST_24: u1_1 [4/5] 7.26ns
calc_angle<float, float>.exit:2  %u1_1 = fadd float %z_in_1, %w_in

ST_24: u2_1 [5/5] 7.26ns
calc_angle<float, float>.exit:3  %u2_1 = fsub float %y_in, %x_in_1


 <State 25>: 7.26ns
ST_25: u1 [3/5] 7.26ns
_ifconv:48  %u1 = fsub float %z_in_1, %w_in

ST_25: u2 [3/5] 7.26ns
_ifconv:49  %u2 = fadd float %y_in, %x_in_1

ST_25: u1_1 [3/5] 7.26ns
calc_angle<float, float>.exit:2  %u1_1 = fadd float %z_in_1, %w_in

ST_25: u2_1 [4/5] 7.26ns
calc_angle<float, float>.exit:3  %u2_1 = fsub float %y_in, %x_in_1


 <State 26>: 7.26ns
ST_26: u1 [2/5] 7.26ns
_ifconv:48  %u1 = fsub float %z_in_1, %w_in

ST_26: u2 [2/5] 7.26ns
_ifconv:49  %u2 = fadd float %y_in, %x_in_1

ST_26: u1_1 [2/5] 7.26ns
calc_angle<float, float>.exit:2  %u1_1 = fadd float %z_in_1, %w_in

ST_26: u2_1 [3/5] 7.26ns
calc_angle<float, float>.exit:3  %u2_1 = fsub float %y_in, %x_in_1


 <State 27>: 7.26ns
ST_27: u1 [1/5] 7.26ns
_ifconv:48  %u1 = fsub float %z_in_1, %w_in

ST_27: u2 [1/5] 7.26ns
_ifconv:49  %u2 = fadd float %y_in, %x_in_1

ST_27: u1_1 [1/5] 7.26ns
calc_angle<float, float>.exit:2  %u1_1 = fadd float %z_in_1, %w_in

ST_27: u2_1 [2/5] 7.26ns
calc_angle<float, float>.exit:3  %u2_1 = fsub float %y_in, %x_in_1


 <State 28>: 7.26ns
ST_28: p_Val2_s [1/1] 0.00ns
_ifconv:50  %p_Val2_s = bitcast float %u1 to i32

ST_28: p_Result_s [1/1] 0.00ns
_ifconv:51  %p_Result_s = call i1 @_ssdm_op_BitSelect.i1.i32.i32(i32 %p_Val2_s, i32 31)

ST_28: loc_V [1/1] 0.00ns
_ifconv:52  %loc_V = call i8 @_ssdm_op_PartSelect.i8.i32.i32.i32(i32 %p_Val2_s, i32 23, i32 30)

ST_28: p_Val2_3 [1/1] 0.00ns
_ifconv:53  %p_Val2_3 = bitcast float %u2 to i32

ST_28: p_Result_15 [1/1] 0.00ns
_ifconv:54  %p_Result_15 = call i1 @_ssdm_op_BitSelect.i1.i32.i32(i32 %p_Val2_3, i32 31)

ST_28: loc_V_1 [1/1] 0.00ns
_ifconv:55  %loc_V_1 = call i8 @_ssdm_op_PartSelect.i8.i32.i32.i32(i32 %p_Val2_3, i32 23, i32 30)

ST_28: lhs_V_cast [1/1] 0.00ns
_ifconv:56  %lhs_V_cast = zext i8 %loc_V_1 to i9

ST_28: r_V [1/1] 1.72ns
_ifconv:57  %r_V = add i9 24, %lhs_V_cast

ST_28: tmp_41_cast [1/1] 0.00ns
_ifconv:58  %tmp_41_cast = zext i8 %loc_V to i9

ST_28: tmp_40 [1/1] 2.03ns
_ifconv:59  %tmp_40 = icmp ult i9 %r_V, %tmp_41_cast

ST_28: tmp_41 [1/1] 2.00ns
_ifconv:60  %tmp_41 = icmp eq i8 %loc_V_1, 0

ST_28: or_cond [1/1] 1.37ns
_ifconv:61  %or_cond = or i1 %tmp_40, %tmp_41

ST_28: stg_426 [1/1] 0.00ns
_ifconv:62  br i1 %or_cond, label %.critedge, label %"within_precision<float>.exit"

ST_28: r_V_1 [1/1] 1.72ns
within_precision<float>.exit:0  %r_V_1 = add i9 %tmp_41_cast, 24

ST_28: tmp_43 [1/1] 2.03ns
within_precision<float>.exit:1  %tmp_43 = icmp ult i9 %r_V_1, %lhs_V_cast

ST_28: tmp_46 [1/1] 2.00ns
within_precision<float>.exit:2  %tmp_46 = icmp eq i8 %loc_V, 0

ST_28: or_cond1 [1/1] 1.37ns
within_precision<float>.exit:3  %or_cond1 = or i1 %tmp_43, %tmp_46

ST_28: stg_431 [1/1] 0.00ns
within_precision<float>.exit:4  br i1 %or_cond1, label %.critedge294, label %"within_precision<float>.exit111"

ST_28: tanThetaA [16/16] 6.08ns
within_precision<float>.exit111:0  %tanThetaA = fdiv float %u2, %u1

ST_28: u2_1 [1/5] 7.26ns
calc_angle<float, float>.exit:3  %u2_1 = fsub float %y_in, %x_in_1


 <State 29>: 6.08ns
ST_29: tanThetaA [15/16] 6.08ns
within_precision<float>.exit111:0  %tanThetaA = fdiv float %u2, %u1

ST_29: p_Val2_12 [1/1] 0.00ns
calc_angle<float, float>.exit:4  %p_Val2_12 = bitcast float %u1_1 to i32

ST_29: p_Result_10 [1/1] 0.00ns
calc_angle<float, float>.exit:5  %p_Result_10 = call i1 @_ssdm_op_BitSelect.i1.i32.i32(i32 %p_Val2_12, i32 31)

ST_29: loc_V_2 [1/1] 0.00ns
calc_angle<float, float>.exit:6  %loc_V_2 = call i8 @_ssdm_op_PartSelect.i8.i32.i32.i32(i32 %p_Val2_12, i32 23, i32 30)

ST_29: p_Val2_11 [1/1] 0.00ns
calc_angle<float, float>.exit:7  %p_Val2_11 = bitcast float %u2_1 to i32

ST_29: p_Result_18 [1/1] 0.00ns
calc_angle<float, float>.exit:8  %p_Result_18 = call i1 @_ssdm_op_BitSelect.i1.i32.i32(i32 %p_Val2_11, i32 31)

ST_29: loc_V_3 [1/1] 0.00ns
calc_angle<float, float>.exit:9  %loc_V_3 = call i8 @_ssdm_op_PartSelect.i8.i32.i32.i32(i32 %p_Val2_11, i32 23, i32 30)

ST_29: lhs_V_4_cast [1/1] 0.00ns
calc_angle<float, float>.exit:10  %lhs_V_4_cast = zext i8 %loc_V_3 to i9

ST_29: r_V_2 [1/1] 1.72ns
calc_angle<float, float>.exit:11  %r_V_2 = add i9 %lhs_V_4_cast, 24

ST_29: tmp_64_cast [1/1] 0.00ns
calc_angle<float, float>.exit:12  %tmp_64_cast = zext i8 %loc_V_2 to i9

ST_29: tmp_65 [1/1] 2.03ns
calc_angle<float, float>.exit:13  %tmp_65 = icmp ult i9 %r_V_2, %tmp_64_cast

ST_29: tmp_66 [1/1] 2.00ns
calc_angle<float, float>.exit:14  %tmp_66 = icmp eq i8 %loc_V_3, 0

ST_29: or_cond2 [1/1] 1.37ns
calc_angle<float, float>.exit:15  %or_cond2 = or i1 %tmp_65, %tmp_66

ST_29: stg_447 [1/1] 0.00ns
calc_angle<float, float>.exit:16  br i1 %or_cond2, label %.critedge295, label %"within_precision<float>.exit166"

ST_29: r_V_3 [1/1] 1.72ns
within_precision<float>.exit166:0  %r_V_3 = add i9 %tmp_64_cast, 24

ST_29: tmp_72 [1/1] 2.03ns
within_precision<float>.exit166:1  %tmp_72 = icmp ult i9 %r_V_3, %lhs_V_4_cast

ST_29: tmp_74 [1/1] 2.00ns
within_precision<float>.exit166:2  %tmp_74 = icmp eq i8 %loc_V_2, 0

ST_29: or_cond3 [1/1] 1.37ns
within_precision<float>.exit166:3  %or_cond3 = or i1 %tmp_72, %tmp_74

ST_29: stg_452 [1/1] 0.00ns
within_precision<float>.exit166:4  br i1 %or_cond3, label %.critedge296, label %"within_precision<float>.exit208"

ST_29: tanThetaA_1 [16/16] 6.08ns
within_precision<float>.exit208:0  %tanThetaA_1 = fdiv float %u2_1, %u1_1


 <State 30>: 6.08ns
ST_30: tanThetaA [14/16] 6.08ns
within_precision<float>.exit111:0  %tanThetaA = fdiv float %u2, %u1

ST_30: tanThetaA_1 [15/16] 6.08ns
within_precision<float>.exit208:0  %tanThetaA_1 = fdiv float %u2_1, %u1_1


 <State 31>: 6.08ns
ST_31: tanThetaA [13/16] 6.08ns
within_precision<float>.exit111:0  %tanThetaA = fdiv float %u2, %u1

ST_31: tanThetaA_1 [14/16] 6.08ns
within_precision<float>.exit208:0  %tanThetaA_1 = fdiv float %u2_1, %u1_1


 <State 32>: 6.08ns
ST_32: tanThetaA [12/16] 6.08ns
within_precision<float>.exit111:0  %tanThetaA = fdiv float %u2, %u1

ST_32: tanThetaA_1 [13/16] 6.08ns
within_precision<float>.exit208:0  %tanThetaA_1 = fdiv float %u2_1, %u1_1


 <State 33>: 6.08ns
ST_33: tanThetaA [11/16] 6.08ns
within_precision<float>.exit111:0  %tanThetaA = fdiv float %u2, %u1

ST_33: tanThetaA_1 [12/16] 6.08ns
within_precision<float>.exit208:0  %tanThetaA_1 = fdiv float %u2_1, %u1_1


 <State 34>: 6.08ns
ST_34: tanThetaA [10/16] 6.08ns
within_precision<float>.exit111:0  %tanThetaA = fdiv float %u2, %u1

ST_34: tanThetaA_1 [11/16] 6.08ns
within_precision<float>.exit208:0  %tanThetaA_1 = fdiv float %u2_1, %u1_1


 <State 35>: 6.08ns
ST_35: tanThetaA [9/16] 6.08ns
within_precision<float>.exit111:0  %tanThetaA = fdiv float %u2, %u1

ST_35: tanThetaA_1 [10/16] 6.08ns
within_precision<float>.exit208:0  %tanThetaA_1 = fdiv float %u2_1, %u1_1


 <State 36>: 6.08ns
ST_36: tanThetaA [8/16] 6.08ns
within_precision<float>.exit111:0  %tanThetaA = fdiv float %u2, %u1

ST_36: tanThetaA_1 [9/16] 6.08ns
within_precision<float>.exit208:0  %tanThetaA_1 = fdiv float %u2_1, %u1_1


 <State 37>: 6.08ns
ST_37: tanThetaA [7/16] 6.08ns
within_precision<float>.exit111:0  %tanThetaA = fdiv float %u2, %u1

ST_37: tanThetaA_1 [8/16] 6.08ns
within_precision<float>.exit208:0  %tanThetaA_1 = fdiv float %u2_1, %u1_1


 <State 38>: 6.08ns
ST_38: tanThetaA [6/16] 6.08ns
within_precision<float>.exit111:0  %tanThetaA = fdiv float %u2, %u1

ST_38: tanThetaA_1 [7/16] 6.08ns
within_precision<float>.exit208:0  %tanThetaA_1 = fdiv float %u2_1, %u1_1


 <State 39>: 6.08ns
ST_39: tanThetaA [5/16] 6.08ns
within_precision<float>.exit111:0  %tanThetaA = fdiv float %u2, %u1

ST_39: tanThetaA_1 [6/16] 6.08ns
within_precision<float>.exit208:0  %tanThetaA_1 = fdiv float %u2_1, %u1_1


 <State 40>: 6.08ns
ST_40: tanThetaA [4/16] 6.08ns
within_precision<float>.exit111:0  %tanThetaA = fdiv float %u2, %u1

ST_40: tanThetaA_1 [5/16] 6.08ns
within_precision<float>.exit208:0  %tanThetaA_1 = fdiv float %u2_1, %u1_1


 <State 41>: 6.08ns
ST_41: tanThetaA [3/16] 6.08ns
within_precision<float>.exit111:0  %tanThetaA = fdiv float %u2, %u1

ST_41: tanThetaA_1 [4/16] 6.08ns
within_precision<float>.exit208:0  %tanThetaA_1 = fdiv float %u2_1, %u1_1


 <State 42>: 6.08ns
ST_42: tanThetaA [2/16] 6.08ns
within_precision<float>.exit111:0  %tanThetaA = fdiv float %u2, %u1

ST_42: tanThetaA_1 [3/16] 6.08ns
within_precision<float>.exit208:0  %tanThetaA_1 = fdiv float %u2_1, %u1_1


 <State 43>: 6.08ns
ST_43: tanThetaA [1/16] 6.08ns
within_precision<float>.exit111:0  %tanThetaA = fdiv float %u2, %u1

ST_43: tanThetaA_1 [2/16] 6.08ns
within_precision<float>.exit208:0  %tanThetaA_1 = fdiv float %u2_1, %u1_1


 <State 44>: 6.08ns
ST_44: tmp_49 [4/4] 5.70ns
within_precision<float>.exit111:3  %tmp_49 = fmul float %tanThetaA, %tanThetaA

ST_44: tanThetaA_1 [1/16] 6.08ns
within_precision<float>.exit208:0  %tanThetaA_1 = fdiv float %u2_1, %u1_1


 <State 45>: 5.70ns
ST_45: tmp_49 [3/4] 5.70ns
within_precision<float>.exit111:3  %tmp_49 = fmul float %tanThetaA, %tanThetaA

ST_45: tmp_83 [4/4] 5.70ns
within_precision<float>.exit208:3  %tmp_83 = fmul float %tanThetaA_1, %tanThetaA_1


 <State 46>: 5.70ns
ST_46: tmp_49 [2/4] 5.70ns
within_precision<float>.exit111:3  %tmp_49 = fmul float %tanThetaA, %tanThetaA

ST_46: tmp_83 [3/4] 5.70ns
within_precision<float>.exit208:3  %tmp_83 = fmul float %tanThetaA_1, %tanThetaA_1


 <State 47>: 5.70ns
ST_47: tmp_49 [1/4] 5.70ns
within_precision<float>.exit111:3  %tmp_49 = fmul float %tanThetaA, %tanThetaA

ST_47: tmp_83 [2/4] 5.70ns
within_precision<float>.exit208:3  %tmp_83 = fmul float %tanThetaA_1, %tanThetaA_1


 <State 48>: 7.26ns
ST_48: x_assign [5/5] 7.26ns
within_precision<float>.exit111:4  %x_assign = fadd float %tmp_49, 1.000000e+00

ST_48: tmp_83 [1/4] 5.70ns
within_precision<float>.exit208:3  %tmp_83 = fmul float %tanThetaA_1, %tanThetaA_1


 <State 49>: 7.26ns
ST_49: x_assign [4/5] 7.26ns
within_precision<float>.exit111:4  %x_assign = fadd float %tmp_49, 1.000000e+00

ST_49: x_assign_5 [5/5] 7.26ns
within_precision<float>.exit208:4  %x_assign_5 = fadd float %tmp_83, 1.000000e+00


 <State 50>: 7.26ns
ST_50: x_assign [3/5] 7.26ns
within_precision<float>.exit111:4  %x_assign = fadd float %tmp_49, 1.000000e+00

ST_50: x_assign_5 [4/5] 7.26ns
within_precision<float>.exit208:4  %x_assign_5 = fadd float %tmp_83, 1.000000e+00


 <State 51>: 7.26ns
ST_51: x_assign [2/5] 7.26ns
within_precision<float>.exit111:4  %x_assign = fadd float %tmp_49, 1.000000e+00

ST_51: x_assign_5 [3/5] 7.26ns
within_precision<float>.exit208:4  %x_assign_5 = fadd float %tmp_83, 1.000000e+00


 <State 52>: 7.26ns
ST_52: x_assign [1/5] 7.26ns
within_precision<float>.exit111:4  %x_assign = fadd float %tmp_49, 1.000000e+00

ST_52: x_assign_5 [2/5] 7.26ns
within_precision<float>.exit208:4  %x_assign_5 = fadd float %tmp_83, 1.000000e+00


 <State 53>: 7.26ns
ST_53: tmp_50 [11/11] 7.00ns
within_precision<float>.exit111:5  %tmp_50 = call float @_ssdm_op_FRSqrt(float %x_assign) nounwind

ST_53: x_assign_5 [1/5] 7.26ns
within_precision<float>.exit208:4  %x_assign_5 = fadd float %tmp_83, 1.000000e+00


 <State 54>: 7.00ns
ST_54: tmp_50 [10/11] 7.00ns
within_precision<float>.exit111:5  %tmp_50 = call float @_ssdm_op_FRSqrt(float %x_assign) nounwind

ST_54: tmp_84 [11/11] 7.00ns
within_precision<float>.exit208:5  %tmp_84 = call float @_ssdm_op_FRSqrt(float %x_assign_5) nounwind


 <State 55>: 7.00ns
ST_55: tmp_50 [9/11] 7.00ns
within_precision<float>.exit111:5  %tmp_50 = call float @_ssdm_op_FRSqrt(float %x_assign) nounwind

ST_55: tmp_84 [10/11] 7.00ns
within_precision<float>.exit208:5  %tmp_84 = call float @_ssdm_op_FRSqrt(float %x_assign_5) nounwind


 <State 56>: 7.00ns
ST_56: tmp_50 [8/11] 7.00ns
within_precision<float>.exit111:5  %tmp_50 = call float @_ssdm_op_FRSqrt(float %x_assign) nounwind

ST_56: tmp_84 [9/11] 7.00ns
within_precision<float>.exit208:5  %tmp_84 = call float @_ssdm_op_FRSqrt(float %x_assign_5) nounwind


 <State 57>: 7.00ns
ST_57: tmp_50 [7/11] 7.00ns
within_precision<float>.exit111:5  %tmp_50 = call float @_ssdm_op_FRSqrt(float %x_assign) nounwind

ST_57: tmp_84 [8/11] 7.00ns
within_precision<float>.exit208:5  %tmp_84 = call float @_ssdm_op_FRSqrt(float %x_assign_5) nounwind


 <State 58>: 7.00ns
ST_58: tmp_50 [6/11] 7.00ns
within_precision<float>.exit111:5  %tmp_50 = call float @_ssdm_op_FRSqrt(float %x_assign) nounwind

ST_58: tmp_84 [7/11] 7.00ns
within_precision<float>.exit208:5  %tmp_84 = call float @_ssdm_op_FRSqrt(float %x_assign_5) nounwind


 <State 59>: 7.00ns
ST_59: tmp_50 [5/11] 7.00ns
within_precision<float>.exit111:5  %tmp_50 = call float @_ssdm_op_FRSqrt(float %x_assign) nounwind

ST_59: tmp_84 [6/11] 7.00ns
within_precision<float>.exit208:5  %tmp_84 = call float @_ssdm_op_FRSqrt(float %x_assign_5) nounwind


 <State 60>: 7.00ns
ST_60: tmp_50 [4/11] 7.00ns
within_precision<float>.exit111:5  %tmp_50 = call float @_ssdm_op_FRSqrt(float %x_assign) nounwind

ST_60: tmp_84 [5/11] 7.00ns
within_precision<float>.exit208:5  %tmp_84 = call float @_ssdm_op_FRSqrt(float %x_assign_5) nounwind


 <State 61>: 7.00ns
ST_61: tmp_50 [3/11] 7.00ns
within_precision<float>.exit111:5  %tmp_50 = call float @_ssdm_op_FRSqrt(float %x_assign) nounwind

ST_61: tmp_84 [4/11] 7.00ns
within_precision<float>.exit208:5  %tmp_84 = call float @_ssdm_op_FRSqrt(float %x_assign_5) nounwind


 <State 62>: 7.00ns
ST_62: tmp_50 [2/11] 7.00ns
within_precision<float>.exit111:5  %tmp_50 = call float @_ssdm_op_FRSqrt(float %x_assign) nounwind

ST_62: tmp_84 [3/11] 7.00ns
within_precision<float>.exit208:5  %tmp_84 = call float @_ssdm_op_FRSqrt(float %x_assign_5) nounwind


 <State 63>: 7.00ns
ST_63: tmp_50 [1/11] 7.00ns
within_precision<float>.exit111:5  %tmp_50 = call float @_ssdm_op_FRSqrt(float %x_assign) nounwind

ST_63: tmp_84 [2/11] 7.00ns
within_precision<float>.exit208:5  %tmp_84 = call float @_ssdm_op_FRSqrt(float %x_assign_5) nounwind


 <State 64>: 7.00ns
ST_64: p_Result_16 [1/1] 0.00ns
within_precision<float>.exit111:1  %p_Result_16 = call i32 @_ssdm_op_BitConcatenate.i32.i1.i31(i1 %p_Result_s, i31 1065353216)

ST_64: ret_0_i [1/1] 0.00ns
within_precision<float>.exit111:2  %ret_0_i = bitcast i32 %p_Result_16 to float

ST_64: cosThetaA_int [4/4] 5.70ns
within_precision<float>.exit111:6  %cosThetaA_int = fmul float %ret_0_i, %tmp_50

ST_64: tmp_84 [1/11] 7.00ns
within_precision<float>.exit208:5  %tmp_84 = call float @_ssdm_op_FRSqrt(float %x_assign_5) nounwind


 <State 65>: 5.70ns
ST_65: cosThetaA_int [3/4] 5.70ns
within_precision<float>.exit111:6  %cosThetaA_int = fmul float %ret_0_i, %tmp_50

ST_65: p_Result_19 [1/1] 0.00ns
within_precision<float>.exit208:1  %p_Result_19 = call i32 @_ssdm_op_BitConcatenate.i32.i1.i31(i1 %p_Result_10, i31 1065353216)

ST_65: ret_0_i1 [1/1] 0.00ns
within_precision<float>.exit208:2  %ret_0_i1 = bitcast i32 %p_Result_19 to float

ST_65: cosThetaA_int_1 [4/4] 5.70ns
within_precision<float>.exit208:6  %cosThetaA_int_1 = fmul float %ret_0_i1, %tmp_84


 <State 66>: 5.70ns
ST_66: cosThetaA_int [2/4] 5.70ns
within_precision<float>.exit111:6  %cosThetaA_int = fmul float %ret_0_i, %tmp_50

ST_66: cosThetaA_int_1 [3/4] 5.70ns
within_precision<float>.exit208:6  %cosThetaA_int_1 = fmul float %ret_0_i1, %tmp_84


 <State 67>: 5.70ns
ST_67: cosThetaA_int [1/4] 5.70ns
within_precision<float>.exit111:6  %cosThetaA_int = fmul float %ret_0_i, %tmp_50

ST_67: cosThetaA_int_1 [2/4] 5.70ns
within_precision<float>.exit208:6  %cosThetaA_int_1 = fmul float %ret_0_i1, %tmp_84


 <State 68>: 7.26ns
ST_68: sinThetaA_int [4/4] 5.70ns
within_precision<float>.exit111:7  %sinThetaA_int = fmul float %cosThetaA_int, %tanThetaA

ST_68: p_Val2_5 [1/1] 0.00ns
within_precision<float>.exit111:8  %p_Val2_5 = bitcast float %cosThetaA_int to i32

ST_68: p_Result_17 [1/1] 0.00ns
within_precision<float>.exit111:9  %p_Result_17 = call i1 @_ssdm_op_BitSelect.i1.i32.i32(i32 %p_Val2_5, i32 31)

ST_68: stg_537 [1/1] 0.00ns
within_precision<float>.exit111:10  br i1 %p_Result_17, label %13, label %14

ST_68: tmp_53 [5/5] 7.26ns
:0  %tmp_53 = fadd float %cosThetaA_int, 1.000000e+00

ST_68: tmp_51 [5/5] 7.26ns
:0  %tmp_51 = fsub float 1.000000e+00, %cosThetaA_int

ST_68: cosThetaA_int_1 [1/4] 5.70ns
within_precision<float>.exit208:6  %cosThetaA_int_1 = fmul float %ret_0_i1, %tmp_84


 <State 69>: 7.26ns
ST_69: sinThetaA_int [3/4] 5.70ns
within_precision<float>.exit111:7  %sinThetaA_int = fmul float %cosThetaA_int, %tanThetaA

ST_69: tmp_53 [4/5] 7.26ns
:0  %tmp_53 = fadd float %cosThetaA_int, 1.000000e+00

ST_69: tmp_51 [4/5] 7.26ns
:0  %tmp_51 = fsub float 1.000000e+00, %cosThetaA_int

ST_69: sinThetaA_int_1 [4/4] 5.70ns
within_precision<float>.exit208:7  %sinThetaA_int_1 = fmul float %cosThetaA_int_1, %tanThetaA_1

ST_69: p_Val2_14 [1/1] 0.00ns
within_precision<float>.exit208:8  %p_Val2_14 = bitcast float %cosThetaA_int_1 to i32

ST_69: p_Result_20 [1/1] 0.00ns
within_precision<float>.exit208:9  %p_Result_20 = call i1 @_ssdm_op_BitSelect.i1.i32.i32(i32 %p_Val2_14, i32 31)

ST_69: stg_547 [1/1] 0.00ns
within_precision<float>.exit208:10  br i1 %p_Result_20, label %16, label %17

ST_69: tmp_95 [5/5] 7.26ns
:0  %tmp_95 = fadd float %cosThetaA_int_1, 1.000000e+00

ST_69: tmp_94 [5/5] 7.26ns
:0  %tmp_94 = fsub float 1.000000e+00, %cosThetaA_int_1


 <State 70>: 7.26ns
ST_70: sinThetaA_int [2/4] 5.70ns
within_precision<float>.exit111:7  %sinThetaA_int = fmul float %cosThetaA_int, %tanThetaA

ST_70: tmp_53 [3/5] 7.26ns
:0  %tmp_53 = fadd float %cosThetaA_int, 1.000000e+00

ST_70: tmp_51 [3/5] 7.26ns
:0  %tmp_51 = fsub float 1.000000e+00, %cosThetaA_int

ST_70: sinThetaA_int_1 [3/4] 5.70ns
within_precision<float>.exit208:7  %sinThetaA_int_1 = fmul float %cosThetaA_int_1, %tanThetaA_1

ST_70: tmp_95 [4/5] 7.26ns
:0  %tmp_95 = fadd float %cosThetaA_int_1, 1.000000e+00

ST_70: tmp_94 [4/5] 7.26ns
:0  %tmp_94 = fsub float 1.000000e+00, %cosThetaA_int_1


 <State 71>: 7.26ns
ST_71: sinThetaA_int [1/4] 5.70ns
within_precision<float>.exit111:7  %sinThetaA_int = fmul float %cosThetaA_int, %tanThetaA

ST_71: tmp_53 [2/5] 7.26ns
:0  %tmp_53 = fadd float %cosThetaA_int, 1.000000e+00

ST_71: tmp_51 [2/5] 7.26ns
:0  %tmp_51 = fsub float 1.000000e+00, %cosThetaA_int

ST_71: sinThetaA_int_1 [2/4] 5.70ns
within_precision<float>.exit208:7  %sinThetaA_int_1 = fmul float %cosThetaA_int_1, %tanThetaA_1

ST_71: tmp_95 [3/5] 7.26ns
:0  %tmp_95 = fadd float %cosThetaA_int_1, 1.000000e+00

ST_71: tmp_94 [3/5] 7.26ns
:0  %tmp_94 = fsub float 1.000000e+00, %cosThetaA_int_1


 <State 72>: 7.26ns
ST_72: tmp_53 [1/5] 7.26ns
:0  %tmp_53 = fadd float %cosThetaA_int, 1.000000e+00

ST_72: tmp_51 [1/5] 7.26ns
:0  %tmp_51 = fsub float 1.000000e+00, %cosThetaA_int

ST_72: sinThetaA_int_1 [1/4] 5.70ns
within_precision<float>.exit208:7  %sinThetaA_int_1 = fmul float %cosThetaA_int_1, %tanThetaA_1

ST_72: tmp_95 [2/5] 7.26ns
:0  %tmp_95 = fadd float %cosThetaA_int_1, 1.000000e+00

ST_72: tmp_94 [2/5] 7.26ns
:0  %tmp_94 = fsub float 1.000000e+00, %cosThetaA_int_1


 <State 73>: 7.26ns
ST_73: tanThetaAdiv2_1 [16/16] 6.08ns
:1  %tanThetaAdiv2_1 = fdiv float %sinThetaA_int, %tmp_53

ST_73: tanThetaAdiv2 [16/16] 6.08ns
:1  %tanThetaAdiv2 = fdiv float %tmp_51, %sinThetaA_int

ST_73: tmp_95 [1/5] 7.26ns
:0  %tmp_95 = fadd float %cosThetaA_int_1, 1.000000e+00

ST_73: tmp_94 [1/5] 7.26ns
:0  %tmp_94 = fsub float 1.000000e+00, %cosThetaA_int_1


 <State 74>: 6.08ns
ST_74: tanThetaAdiv2_1 [15/16] 6.08ns
:1  %tanThetaAdiv2_1 = fdiv float %sinThetaA_int, %tmp_53

ST_74: tanThetaAdiv2 [15/16] 6.08ns
:1  %tanThetaAdiv2 = fdiv float %tmp_51, %sinThetaA_int

ST_74: tanThetaAdiv2_3 [16/16] 6.08ns
:1  %tanThetaAdiv2_3 = fdiv float %sinThetaA_int_1, %tmp_95

ST_74: tanThetaAdiv2_2 [16/16] 6.08ns
:1  %tanThetaAdiv2_2 = fdiv float %tmp_94, %sinThetaA_int_1


 <State 75>: 6.08ns
ST_75: tanThetaAdiv2_1 [14/16] 6.08ns
:1  %tanThetaAdiv2_1 = fdiv float %sinThetaA_int, %tmp_53

ST_75: tanThetaAdiv2 [14/16] 6.08ns
:1  %tanThetaAdiv2 = fdiv float %tmp_51, %sinThetaA_int

ST_75: tanThetaAdiv2_3 [15/16] 6.08ns
:1  %tanThetaAdiv2_3 = fdiv float %sinThetaA_int_1, %tmp_95

ST_75: tanThetaAdiv2_2 [15/16] 6.08ns
:1  %tanThetaAdiv2_2 = fdiv float %tmp_94, %sinThetaA_int_1


 <State 76>: 6.08ns
ST_76: tanThetaAdiv2_1 [13/16] 6.08ns
:1  %tanThetaAdiv2_1 = fdiv float %sinThetaA_int, %tmp_53

ST_76: tanThetaAdiv2 [13/16] 6.08ns
:1  %tanThetaAdiv2 = fdiv float %tmp_51, %sinThetaA_int

ST_76: tanThetaAdiv2_3 [14/16] 6.08ns
:1  %tanThetaAdiv2_3 = fdiv float %sinThetaA_int_1, %tmp_95

ST_76: tanThetaAdiv2_2 [14/16] 6.08ns
:1  %tanThetaAdiv2_2 = fdiv float %tmp_94, %sinThetaA_int_1


 <State 77>: 6.08ns
ST_77: tanThetaAdiv2_1 [12/16] 6.08ns
:1  %tanThetaAdiv2_1 = fdiv float %sinThetaA_int, %tmp_53

ST_77: tanThetaAdiv2 [12/16] 6.08ns
:1  %tanThetaAdiv2 = fdiv float %tmp_51, %sinThetaA_int

ST_77: tanThetaAdiv2_3 [13/16] 6.08ns
:1  %tanThetaAdiv2_3 = fdiv float %sinThetaA_int_1, %tmp_95

ST_77: tanThetaAdiv2_2 [13/16] 6.08ns
:1  %tanThetaAdiv2_2 = fdiv float %tmp_94, %sinThetaA_int_1


 <State 78>: 6.08ns
ST_78: tanThetaAdiv2_1 [11/16] 6.08ns
:1  %tanThetaAdiv2_1 = fdiv float %sinThetaA_int, %tmp_53

ST_78: tanThetaAdiv2 [11/16] 6.08ns
:1  %tanThetaAdiv2 = fdiv float %tmp_51, %sinThetaA_int

ST_78: tanThetaAdiv2_3 [12/16] 6.08ns
:1  %tanThetaAdiv2_3 = fdiv float %sinThetaA_int_1, %tmp_95

ST_78: tanThetaAdiv2_2 [12/16] 6.08ns
:1  %tanThetaAdiv2_2 = fdiv float %tmp_94, %sinThetaA_int_1


 <State 79>: 6.08ns
ST_79: tanThetaAdiv2_1 [10/16] 6.08ns
:1  %tanThetaAdiv2_1 = fdiv float %sinThetaA_int, %tmp_53

ST_79: tanThetaAdiv2 [10/16] 6.08ns
:1  %tanThetaAdiv2 = fdiv float %tmp_51, %sinThetaA_int

ST_79: tanThetaAdiv2_3 [11/16] 6.08ns
:1  %tanThetaAdiv2_3 = fdiv float %sinThetaA_int_1, %tmp_95

ST_79: tanThetaAdiv2_2 [11/16] 6.08ns
:1  %tanThetaAdiv2_2 = fdiv float %tmp_94, %sinThetaA_int_1


 <State 80>: 6.08ns
ST_80: tanThetaAdiv2_1 [9/16] 6.08ns
:1  %tanThetaAdiv2_1 = fdiv float %sinThetaA_int, %tmp_53

ST_80: tanThetaAdiv2 [9/16] 6.08ns
:1  %tanThetaAdiv2 = fdiv float %tmp_51, %sinThetaA_int

ST_80: tanThetaAdiv2_3 [10/16] 6.08ns
:1  %tanThetaAdiv2_3 = fdiv float %sinThetaA_int_1, %tmp_95

ST_80: tanThetaAdiv2_2 [10/16] 6.08ns
:1  %tanThetaAdiv2_2 = fdiv float %tmp_94, %sinThetaA_int_1


 <State 81>: 6.08ns
ST_81: tanThetaAdiv2_1 [8/16] 6.08ns
:1  %tanThetaAdiv2_1 = fdiv float %sinThetaA_int, %tmp_53

ST_81: tanThetaAdiv2 [8/16] 6.08ns
:1  %tanThetaAdiv2 = fdiv float %tmp_51, %sinThetaA_int

ST_81: tanThetaAdiv2_3 [9/16] 6.08ns
:1  %tanThetaAdiv2_3 = fdiv float %sinThetaA_int_1, %tmp_95

ST_81: tanThetaAdiv2_2 [9/16] 6.08ns
:1  %tanThetaAdiv2_2 = fdiv float %tmp_94, %sinThetaA_int_1


 <State 82>: 6.08ns
ST_82: tanThetaAdiv2_1 [7/16] 6.08ns
:1  %tanThetaAdiv2_1 = fdiv float %sinThetaA_int, %tmp_53

ST_82: tanThetaAdiv2 [7/16] 6.08ns
:1  %tanThetaAdiv2 = fdiv float %tmp_51, %sinThetaA_int

ST_82: tanThetaAdiv2_3 [8/16] 6.08ns
:1  %tanThetaAdiv2_3 = fdiv float %sinThetaA_int_1, %tmp_95

ST_82: tanThetaAdiv2_2 [8/16] 6.08ns
:1  %tanThetaAdiv2_2 = fdiv float %tmp_94, %sinThetaA_int_1


 <State 83>: 6.08ns
ST_83: tanThetaAdiv2_1 [6/16] 6.08ns
:1  %tanThetaAdiv2_1 = fdiv float %sinThetaA_int, %tmp_53

ST_83: tanThetaAdiv2 [6/16] 6.08ns
:1  %tanThetaAdiv2 = fdiv float %tmp_51, %sinThetaA_int

ST_83: tanThetaAdiv2_3 [7/16] 6.08ns
:1  %tanThetaAdiv2_3 = fdiv float %sinThetaA_int_1, %tmp_95

ST_83: tanThetaAdiv2_2 [7/16] 6.08ns
:1  %tanThetaAdiv2_2 = fdiv float %tmp_94, %sinThetaA_int_1


 <State 84>: 6.08ns
ST_84: tanThetaAdiv2_1 [5/16] 6.08ns
:1  %tanThetaAdiv2_1 = fdiv float %sinThetaA_int, %tmp_53

ST_84: tanThetaAdiv2 [5/16] 6.08ns
:1  %tanThetaAdiv2 = fdiv float %tmp_51, %sinThetaA_int

ST_84: tanThetaAdiv2_3 [6/16] 6.08ns
:1  %tanThetaAdiv2_3 = fdiv float %sinThetaA_int_1, %tmp_95

ST_84: tanThetaAdiv2_2 [6/16] 6.08ns
:1  %tanThetaAdiv2_2 = fdiv float %tmp_94, %sinThetaA_int_1


 <State 85>: 6.08ns
ST_85: tanThetaAdiv2_1 [4/16] 6.08ns
:1  %tanThetaAdiv2_1 = fdiv float %sinThetaA_int, %tmp_53

ST_85: tanThetaAdiv2 [4/16] 6.08ns
:1  %tanThetaAdiv2 = fdiv float %tmp_51, %sinThetaA_int

ST_85: tanThetaAdiv2_3 [5/16] 6.08ns
:1  %tanThetaAdiv2_3 = fdiv float %sinThetaA_int_1, %tmp_95

ST_85: tanThetaAdiv2_2 [5/16] 6.08ns
:1  %tanThetaAdiv2_2 = fdiv float %tmp_94, %sinThetaA_int_1


 <State 86>: 6.08ns
ST_86: tanThetaAdiv2_1 [3/16] 6.08ns
:1  %tanThetaAdiv2_1 = fdiv float %sinThetaA_int, %tmp_53

ST_86: tanThetaAdiv2 [3/16] 6.08ns
:1  %tanThetaAdiv2 = fdiv float %tmp_51, %sinThetaA_int

ST_86: tanThetaAdiv2_3 [4/16] 6.08ns
:1  %tanThetaAdiv2_3 = fdiv float %sinThetaA_int_1, %tmp_95

ST_86: tanThetaAdiv2_2 [4/16] 6.08ns
:1  %tanThetaAdiv2_2 = fdiv float %tmp_94, %sinThetaA_int_1


 <State 87>: 6.08ns
ST_87: tanThetaAdiv2_1 [2/16] 6.08ns
:1  %tanThetaAdiv2_1 = fdiv float %sinThetaA_int, %tmp_53

ST_87: tanThetaAdiv2 [2/16] 6.08ns
:1  %tanThetaAdiv2 = fdiv float %tmp_51, %sinThetaA_int

ST_87: tanThetaAdiv2_3 [3/16] 6.08ns
:1  %tanThetaAdiv2_3 = fdiv float %sinThetaA_int_1, %tmp_95

ST_87: tanThetaAdiv2_2 [3/16] 6.08ns
:1  %tanThetaAdiv2_2 = fdiv float %tmp_94, %sinThetaA_int_1


 <State 88>: 7.65ns
ST_88: tanThetaAdiv2_1 [1/16] 6.08ns
:1  %tanThetaAdiv2_1 = fdiv float %sinThetaA_int, %tmp_53

ST_88: stg_628 [1/1] 1.57ns
:2  br label %15

ST_88: tanThetaAdiv2 [1/16] 6.08ns
:1  %tanThetaAdiv2 = fdiv float %tmp_51, %sinThetaA_int

ST_88: stg_630 [1/1] 1.57ns
:2  br label %15

ST_88: tanThetaAdiv2_3 [2/16] 6.08ns
:1  %tanThetaAdiv2_3 = fdiv float %sinThetaA_int_1, %tmp_95

ST_88: tanThetaAdiv2_2 [2/16] 6.08ns
:1  %tanThetaAdiv2_2 = fdiv float %tmp_94, %sinThetaA_int_1


 <State 89>: 7.65ns
ST_89: tanThetaAdiv2_0_i [1/1] 0.00ns
:0  %tanThetaAdiv2_0_i = phi float [ %tanThetaAdiv2, %13 ], [ %tanThetaAdiv2_1, %14 ]

ST_89: tmp_59 [4/4] 5.70ns
:1  %tmp_59 = fmul float %tanThetaAdiv2_0_i, %tanThetaAdiv2_0_i

ST_89: tanThetaAdiv2_3 [1/16] 6.08ns
:1  %tanThetaAdiv2_3 = fdiv float %sinThetaA_int_1, %tmp_95

ST_89: stg_636 [1/1] 1.57ns
:2  br label %18

ST_89: tanThetaAdiv2_2 [1/16] 6.08ns
:1  %tanThetaAdiv2_2 = fdiv float %tmp_94, %sinThetaA_int_1

ST_89: stg_638 [1/1] 1.57ns
:2  br label %18


 <State 90>: 5.70ns
ST_90: tmp_59 [3/4] 5.70ns
:1  %tmp_59 = fmul float %tanThetaAdiv2_0_i, %tanThetaAdiv2_0_i

ST_90: tanThetaAdiv2_0_i1 [1/1] 0.00ns
:0  %tanThetaAdiv2_0_i1 = phi float [ %tanThetaAdiv2_2, %16 ], [ %tanThetaAdiv2_3, %17 ]

ST_90: tmp_97 [4/4] 5.70ns
:1  %tmp_97 = fmul float %tanThetaAdiv2_0_i1, %tanThetaAdiv2_0_i1


 <State 91>: 5.70ns
ST_91: tmp_59 [2/4] 5.70ns
:1  %tmp_59 = fmul float %tanThetaAdiv2_0_i, %tanThetaAdiv2_0_i

ST_91: tmp_97 [3/4] 5.70ns
:1  %tmp_97 = fmul float %tanThetaAdiv2_0_i1, %tanThetaAdiv2_0_i1


 <State 92>: 5.70ns
ST_92: tmp_59 [1/4] 5.70ns
:1  %tmp_59 = fmul float %tanThetaAdiv2_0_i, %tanThetaAdiv2_0_i

ST_92: tmp_97 [2/4] 5.70ns
:1  %tmp_97 = fmul float %tanThetaAdiv2_0_i1, %tanThetaAdiv2_0_i1


 <State 93>: 7.26ns
ST_93: x_assign_2 [5/5] 7.26ns
:2  %x_assign_2 = fadd float %tmp_59, 1.000000e+00

ST_93: tmp_97 [1/4] 5.70ns
:1  %tmp_97 = fmul float %tanThetaAdiv2_0_i1, %tanThetaAdiv2_0_i1


 <State 94>: 7.26ns
ST_94: x_assign_2 [4/5] 7.26ns
:2  %x_assign_2 = fadd float %tmp_59, 1.000000e+00

ST_94: x_assign_7 [5/5] 7.26ns
:2  %x_assign_7 = fadd float %tmp_97, 1.000000e+00


 <State 95>: 7.26ns
ST_95: x_assign_2 [3/5] 7.26ns
:2  %x_assign_2 = fadd float %tmp_59, 1.000000e+00

ST_95: x_assign_7 [4/5] 7.26ns
:2  %x_assign_7 = fadd float %tmp_97, 1.000000e+00


 <State 96>: 7.26ns
ST_96: x_assign_2 [2/5] 7.26ns
:2  %x_assign_2 = fadd float %tmp_59, 1.000000e+00

ST_96: x_assign_7 [3/5] 7.26ns
:2  %x_assign_7 = fadd float %tmp_97, 1.000000e+00


 <State 97>: 7.26ns
ST_97: x_assign_2 [1/5] 7.26ns
:2  %x_assign_2 = fadd float %tmp_59, 1.000000e+00

ST_97: x_assign_7 [2/5] 7.26ns
:2  %x_assign_7 = fadd float %tmp_97, 1.000000e+00


 <State 98>: 7.26ns
ST_98: cosThetaAdiv2_int [11/11] 7.00ns
:3  %cosThetaAdiv2_int = call float @_ssdm_op_FRSqrt(float %x_assign_2) nounwind

ST_98: x_assign_7 [1/5] 7.26ns
:2  %x_assign_7 = fadd float %tmp_97, 1.000000e+00


 <State 99>: 7.00ns
ST_99: cosThetaAdiv2_int [10/11] 7.00ns
:3  %cosThetaAdiv2_int = call float @_ssdm_op_FRSqrt(float %x_assign_2) nounwind

ST_99: cosThetaAdiv2_int_1 [11/11] 7.00ns
:3  %cosThetaAdiv2_int_1 = call float @_ssdm_op_FRSqrt(float %x_assign_7) nounwind


 <State 100>: 7.00ns
ST_100: cosThetaAdiv2_int [9/11] 7.00ns
:3  %cosThetaAdiv2_int = call float @_ssdm_op_FRSqrt(float %x_assign_2) nounwind

ST_100: cosThetaAdiv2_int_1 [10/11] 7.00ns
:3  %cosThetaAdiv2_int_1 = call float @_ssdm_op_FRSqrt(float %x_assign_7) nounwind


 <State 101>: 7.00ns
ST_101: cosThetaAdiv2_int [8/11] 7.00ns
:3  %cosThetaAdiv2_int = call float @_ssdm_op_FRSqrt(float %x_assign_2) nounwind

ST_101: cosThetaAdiv2_int_1 [9/11] 7.00ns
:3  %cosThetaAdiv2_int_1 = call float @_ssdm_op_FRSqrt(float %x_assign_7) nounwind


 <State 102>: 7.00ns
ST_102: cosThetaAdiv2_int [7/11] 7.00ns
:3  %cosThetaAdiv2_int = call float @_ssdm_op_FRSqrt(float %x_assign_2) nounwind

ST_102: cosThetaAdiv2_int_1 [8/11] 7.00ns
:3  %cosThetaAdiv2_int_1 = call float @_ssdm_op_FRSqrt(float %x_assign_7) nounwind


 <State 103>: 7.00ns
ST_103: cosThetaAdiv2_int [6/11] 7.00ns
:3  %cosThetaAdiv2_int = call float @_ssdm_op_FRSqrt(float %x_assign_2) nounwind

ST_103: cosThetaAdiv2_int_1 [7/11] 7.00ns
:3  %cosThetaAdiv2_int_1 = call float @_ssdm_op_FRSqrt(float %x_assign_7) nounwind


 <State 104>: 7.00ns
ST_104: cosThetaAdiv2_int [5/11] 7.00ns
:3  %cosThetaAdiv2_int = call float @_ssdm_op_FRSqrt(float %x_assign_2) nounwind

ST_104: cosThetaAdiv2_int_1 [6/11] 7.00ns
:3  %cosThetaAdiv2_int_1 = call float @_ssdm_op_FRSqrt(float %x_assign_7) nounwind


 <State 105>: 7.00ns
ST_105: cosThetaAdiv2_int [4/11] 7.00ns
:3  %cosThetaAdiv2_int = call float @_ssdm_op_FRSqrt(float %x_assign_2) nounwind

ST_105: cosThetaAdiv2_int_1 [5/11] 7.00ns
:3  %cosThetaAdiv2_int_1 = call float @_ssdm_op_FRSqrt(float %x_assign_7) nounwind


 <State 106>: 7.00ns
ST_106: cosThetaAdiv2_int [3/11] 7.00ns
:3  %cosThetaAdiv2_int = call float @_ssdm_op_FRSqrt(float %x_assign_2) nounwind

ST_106: cosThetaAdiv2_int_1 [4/11] 7.00ns
:3  %cosThetaAdiv2_int_1 = call float @_ssdm_op_FRSqrt(float %x_assign_7) nounwind


 <State 107>: 7.00ns
ST_107: cosThetaAdiv2_int [2/11] 7.00ns
:3  %cosThetaAdiv2_int = call float @_ssdm_op_FRSqrt(float %x_assign_2) nounwind

ST_107: cosThetaAdiv2_int_1 [3/11] 7.00ns
:3  %cosThetaAdiv2_int_1 = call float @_ssdm_op_FRSqrt(float %x_assign_7) nounwind


 <State 108>: 7.00ns
ST_108: cosThetaAdiv2_int [1/11] 7.00ns
:3  %cosThetaAdiv2_int = call float @_ssdm_op_FRSqrt(float %x_assign_2) nounwind

ST_108: cosThetaAdiv2_int_1 [2/11] 7.00ns
:3  %cosThetaAdiv2_int_1 = call float @_ssdm_op_FRSqrt(float %x_assign_7) nounwind


 <State 109>: 7.00ns
ST_109: tmp_60 [4/4] 5.70ns
:4  %tmp_60 = fmul float %cosThetaAdiv2_int, %tanThetaAdiv2_0_i

ST_109: cosThetaAdiv2_int_1 [1/11] 7.00ns
:3  %cosThetaAdiv2_int_1 = call float @_ssdm_op_FRSqrt(float %x_assign_7) nounwind


 <State 110>: 5.70ns
ST_110: tmp_60 [3/4] 5.70ns
:4  %tmp_60 = fmul float %cosThetaAdiv2_int, %tanThetaAdiv2_0_i

ST_110: tmp_98 [4/4] 5.70ns
:4  %tmp_98 = fmul float %cosThetaAdiv2_int_1, %tanThetaAdiv2_0_i1


 <State 111>: 5.70ns
ST_111: tmp_60 [2/4] 5.70ns
:4  %tmp_60 = fmul float %cosThetaAdiv2_int, %tanThetaAdiv2_0_i

ST_111: tmp_98 [3/4] 5.70ns
:4  %tmp_98 = fmul float %cosThetaAdiv2_int_1, %tanThetaAdiv2_0_i1


 <State 112>: 7.27ns
ST_112: tmp_60 [1/4] 5.70ns
:4  %tmp_60 = fmul float %cosThetaAdiv2_int, %tanThetaAdiv2_0_i

ST_112: stg_685 [1/1] 1.57ns
:5  br label %"calc_angle<float, float>.exit"

ST_112: cosA_half [1/1] 1.37ns
.critedge294:0  %cosA_half = select i1 %p_Result_15, float 0xBFE6A09E60000000, float 0x3FE6A09E60000000

ST_112: stg_687 [1/1] 1.57ns
.critedge294:1  br label %"calc_angle<float, float>.exit"

ST_112: sinA_half_i [1/1] 1.37ns
.critedge:0  %sinA_half_i = select i1 %p_Result_s, float 1.000000e+00, float 0.000000e+00

ST_112: cosA_half_i [1/1] 1.37ns
.critedge:1  %cosA_half_i = select i1 %p_Result_s, float 0.000000e+00, float 1.000000e+00

ST_112: stg_690 [1/1] 1.57ns
.critedge:2  br label %"calc_angle<float, float>.exit"

ST_112: tmp_98 [2/4] 5.70ns
:4  %tmp_98 = fmul float %cosThetaAdiv2_int_1, %tanThetaAdiv2_0_i1


 <State 113>: 7.27ns
ST_113: a2_assign_s [1/1] 0.00ns
calc_angle<float, float>.exit:0  %a2_assign_s = phi float [ %sinA_half_i, %.critedge ], [ 0x3FE6A09E60000000, %.critedge294 ], [ %tmp_60, %15 ]

ST_113: a1_assign_s [1/1] 0.00ns
calc_angle<float, float>.exit:1  %a1_assign_s = phi float [ %cosA_half_i, %.critedge ], [ %cosA_half, %.critedge294 ], [ %cosThetaAdiv2_int, %15 ]

ST_113: tmp_98 [1/4] 5.70ns
:4  %tmp_98 = fmul float %cosThetaAdiv2_int_1, %tanThetaAdiv2_0_i1

ST_113: stg_695 [1/1] 1.57ns
:5  br label %"calc_angle<float, float>.exit44"

ST_113: cosB_half [1/1] 1.37ns
.critedge296:0  %cosB_half = select i1 %p_Result_18, float 0xBFE6A09E60000000, float 0x3FE6A09E60000000

ST_113: stg_697 [1/1] 1.57ns
.critedge296:1  br label %"calc_angle<float, float>.exit44"

ST_113: sinB_half_i [1/1] 1.37ns
.critedge295:0  %sinB_half_i = select i1 %p_Result_10, float 1.000000e+00, float 0.000000e+00

ST_113: cosB_half_i [1/1] 1.37ns
.critedge295:1  %cosB_half_i = select i1 %p_Result_10, float 0.000000e+00, float 1.000000e+00

ST_113: stg_700 [1/1] 1.57ns
.critedge295:2  br label %"calc_angle<float, float>.exit44"


 <State 114>: 7.07ns
ST_114: b2_assign_1 [1/1] 0.00ns
calc_angle<float, float>.exit44:0  %b2_assign_1 = phi float [ %sinB_half_i, %.critedge295 ], [ 0x3FE6A09E60000000, %.critedge296 ], [ %tmp_98, %18 ]

ST_114: b1_assign [1/1] 0.00ns
calc_angle<float, float>.exit44:1  %b1_assign = phi float [ %cosB_half_i, %.critedge295 ], [ %cosB_half, %.critedge296 ], [ %cosThetaAdiv2_int_1, %18 ]

ST_114: tmp_111 [4/4] 5.70ns
calc_angle<float, float>.exit44:2  %tmp_111 = fmul float %a1_assign_s, %b1_assign

ST_114: tmp_113 [4/4] 5.70ns
calc_angle<float, float>.exit44:8  %tmp_113 = fmul float %a2_assign_s, %b1_assign

ST_114: a2_assign_12_to_int [1/1] 0.00ns
calc_angle<float, float>.exit44:11  %a2_assign_12_to_int = bitcast float %a2_assign_s to i32

ST_114: a2_assign_12_neg [1/1] 1.37ns
calc_angle<float, float>.exit44:12  %a2_assign_12_neg = xor i32 %a2_assign_12_to_int, -2147483648

ST_114: a2_assign_3 [1/1] 0.00ns
calc_angle<float, float>.exit44:13  %a2_assign_3 = bitcast i32 %a2_assign_12_neg to float

ST_114: tmp_115 [4/4] 5.70ns
calc_angle<float, float>.exit44:14  %tmp_115 = fmul float %b2_assign_1, %a2_assign_3


 <State 115>: 7.07ns
ST_115: tmp_111 [3/4] 5.70ns
calc_angle<float, float>.exit44:2  %tmp_111 = fmul float %a1_assign_s, %b1_assign

ST_115: tmp_112 [4/4] 5.70ns
calc_angle<float, float>.exit44:3  %tmp_112 = fmul float %a2_assign_s, %b2_assign_1

ST_115: a2_assign_11_to_int [1/1] 0.00ns
calc_angle<float, float>.exit44:5  %a2_assign_11_to_int = bitcast float %a1_assign_s to i32

ST_115: a2_assign_11_neg [1/1] 1.37ns
calc_angle<float, float>.exit44:6  %a2_assign_11_neg = xor i32 %a2_assign_11_to_int, -2147483648

ST_115: a2_assign_2 [1/1] 0.00ns
calc_angle<float, float>.exit44:7  %a2_assign_2 = bitcast i32 %a2_assign_11_neg to float

ST_115: tmp_113 [3/4] 5.70ns
calc_angle<float, float>.exit44:8  %tmp_113 = fmul float %a2_assign_s, %b1_assign

ST_115: tmp_114 [4/4] 5.70ns
calc_angle<float, float>.exit44:9  %tmp_114 = fmul float %b2_assign_1, %a2_assign_2

ST_115: tmp_115 [3/4] 5.70ns
calc_angle<float, float>.exit44:14  %tmp_115 = fmul float %b2_assign_1, %a2_assign_3

ST_115: tmp_116 [4/4] 5.70ns
calc_angle<float, float>.exit44:16  %tmp_116 = fmul float %a1_assign_s, %b2_assign_1


 <State 116>: 5.70ns
ST_116: tmp_111 [2/4] 5.70ns
calc_angle<float, float>.exit44:2  %tmp_111 = fmul float %a1_assign_s, %b1_assign

ST_116: tmp_112 [3/4] 5.70ns
calc_angle<float, float>.exit44:3  %tmp_112 = fmul float %a2_assign_s, %b2_assign_1

ST_116: tmp_113 [2/4] 5.70ns
calc_angle<float, float>.exit44:8  %tmp_113 = fmul float %a2_assign_s, %b1_assign

ST_116: tmp_114 [3/4] 5.70ns
calc_angle<float, float>.exit44:9  %tmp_114 = fmul float %b2_assign_1, %a2_assign_2

ST_116: tmp_115 [2/4] 5.70ns
calc_angle<float, float>.exit44:14  %tmp_115 = fmul float %b2_assign_1, %a2_assign_3

ST_116: tmp_116 [3/4] 5.70ns
calc_angle<float, float>.exit44:16  %tmp_116 = fmul float %a1_assign_s, %b2_assign_1


 <State 117>: 5.70ns
ST_117: tmp_111 [1/4] 5.70ns
calc_angle<float, float>.exit44:2  %tmp_111 = fmul float %a1_assign_s, %b1_assign

ST_117: tmp_112 [2/4] 5.70ns
calc_angle<float, float>.exit44:3  %tmp_112 = fmul float %a2_assign_s, %b2_assign_1

ST_117: tmp_113 [1/4] 5.70ns
calc_angle<float, float>.exit44:8  %tmp_113 = fmul float %a2_assign_s, %b1_assign

ST_117: tmp_114 [2/4] 5.70ns
calc_angle<float, float>.exit44:9  %tmp_114 = fmul float %b2_assign_1, %a2_assign_2

ST_117: tmp_115 [1/4] 5.70ns
calc_angle<float, float>.exit44:14  %tmp_115 = fmul float %b2_assign_1, %a2_assign_3

ST_117: tmp_116 [2/4] 5.70ns
calc_angle<float, float>.exit44:16  %tmp_116 = fmul float %a1_assign_s, %b2_assign_1


 <State 118>: 7.26ns
ST_118: tmp_112 [1/4] 5.70ns
calc_angle<float, float>.exit44:3  %tmp_112 = fmul float %a2_assign_s, %b2_assign_1

ST_118: tmp_114 [1/4] 5.70ns
calc_angle<float, float>.exit44:9  %tmp_114 = fmul float %b2_assign_1, %a2_assign_2

ST_118: c2 [5/5] 7.26ns
calc_angle<float, float>.exit44:15  %c2 = fadd float %tmp_111, %tmp_115

ST_118: tmp_116 [1/4] 5.70ns
calc_angle<float, float>.exit44:16  %tmp_116 = fmul float %a1_assign_s, %b2_assign_1


 <State 119>: 7.26ns
ST_119: c2 [4/5] 7.26ns
calc_angle<float, float>.exit44:15  %c2 = fadd float %tmp_111, %tmp_115


 <State 120>: 7.26ns
ST_120: c2 [3/5] 7.26ns
calc_angle<float, float>.exit44:15  %c2 = fadd float %tmp_111, %tmp_115

ST_120: s2 [5/5] 7.26ns
calc_angle<float, float>.exit44:17  %s2 = fadd float %tmp_113, %tmp_116


 <State 121>: 7.26ns
ST_121: c1 [5/5] 7.26ns
calc_angle<float, float>.exit44:4  %c1 = fadd float %tmp_111, %tmp_112

ST_121: s1 [5/5] 7.26ns
calc_angle<float, float>.exit44:10  %s1 = fadd float %tmp_113, %tmp_114

ST_121: c2 [2/5] 7.26ns
calc_angle<float, float>.exit44:15  %c2 = fadd float %tmp_111, %tmp_115

ST_121: s2 [4/5] 7.26ns
calc_angle<float, float>.exit44:17  %s2 = fadd float %tmp_113, %tmp_116


 <State 122>: 7.26ns
ST_122: c1 [4/5] 7.26ns
calc_angle<float, float>.exit44:4  %c1 = fadd float %tmp_111, %tmp_112

ST_122: s1 [4/5] 7.26ns
calc_angle<float, float>.exit44:10  %s1 = fadd float %tmp_113, %tmp_114

ST_122: c2 [1/5] 7.26ns
calc_angle<float, float>.exit44:15  %c2 = fadd float %tmp_111, %tmp_115

ST_122: s2 [3/5] 7.26ns
calc_angle<float, float>.exit44:17  %s2 = fadd float %tmp_113, %tmp_116


 <State 123>: 7.26ns
ST_123: c1 [3/5] 7.26ns
calc_angle<float, float>.exit44:4  %c1 = fadd float %tmp_111, %tmp_112

ST_123: s1 [3/5] 7.26ns
calc_angle<float, float>.exit44:10  %s1 = fadd float %tmp_113, %tmp_114

ST_123: s2 [2/5] 7.26ns
calc_angle<float, float>.exit44:17  %s2 = fadd float %tmp_113, %tmp_116

ST_123: tmp_117 [4/4] 5.70ns
calc_angle<float, float>.exit44:24  %tmp_117 = fmul float %w_in, %c2


 <State 124>: 7.26ns
ST_124: c1 [2/5] 7.26ns
calc_angle<float, float>.exit44:4  %c1 = fadd float %tmp_111, %tmp_112

ST_124: s1 [2/5] 7.26ns
calc_angle<float, float>.exit44:10  %s1 = fadd float %tmp_113, %tmp_114

ST_124: s2 [1/5] 7.26ns
calc_angle<float, float>.exit44:17  %s2 = fadd float %tmp_113, %tmp_116

ST_124: tmp_117 [3/4] 5.70ns
calc_angle<float, float>.exit44:24  %tmp_117 = fmul float %w_in, %c2

ST_124: tmp_119 [4/4] 5.70ns
calc_angle<float, float>.exit44:27  %tmp_119 = fmul float %y_in, %c2

ST_124: tmp_124 [4/4] 5.70ns
calc_angle<float, float>.exit44:34  %tmp_124 = fmul float %x_in_1, %c2


 <State 125>: 7.26ns
ST_125: c1 [1/5] 7.26ns
calc_angle<float, float>.exit44:4  %c1 = fadd float %tmp_111, %tmp_112

ST_125: s1 [1/5] 7.26ns
calc_angle<float, float>.exit44:10  %s1 = fadd float %tmp_113, %tmp_114

ST_125: vy_int_to_int [1/1] 0.00ns
calc_angle<float, float>.exit44:21  %vy_int_to_int = bitcast float %s2 to i32

ST_125: vy_int_neg [1/1] 1.37ns
calc_angle<float, float>.exit44:22  %vy_int_neg = xor i32 %vy_int_to_int, -2147483648

ST_125: vy_int [1/1] 0.00ns
calc_angle<float, float>.exit44:23  %vy_int = bitcast i32 %vy_int_neg to float

ST_125: tmp_117 [2/4] 5.70ns
calc_angle<float, float>.exit44:24  %tmp_117 = fmul float %w_in, %c2

ST_125: tmp_118 [4/4] 5.70ns
calc_angle<float, float>.exit44:25  %tmp_118 = fmul float %x_in_1, %vy_int

ST_125: tmp_119 [3/4] 5.70ns
calc_angle<float, float>.exit44:27  %tmp_119 = fmul float %y_in, %c2

ST_125: tmp_124 [3/4] 5.70ns
calc_angle<float, float>.exit44:34  %tmp_124 = fmul float %x_in_1, %c2


 <State 126>: 5.70ns
ST_126: tmp_117 [1/4] 5.70ns
calc_angle<float, float>.exit44:24  %tmp_117 = fmul float %w_in, %c2

ST_126: tmp_118 [3/4] 5.70ns
calc_angle<float, float>.exit44:25  %tmp_118 = fmul float %x_in_1, %vy_int

ST_126: tmp_119 [2/4] 5.70ns
calc_angle<float, float>.exit44:27  %tmp_119 = fmul float %y_in, %c2

ST_126: tmp_120 [4/4] 5.70ns
calc_angle<float, float>.exit44:28  %tmp_120 = fmul float %z_in_1, %vy_int

ST_126: tmp_123 [4/4] 5.70ns
calc_angle<float, float>.exit44:33  %tmp_123 = fmul float %w_in, %s2

ST_126: tmp_124 [2/4] 5.70ns
calc_angle<float, float>.exit44:34  %tmp_124 = fmul float %x_in_1, %c2

ST_126: tmp_125 [4/4] 5.70ns
calc_angle<float, float>.exit44:36  %tmp_125 = fmul float %y_in, %s2


 <State 127>: 5.70ns
ST_127: tmp_118 [2/4] 5.70ns
calc_angle<float, float>.exit44:25  %tmp_118 = fmul float %x_in_1, %vy_int

ST_127: tmp_119 [1/4] 5.70ns
calc_angle<float, float>.exit44:27  %tmp_119 = fmul float %y_in, %c2

ST_127: tmp_120 [3/4] 5.70ns
calc_angle<float, float>.exit44:28  %tmp_120 = fmul float %z_in_1, %vy_int

ST_127: tmp_123 [3/4] 5.70ns
calc_angle<float, float>.exit44:33  %tmp_123 = fmul float %w_in, %s2

ST_127: tmp_124 [1/4] 5.70ns
calc_angle<float, float>.exit44:34  %tmp_124 = fmul float %x_in_1, %c2

ST_127: tmp_125 [3/4] 5.70ns
calc_angle<float, float>.exit44:36  %tmp_125 = fmul float %y_in, %s2

ST_127: tmp_126 [4/4] 5.70ns
calc_angle<float, float>.exit44:37  %tmp_126 = fmul float %z_in_1, %c2


 <State 128>: 5.70ns
ST_128: tmp_118 [1/4] 5.70ns
calc_angle<float, float>.exit44:25  %tmp_118 = fmul float %x_in_1, %vy_int

ST_128: tmp_120 [2/4] 5.70ns
calc_angle<float, float>.exit44:28  %tmp_120 = fmul float %z_in_1, %vy_int

ST_128: tmp_123 [2/4] 5.70ns
calc_angle<float, float>.exit44:33  %tmp_123 = fmul float %w_in, %s2

ST_128: tmp_125 [2/4] 5.70ns
calc_angle<float, float>.exit44:36  %tmp_125 = fmul float %y_in, %s2

ST_128: tmp_126 [3/4] 5.70ns
calc_angle<float, float>.exit44:37  %tmp_126 = fmul float %z_in_1, %c2


 <State 129>: 5.70ns
ST_129: tmp_120 [1/4] 5.70ns
calc_angle<float, float>.exit44:28  %tmp_120 = fmul float %z_in_1, %vy_int

ST_129: tmp_123 [1/4] 5.70ns
calc_angle<float, float>.exit44:33  %tmp_123 = fmul float %w_in, %s2

ST_129: tmp_125 [1/4] 5.70ns
calc_angle<float, float>.exit44:36  %tmp_125 = fmul float %y_in, %s2

ST_129: tmp_126 [2/4] 5.70ns
calc_angle<float, float>.exit44:37  %tmp_126 = fmul float %z_in_1, %c2


 <State 130>: 7.26ns
ST_130: w_out1 [5/5] 7.26ns
calc_angle<float, float>.exit44:26  %w_out1 = fadd float %tmp_117, %tmp_118

ST_130: w_out2 [5/5] 7.26ns
calc_angle<float, float>.exit44:29  %w_out2 = fadd float %tmp_119, %tmp_120

ST_130: z_out1 [5/5] 7.26ns
calc_angle<float, float>.exit44:35  %z_out1 = fadd float %tmp_123, %tmp_124

ST_130: tmp_126 [1/4] 5.70ns
calc_angle<float, float>.exit44:37  %tmp_126 = fmul float %z_in_1, %c2


 <State 131>: 7.26ns
ST_131: w_out1 [4/5] 7.26ns
calc_angle<float, float>.exit44:26  %w_out1 = fadd float %tmp_117, %tmp_118

ST_131: w_out2 [4/5] 7.26ns
calc_angle<float, float>.exit44:29  %w_out2 = fadd float %tmp_119, %tmp_120

ST_131: z_out1 [4/5] 7.26ns
calc_angle<float, float>.exit44:35  %z_out1 = fadd float %tmp_123, %tmp_124

ST_131: z_out2 [5/5] 7.26ns
calc_angle<float, float>.exit44:38  %z_out2 = fadd float %tmp_125, %tmp_126


 <State 132>: 7.26ns
ST_132: w_out1 [3/5] 7.26ns
calc_angle<float, float>.exit44:26  %w_out1 = fadd float %tmp_117, %tmp_118

ST_132: w_out2 [3/5] 7.26ns
calc_angle<float, float>.exit44:29  %w_out2 = fadd float %tmp_119, %tmp_120

ST_132: z_out1 [3/5] 7.26ns
calc_angle<float, float>.exit44:35  %z_out1 = fadd float %tmp_123, %tmp_124

ST_132: z_out2 [4/5] 7.26ns
calc_angle<float, float>.exit44:38  %z_out2 = fadd float %tmp_125, %tmp_126


 <State 133>: 7.26ns
ST_133: w_out1 [2/5] 7.26ns
calc_angle<float, float>.exit44:26  %w_out1 = fadd float %tmp_117, %tmp_118

ST_133: w_out2 [2/5] 7.26ns
calc_angle<float, float>.exit44:29  %w_out2 = fadd float %tmp_119, %tmp_120

ST_133: z_out1 [2/5] 7.26ns
calc_angle<float, float>.exit44:35  %z_out1 = fadd float %tmp_123, %tmp_124

ST_133: z_out2 [3/5] 7.26ns
calc_angle<float, float>.exit44:38  %z_out2 = fadd float %tmp_125, %tmp_126


 <State 134>: 7.26ns
ST_134: w_out1 [1/5] 7.26ns
calc_angle<float, float>.exit44:26  %w_out1 = fadd float %tmp_117, %tmp_118

ST_134: w_out2 [1/5] 7.26ns
calc_angle<float, float>.exit44:29  %w_out2 = fadd float %tmp_119, %tmp_120

ST_134: z_out1 [1/5] 7.26ns
calc_angle<float, float>.exit44:35  %z_out1 = fadd float %tmp_123, %tmp_124

ST_134: z_out2 [2/5] 7.26ns
calc_angle<float, float>.exit44:38  %z_out2 = fadd float %tmp_125, %tmp_126


 <State 135>: 7.26ns
ST_135: empty_12 [1/1] 0.00ns
_ifconv:0  %empty_12 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 392, i64 392, i64 392)

ST_135: stg_808 [1/1] 0.00ns
_ifconv:1  call void (...)* @_ssdm_op_SpecLoopName([8 x i8]* @p_str1815) nounwind

ST_135: tmp_25 [1/1] 0.00ns
_ifconv:2  %tmp_25 = call i32 (...)* @_ssdm_op_SpecRegionBegin([8 x i8]* @p_str1815)

ST_135: stg_810 [1/1] 0.00ns
_ifconv:3  call void (...)* @_ssdm_op_SpecPipeline(i32 8, i32 1, i32 1, i32 0, [1 x i8]* @p_str1806) nounwind

ST_135: tmp_21 [1/1] 0.00ns
_ifconv:4  %tmp_21 = zext i9 %px1 to i64

ST_135: uw_new_addr [1/1] 0.00ns
_ifconv:36  %uw_new_addr = getelementptr inbounds [392 x float]* %uw_new, i64 0, i64 %tmp_21

ST_135: ux_new_addr [1/1] 0.00ns
_ifconv:37  %ux_new_addr = getelementptr inbounds [392 x float]* %ux_new, i64 0, i64 %tmp_21

ST_135: uy_new_addr [1/1] 0.00ns
_ifconv:38  %uy_new_addr = getelementptr inbounds [392 x float]* %uy_new, i64 0, i64 %tmp_21

ST_135: uz_new_addr [1/1] 0.00ns
_ifconv:39  %uz_new_addr = getelementptr inbounds [392 x float]* %uz_new, i64 0, i64 %tmp_21

ST_135: vw_new_addr [1/1] 0.00ns
_ifconv:40  %vw_new_addr = getelementptr inbounds [392 x float]* %vw_new, i64 0, i64 %tmp_21

ST_135: vx_new_addr [1/1] 0.00ns
_ifconv:41  %vx_new_addr = getelementptr inbounds [392 x float]* %vx_new, i64 0, i64 %tmp_21

ST_135: vy_new_addr [1/1] 0.00ns
_ifconv:42  %vy_new_addr = getelementptr inbounds [392 x float]* %vy_new, i64 0, i64 %tmp_21

ST_135: vz_new_addr [1/1] 0.00ns
_ifconv:43  %vz_new_addr = getelementptr inbounds [392 x float]* %vz_new, i64 0, i64 %tmp_21

ST_135: diag_w_out_addr [1/1] 0.00ns
_ifconv:44  %diag_w_out_addr = getelementptr inbounds [392 x float]* %diag_w_out, i64 0, i64 %tmp_21

ST_135: diag_x_out_addr [1/1] 0.00ns
_ifconv:45  %diag_x_out_addr = getelementptr inbounds [392 x float]* %diag_x_out, i64 0, i64 %tmp_21

ST_135: diag_y_out_addr [1/1] 0.00ns
_ifconv:46  %diag_y_out_addr = getelementptr inbounds [392 x float]* %diag_y_out, i64 0, i64 %tmp_21

ST_135: diag_z_out_addr [1/1] 0.00ns
_ifconv:47  %diag_z_out_addr = getelementptr inbounds [392 x float]* %diag_z_out, i64 0, i64 %tmp_21

ST_135: uy_int_to_int [1/1] 0.00ns
calc_angle<float, float>.exit44:18  %uy_int_to_int = bitcast float %s1 to i32

ST_135: uy_int_neg [1/1] 1.37ns
calc_angle<float, float>.exit44:19  %uy_int_neg = xor i32 %uy_int_to_int, -2147483648

ST_135: uy_int [1/1] 0.00ns
calc_angle<float, float>.exit44:20  %uy_int = bitcast i32 %uy_int_neg to float

ST_135: tmp_121 [4/4] 5.70ns
calc_angle<float, float>.exit44:30  %tmp_121 = fmul float %c1, %w_out1

ST_135: tmp_122 [4/4] 5.70ns
calc_angle<float, float>.exit44:31  %tmp_122 = fmul float %w_out2, %uy_int

ST_135: z_out2 [1/5] 7.26ns
calc_angle<float, float>.exit44:38  %z_out2 = fadd float %tmp_125, %tmp_126

ST_135: tmp_127 [4/4] 5.70ns
calc_angle<float, float>.exit44:39  %tmp_127 = fmul float %s1, %z_out1

ST_135: stg_831 [1/1] 2.71ns
calc_angle<float, float>.exit44:42  store float 0.000000e+00, float* %diag_x_out_addr, align 4

ST_135: stg_832 [1/1] 2.71ns
calc_angle<float, float>.exit44:43  store float 0.000000e+00, float* %diag_y_out_addr, align 4

ST_135: stg_833 [1/1] 2.71ns
svd2x2<float, float, float>.exit:2  store float %c1, float* %uw_new_addr, align 4

ST_135: stg_834 [1/1] 2.71ns
svd2x2<float, float, float>.exit:3  store float %s1, float* %ux_new_addr, align 4

ST_135: stg_835 [1/1] 2.71ns
svd2x2<float, float, float>.exit:4  store float %uy_int, float* %uy_new_addr, align 4

ST_135: stg_836 [1/1] 2.71ns
svd2x2<float, float, float>.exit:5  store float %c1, float* %uz_new_addr, align 4


 <State 136>: 5.70ns
ST_136: tmp_121 [3/4] 5.70ns
calc_angle<float, float>.exit44:30  %tmp_121 = fmul float %c1, %w_out1

ST_136: tmp_122 [3/4] 5.70ns
calc_angle<float, float>.exit44:31  %tmp_122 = fmul float %w_out2, %uy_int

ST_136: tmp_127 [3/4] 5.70ns
calc_angle<float, float>.exit44:39  %tmp_127 = fmul float %s1, %z_out1

ST_136: tmp_128 [4/4] 5.70ns
calc_angle<float, float>.exit44:40  %tmp_128 = fmul float %c1, %z_out2


 <State 137>: 5.70ns
ST_137: tmp_121 [2/4] 5.70ns
calc_angle<float, float>.exit44:30  %tmp_121 = fmul float %c1, %w_out1

ST_137: tmp_122 [2/4] 5.70ns
calc_angle<float, float>.exit44:31  %tmp_122 = fmul float %w_out2, %uy_int

ST_137: tmp_127 [2/4] 5.70ns
calc_angle<float, float>.exit44:39  %tmp_127 = fmul float %s1, %z_out1

ST_137: tmp_128 [3/4] 5.70ns
calc_angle<float, float>.exit44:40  %tmp_128 = fmul float %c1, %z_out2


 <State 138>: 5.70ns
ST_138: tmp_121 [1/4] 5.70ns
calc_angle<float, float>.exit44:30  %tmp_121 = fmul float %c1, %w_out1

ST_138: tmp_122 [1/4] 5.70ns
calc_angle<float, float>.exit44:31  %tmp_122 = fmul float %w_out2, %uy_int

ST_138: tmp_127 [1/4] 5.70ns
calc_angle<float, float>.exit44:39  %tmp_127 = fmul float %s1, %z_out1

ST_138: tmp_128 [2/4] 5.70ns
calc_angle<float, float>.exit44:40  %tmp_128 = fmul float %c1, %z_out2


 <State 139>: 7.26ns
ST_139: w_out_int [5/5] 7.26ns
calc_angle<float, float>.exit44:32  %w_out_int = fadd float %tmp_121, %tmp_122

ST_139: tmp_128 [1/4] 5.70ns
calc_angle<float, float>.exit44:40  %tmp_128 = fmul float %c1, %z_out2


 <State 140>: 7.26ns
ST_140: w_out_int [4/5] 7.26ns
calc_angle<float, float>.exit44:32  %w_out_int = fadd float %tmp_121, %tmp_122

ST_140: z_out_int [5/5] 7.26ns
calc_angle<float, float>.exit44:41  %z_out_int = fadd float %tmp_127, %tmp_128


 <State 141>: 7.26ns
ST_141: w_out_int [3/5] 7.26ns
calc_angle<float, float>.exit44:32  %w_out_int = fadd float %tmp_121, %tmp_122

ST_141: z_out_int [4/5] 7.26ns
calc_angle<float, float>.exit44:41  %z_out_int = fadd float %tmp_127, %tmp_128


 <State 142>: 7.26ns
ST_142: w_out_int [2/5] 7.26ns
calc_angle<float, float>.exit44:32  %w_out_int = fadd float %tmp_121, %tmp_122

ST_142: z_out_int [3/5] 7.26ns
calc_angle<float, float>.exit44:41  %z_out_int = fadd float %tmp_127, %tmp_128


 <State 143>: 7.26ns
ST_143: w_out_int [1/5] 7.26ns
calc_angle<float, float>.exit44:32  %w_out_int = fadd float %tmp_121, %tmp_122

ST_143: z_out_int [2/5] 7.26ns
calc_angle<float, float>.exit44:41  %z_out_int = fadd float %tmp_127, %tmp_128


 <State 144>: 7.26ns
ST_144: z_out_int [1/5] 7.26ns
calc_angle<float, float>.exit44:41  %z_out_int = fadd float %tmp_127, %tmp_128

ST_144: p_Val2_15 [1/1] 0.00ns
calc_angle<float, float>.exit44:44  %p_Val2_15 = bitcast float %w_out_int to i32

ST_144: p_Result_21 [1/1] 0.00ns
calc_angle<float, float>.exit44:45  %p_Result_21 = call i1 @_ssdm_op_BitSelect.i1.i32.i32(i32 %p_Val2_15, i32 31)

ST_144: stg_862 [1/1] 0.00ns
calc_angle<float, float>.exit44:46  br i1 %p_Result_21, label %19, label %20

ST_144: stg_863 [1/1] 2.71ns
:0  store float %w_out_int, float* %diag_w_out_addr, align 4

ST_144: stg_864 [1/1] 1.57ns
:1  br label %21

ST_144: tmp_144_neg [1/1] 1.37ns
:0  %tmp_144_neg = xor i32 %p_Val2_15, -2147483648

ST_144: tmp_129 [1/1] 0.00ns
:1  %tmp_129 = bitcast i32 %tmp_144_neg to float

ST_144: stg_867 [1/1] 2.71ns
:2  store float %tmp_129, float* %diag_w_out_addr, align 4

ST_144: vw_int_to_int [1/1] 0.00ns
:3  %vw_int_to_int = bitcast float %c2 to i32

ST_144: vw_int_neg [1/1] 1.37ns
:4  %vw_int_neg = xor i32 %vw_int_to_int, -2147483648

ST_144: vw_int [1/1] 0.00ns
:5  %vw_int = bitcast i32 %vw_int_neg to float

ST_144: stg_871 [1/1] 1.57ns
:6  br label %21

ST_144: p_Val2_16 [1/1] 0.00ns
:2  %p_Val2_16 = bitcast float %z_out_int to i32

ST_144: p_Result_22 [1/1] 0.00ns
:3  %p_Result_22 = call i1 @_ssdm_op_BitSelect.i1.i32.i32(i32 %p_Val2_16, i32 31)

ST_144: stg_874 [1/1] 0.00ns
:4  br i1 %p_Result_22, label %22, label %23

ST_144: stg_875 [1/1] 1.57ns
:1  br label %"svd2x2<float, float, float>.exit"

ST_144: vz_int_to_int [1/1] 0.00ns
:3  %vz_int_to_int = bitcast float %c2 to i32

ST_144: vz_int_neg [1/1] 1.37ns
:4  %vz_int_neg = xor i32 %vz_int_to_int, -2147483648

ST_144: vz_int [1/1] 0.00ns
:5  %vz_int = bitcast i32 %vz_int_neg to float

ST_144: stg_879 [1/1] 1.57ns
:6  br label %"svd2x2<float, float, float>.exit"


 <State 145>: 4.08ns
ST_145: vw_int_0_i [1/1] 0.00ns
:0  %vw_int_0_i = phi float [ %vw_int, %19 ], [ %c2, %20 ]

ST_145: vy_int_0_i [1/1] 0.00ns
:1  %vy_int_0_i = phi float [ %s2, %19 ], [ %vy_int, %20 ]

ST_145: stg_882 [1/1] 2.71ns
:0  store float %z_out_int, float* %diag_z_out_addr, align 4

ST_145: tmp_150_neg [1/1] 1.37ns
:0  %tmp_150_neg = xor i32 %p_Val2_16, -2147483648

ST_145: tmp_130 [1/1] 0.00ns
:1  %tmp_130 = bitcast i32 %tmp_150_neg to float

ST_145: stg_885 [1/1] 2.71ns
:2  store float %tmp_130, float* %diag_z_out_addr, align 4

ST_145: vx_int_0_i [1/1] 0.00ns
svd2x2<float, float, float>.exit:0  %vx_int_0_i = phi float [ %vy_int, %22 ], [ %s2, %23 ]

ST_145: vz_int_0_i [1/1] 0.00ns
svd2x2<float, float, float>.exit:1  %vz_int_0_i = phi float [ %vz_int, %22 ], [ %c2, %23 ]

ST_145: stg_888 [1/1] 2.71ns
svd2x2<float, float, float>.exit:6  store float %vw_int_0_i, float* %vw_new_addr, align 4

ST_145: stg_889 [1/1] 2.71ns
svd2x2<float, float, float>.exit:7  store float %vx_int_0_i, float* %vx_new_addr, align 4

ST_145: stg_890 [1/1] 2.71ns
svd2x2<float, float, float>.exit:8  store float %vy_int_0_i, float* %vy_new_addr, align 4

ST_145: stg_891 [1/1] 2.71ns
svd2x2<float, float, float>.exit:9  store float %vz_int_0_i, float* %vz_new_addr, align 4

ST_145: empty_13 [1/1] 0.00ns
svd2x2<float, float, float>.exit:10  %empty_13 = call i32 (...)* @_ssdm_op_SpecRegionEnd([8 x i8]* @p_str1815, i32 %tmp_25)

ST_145: stg_893 [1/1] 0.00ns
svd2x2<float, float, float>.exit:11  br label %.preheader11


 <State 146>: 3.44ns
ST_146: tmp_23 [1/1] 0.00ns (grouped into LUT with out node tmp_20)
.preheader10.preheader:0  %tmp_23 = trunc i10 %step_mid2 to i4

ST_146: tmp_13 [1/1] 0.00ns (grouped into LUT with out node tmp_20)
.preheader10.preheader:1  %tmp_13 = or i4 %tmp_23, %sweepnum_cast_mid2_v

ST_146: tmp_24 [1/1] 0.00ns (grouped into LUT with out node tmp_20)
.preheader10.preheader:2  %tmp_24 = call i6 @_ssdm_op_PartSelect.i6.i10.i32.i32(i10 %step_mid2, i32 4, i32 9)

ST_146: tmp_19 [1/1] 0.00ns (grouped into LUT with out node tmp_20)
.preheader10.preheader:3  %tmp_19 = call i10 @_ssdm_op_BitConcatenate.i10.i6.i4(i6 %tmp_24, i4 %tmp_13)

ST_146: tmp_20 [1/1] 2.07ns (out node of the LUT)
.preheader10.preheader:4  %tmp_20 = icmp eq i10 %tmp_19, 0

ST_146: sel_tmp2 [1/1] 1.37ns
.preheader10.preheader:5  %sel_tmp2 = xor i1 %tmp_20, true

ST_146: stg_900 [1/1] 1.57ns
.preheader10.preheader:6  br label %24


 <State 147>: 8.41ns
ST_147: indvar_flatten [1/1] 0.00ns
:0  %indvar_flatten = phi i18 [ 0, %.preheader10.preheader ], [ %indvar_flatten_next, %ifBlock1 ]

ST_147: px2 [1/1] 0.00ns
:1  %px2 = phi i9 [ 0, %.preheader10.preheader ], [ %p_v, %ifBlock1 ]

ST_147: off_px [1/1] 0.00ns
:2  %off_px = phi i9 [ 0, %.preheader10.preheader ], [ %off_px_1, %ifBlock1 ]

ST_147: tmp_28_cast [1/1] 0.00ns
:3  %tmp_28_cast = zext i9 %px2 to i10

ST_147: tmp_42 [1/1] 1.84ns
:4  %tmp_42 = add i10 %tmp_8_cast1, %tmp_28_cast

ST_147: tmp_144_cast [1/1] 0.00ns
:5  %tmp_144_cast = zext i10 %tmp_42 to i64

ST_147: diag2_i_addr_8 [1/1] 0.00ns
:6  %diag2_i_addr_8 = getelementptr [784 x i32]* %diag2_i, i64 0, i64 %tmp_144_cast

ST_147: diag1_i_addr_8 [1/1] 0.00ns
:7  %diag1_i_addr_8 = getelementptr [784 x i32]* %diag1_i, i64 0, i64 %tmp_144_cast

ST_147: c1_i_2 [2/2] 2.71ns
:8  %c1_i_2 = load i32* %diag1_i_addr_8, align 4

ST_147: c2_i [2/2] 2.71ns
:9  %c2_i = load i32* %diag2_i_addr_8, align 4

ST_147: tmp_34 [1/1] 2.03ns
:12  %tmp_34 = icmp eq i9 %px2, 0

ST_147: px_2 [1/1] 1.84ns
:13  %px_2 = add i9 %px2, 1

ST_147: tmp_35_cast [1/1] 0.00ns
:14  %tmp_35_cast = zext i9 %px_2 to i10

ST_147: tmp_36 [1/1] 2.03ns
:15  %tmp_36 = icmp eq i9 %px2, -121

ST_147: exitcond_flatten [1/1] 2.31ns
:16  %exitcond_flatten = icmp eq i18 %indvar_flatten, -108480

ST_147: indvar_flatten_next [1/1] 2.08ns
:17  %indvar_flatten_next = add i18 %indvar_flatten, 1

ST_147: stg_917 [1/1] 0.00ns
:18  br i1 %exitcond_flatten, label %30, label %.preheader10

ST_147: exitcond2 [1/1] 2.03ns
.preheader10:2  %exitcond2 = icmp eq i9 %off_px, -120

ST_147: off_px_mid2 [1/1] 1.37ns
.preheader10:3  %off_px_mid2 = select i1 %exitcond2, i9 0, i9 %off_px

ST_147: tmp_56 [1/1] 1.84ns
.preheader10:4  %tmp_56 = add i10 %tmp_35_cast, %tmp_8_cast1

ST_147: p_v [1/1] 1.37ns
.preheader10:8  %p_v = select i1 %exitcond2, i9 %px_2, i9 %px2

ST_147: tmp_34_mid1 [1/1] 2.03ns
.preheader10:29  %tmp_34_mid1 = icmp eq i9 %px_2, 0

ST_147: tmp_34_mid2 [1/1] 1.37ns
.preheader10:30  %tmp_34_mid2 = select i1 %exitcond2, i1 %tmp_34_mid1, i1 %tmp_34

ST_147: px_2_mid1 [1/1] 1.84ns
.preheader10:31  %px_2_mid1 = add i9 2, %px2

ST_147: tmp_135 [1/1] 0.00ns (grouped into LUT with out node tmp_137)
.preheader10:32  %tmp_135 = select i1 %exitcond2, i9 %px_2_mid1, i9 %px_2

ST_147: tmp_136 [1/1] 0.00ns (grouped into LUT with out node tmp_137)
.preheader10:33  %tmp_136 = call i10 @_ssdm_op_BitConcatenate.i10.i9.i1(i9 %tmp_135, i1 %OUTPUT_BANK)

ST_147: tmp_152_cast [1/1] 0.00ns (grouped into LUT with out node tmp_137)
.preheader10:34  %tmp_152_cast = zext i10 %tmp_136 to i21

ST_147: tmp_137 [1/1] 6.38ns (out node of the LUT)
.preheader10:35  %tmp_137 = mul i21 784, %tmp_152_cast

ST_147: tmp_36_mid1 [1/1] 2.03ns
.preheader10:36  %tmp_36_mid1 = icmp eq i9 %px_2, -121

ST_147: tmp_36_mid2 [1/1] 1.37ns
.preheader10:37  %tmp_36_mid2 = select i1 %exitcond2, i1 %tmp_36_mid1, i1 %tmp_36

ST_147: tmp_54 [1/1] 0.00ns
.preheader10:61  %tmp_54 = call i32 (...)* @_ssdm_op_SpecRegionBegin([14 x i8]* @p_str1817)

ST_147: tmp_44_cast [1/1] 0.00ns
.preheader10:64  %tmp_44_cast = zext i9 %off_px_mid2 to i10

ST_147: tmp_140 [1/1] 1.84ns
.preheader10:65  %tmp_140 = add i10 %tmp_44_cast, %tmp_8_cast1

ST_147: tmp_157_cast [1/1] 0.00ns
.preheader10:66  %tmp_157_cast = zext i10 %tmp_140 to i64

ST_147: diag2_i_addr_9 [1/1] 0.00ns
.preheader10:67  %diag2_i_addr_9 = getelementptr [784 x i32]* %diag2_i, i64 0, i64 %tmp_157_cast

ST_147: diag1_i_addr_9 [1/1] 0.00ns
.preheader10:68  %diag1_i_addr_9 = getelementptr [784 x i32]* %diag1_i, i64 0, i64 %tmp_157_cast

ST_147: d1_i [2/2] 2.71ns
.preheader10:69  %d1_i = load i32* %diag1_i_addr_9, align 4

ST_147: d2_i_3 [2/2] 2.71ns
.preheader10:70  %d2_i_3 = load i32* %diag2_i_addr_9, align 4

ST_147: stg_939 [1/1] 0.00ns
.preheader10:262  br i1 %tmp_34_mid2, label %25, label %26

ST_147: stg_940 [1/1] 0.00ns
:0  br i1 %tmp_36_mid2, label %27, label %28

ST_147: empty_14 [1/1] 0.00ns
ifBlock1:0  %empty_14 = call i32 (...)* @_ssdm_op_SpecRegionEnd([14 x i8]* @p_str1817, i32 %tmp_54)

ST_147: off_px_1 [1/1] 1.84ns
ifBlock1:1  %off_px_1 = add i9 %off_px_mid2, 1

ST_147: stg_943 [1/1] 0.00ns
ifBlock1:2  br label %24


 <State 148>: 6.60ns
ST_148: c1_i_2 [1/2] 2.71ns
:8  %c1_i_2 = load i32* %diag1_i_addr_8, align 4

ST_148: c2_i [1/2] 2.71ns
:9  %c2_i = load i32* %diag2_i_addr_8, align 4

ST_148: slt [1/1] 2.52ns
:10  %slt = icmp slt i32 %c1_i_2, %c2_i

ST_148: rev [1/1] 1.37ns
:11  %rev = xor i1 %slt, true

ST_148: tmp_145_cast [1/1] 0.00ns
.preheader10:5  %tmp_145_cast = zext i10 %tmp_56 to i64

ST_148: diag2_i_addr_10 [1/1] 0.00ns
.preheader10:6  %diag2_i_addr_10 = getelementptr [784 x i32]* %diag2_i, i64 0, i64 %tmp_145_cast

ST_148: diag1_i_addr_10 [1/1] 0.00ns
.preheader10:7  %diag1_i_addr_10 = getelementptr [784 x i32]* %diag1_i, i64 0, i64 %tmp_145_cast

ST_148: tmp_131 [1/1] 0.00ns
.preheader10:9  %tmp_131 = call i10 @_ssdm_op_BitConcatenate.i10.i9.i1(i9 %p_v, i1 %INPUT_BANK)

ST_148: tmp_147_cast [1/1] 0.00ns
.preheader10:10  %tmp_147_cast = zext i10 %tmp_131 to i21

ST_148: tmp_132 [1/1] 6.38ns
.preheader10:11  %tmp_132 = mul i21 784, %tmp_147_cast

ST_148: diag1_i_load_5 [2/2] 2.71ns
.preheader10:15  %diag1_i_load_5 = load i32* %diag1_i_addr_10, align 4

ST_148: diag2_i_load_5 [2/2] 2.71ns
.preheader10:16  %diag2_i_load_5 = load i32* %diag2_i_addr_10, align 4

ST_148: d1_i [1/2] 2.71ns
.preheader10:69  %d1_i = load i32* %diag1_i_addr_9, align 4

ST_148: d2_i_3 [1/2] 2.71ns
.preheader10:70  %d2_i_3 = load i32* %diag2_i_addr_9, align 4

ST_148: tmp_45 [1/1] 2.52ns
.preheader10:71  %tmp_45 = icmp slt i32 %d1_i, %d2_i_3

ST_148: tmp_141 [1/1] 0.00ns
.preheader10:74  %tmp_141 = trunc i32 %d1_i to i21

ST_148: tmp_142 [1/1] 0.00ns
.preheader10:75  %tmp_142 = trunc i32 %d2_i_3 to i21

ST_148: tmp_143 [1/1] 1.37ns
.preheader10:76  %tmp_143 = select i1 %tmp_45, i21 %tmp_141, i21 %tmp_142

ST_148: tmp_148 [1/1] 1.37ns
.preheader10:105  %tmp_148 = select i1 %tmp_45, i21 %tmp_142, i21 %tmp_141


 <State 149>: 6.60ns
ST_149: tmp_133 [1/1] 0.00ns
.preheader10:12  %tmp_133 = call i10 @_ssdm_op_BitConcatenate.i10.i9.i1(i9 %p_v, i1 %OUTPUT_BANK)

ST_149: tmp_149_cast [1/1] 0.00ns
.preheader10:13  %tmp_149_cast = zext i10 %tmp_133 to i21

ST_149: tmp_134 [1/1] 6.38ns
.preheader10:14  %tmp_134 = mul i21 784, %tmp_149_cast

ST_149: diag1_i_load_5 [1/2] 2.71ns
.preheader10:15  %diag1_i_load_5 = load i32* %diag1_i_addr_10, align 4

ST_149: diag2_i_load_5 [1/2] 2.71ns
.preheader10:16  %diag2_i_load_5 = load i32* %diag2_i_addr_10, align 4

ST_149: slt1 [1/1] 2.52ns
.preheader10:17  %slt1 = icmp slt i32 %diag1_i_load_5, %diag2_i_load_5

ST_149: rev1 [1/1] 0.00ns (grouped into LUT with out node not_tmp_mid2)
.preheader10:18  %rev1 = xor i1 %slt1, true

ST_149: not_tmp_mid2 [1/1] 1.37ns (out node of the LUT)
.preheader10:19  %not_tmp_mid2 = select i1 %exitcond2, i1 %rev1, i1 %rev

ST_149: tmp_144 [1/1] 2.20ns
.preheader10:77  %tmp_144 = add i21 %tmp_143, %tmp_132

ST_149: tmp_158_cast [1/1] 0.00ns
.preheader10:78  %tmp_158_cast = zext i21 %tmp_144 to i64

ST_149: v_col1_addr_1 [1/1] 0.00ns
.preheader10:79  %v_col1_addr_1 = getelementptr [614656 x float]* %v_col1, i64 0, i64 %tmp_158_cast

ST_149: s_col1_addr_4 [1/1] 0.00ns
.preheader10:86  %s_col1_addr_4 = getelementptr [614656 x float]* %s_col1, i64 0, i64 %tmp_158_cast

ST_149: v_col2_addr_1 [1/1] 0.00ns
.preheader10:89  %v_col2_addr_1 = getelementptr [614656 x float]* %v_col2, i64 0, i64 %tmp_158_cast

ST_149: u_col1_addr_1 [1/1] 0.00ns
.preheader10:94  %u_col1_addr_1 = getelementptr [614656 x float]* %u_col1, i64 0, i64 %tmp_158_cast

ST_149: u_col2_addr_1 [1/1] 0.00ns
.preheader10:97  %u_col2_addr_1 = getelementptr [614656 x float]* %u_col2, i64 0, i64 %tmp_158_cast

ST_149: s_col2_addr_4 [1/1] 0.00ns
.preheader10:100  %s_col2_addr_4 = getelementptr [614656 x float]* %s_col2, i64 0, i64 %tmp_158_cast

ST_149: uw_in [4/4] 2.61ns
.preheader10:103  %uw_in = load float* %u_col2_addr_1, align 4

ST_149: ux_in [4/4] 2.61ns
.preheader10:104  %ux_in = load float* %u_col1_addr_1, align 4

ST_149: tmp_149 [1/1] 2.20ns
.preheader10:106  %tmp_149 = add i21 %tmp_148, %tmp_132

ST_149: tmp_162_cast [1/1] 0.00ns
.preheader10:107  %tmp_162_cast = zext i21 %tmp_149 to i64

ST_149: v_col1_addr_2 [1/1] 0.00ns
.preheader10:108  %v_col1_addr_2 = getelementptr [614656 x float]* %v_col1, i64 0, i64 %tmp_162_cast

ST_149: s_col1_addr_5 [1/1] 0.00ns
.preheader10:115  %s_col1_addr_5 = getelementptr [614656 x float]* %s_col1, i64 0, i64 %tmp_162_cast

ST_149: v_col2_addr_2 [1/1] 0.00ns
.preheader10:118  %v_col2_addr_2 = getelementptr [614656 x float]* %v_col2, i64 0, i64 %tmp_162_cast

ST_149: u_col1_addr_2 [1/1] 0.00ns
.preheader10:123  %u_col1_addr_2 = getelementptr [614656 x float]* %u_col1, i64 0, i64 %tmp_162_cast

ST_149: u_col2_addr_2 [1/1] 0.00ns
.preheader10:126  %u_col2_addr_2 = getelementptr [614656 x float]* %u_col2, i64 0, i64 %tmp_162_cast

ST_149: s_col2_addr_5 [1/1] 0.00ns
.preheader10:129  %s_col2_addr_5 = getelementptr [614656 x float]* %s_col2, i64 0, i64 %tmp_162_cast

ST_149: uy_in [4/4] 2.61ns
.preheader10:132  %uy_in = load float* %u_col2_addr_2, align 4

ST_149: uz_in [4/4] 2.61ns
.preheader10:133  %uz_in = load float* %u_col1_addr_2, align 4

ST_149: vw_in [4/4] 2.61ns
.preheader10:134  %vw_in = load float* %v_col2_addr_1, align 4

ST_149: vx_in [4/4] 2.61ns
.preheader10:135  %vx_in = load float* %v_col1_addr_1, align 4

ST_149: vy_in [4/4] 2.61ns
.preheader10:136  %vy_in = load float* %v_col2_addr_2, align 4

ST_149: vz_in_3 [4/4] 2.61ns
.preheader10:137  %vz_in_3 = load float* %v_col1_addr_2, align 4

ST_149: w_in_8 [4/4] 2.61ns
.preheader10:154  %w_in_8 = load float* %s_col2_addr_4, align 4

ST_149: x_in_6 [4/4] 2.61ns
.preheader10:155  %x_in_6 = load float* %s_col1_addr_4, align 4

ST_149: y_in_8 [4/4] 2.61ns
.preheader10:156  %y_in_8 = load float* %s_col2_addr_5, align 4

ST_149: z_in_6 [4/4] 2.61ns
.preheader10:157  %z_in_6 = load float* %s_col1_addr_5, align 4


 <State 150>: 2.71ns
ST_150: uw_new_px_mid2_cast [1/1] 0.00ns
.preheader10:20  %uw_new_px_mid2_cast = zext i9 %p_v to i64

ST_150: diag_w_out_addr_1 [1/1] 0.00ns
.preheader10:43  %diag_w_out_addr_1 = getelementptr [392 x float]* %diag_w_out, i64 0, i64 %uw_new_px_mid2_cast

ST_150: diag_w_out_load [2/2] 2.71ns
.preheader10:44  %diag_w_out_load = load float* %diag_w_out_addr_1, align 4

ST_150: diag_x_out_addr_1 [1/1] 0.00ns
.preheader10:45  %diag_x_out_addr_1 = getelementptr [392 x float]* %diag_x_out, i64 0, i64 %uw_new_px_mid2_cast

ST_150: diag_x_out_load [2/2] 2.71ns
.preheader10:46  %diag_x_out_load = load float* %diag_x_out_addr_1, align 4

ST_150: diag_y_out_addr_1 [1/1] 0.00ns
.preheader10:47  %diag_y_out_addr_1 = getelementptr [392 x float]* %diag_y_out, i64 0, i64 %uw_new_px_mid2_cast

ST_150: diag_y_out_load [2/2] 2.71ns
.preheader10:48  %diag_y_out_load = load float* %diag_y_out_addr_1, align 4

ST_150: diag_z_out_addr_1 [1/1] 0.00ns
.preheader10:49  %diag_z_out_addr_1 = getelementptr [392 x float]* %diag_z_out, i64 0, i64 %uw_new_px_mid2_cast

ST_150: diag_z_out_load [2/2] 2.71ns
.preheader10:50  %diag_z_out_load = load float* %diag_z_out_addr_1, align 4

ST_150: uw_in [3/4] 2.61ns
.preheader10:103  %uw_in = load float* %u_col2_addr_1, align 4

ST_150: ux_in [3/4] 2.61ns
.preheader10:104  %ux_in = load float* %u_col1_addr_1, align 4

ST_150: uy_in [3/4] 2.61ns
.preheader10:132  %uy_in = load float* %u_col2_addr_2, align 4

ST_150: uz_in [3/4] 2.61ns
.preheader10:133  %uz_in = load float* %u_col1_addr_2, align 4

ST_150: vw_in [3/4] 2.61ns
.preheader10:134  %vw_in = load float* %v_col2_addr_1, align 4

ST_150: vx_in [3/4] 2.61ns
.preheader10:135  %vx_in = load float* %v_col1_addr_1, align 4

ST_150: vy_in [3/4] 2.61ns
.preheader10:136  %vy_in = load float* %v_col2_addr_2, align 4

ST_150: vz_in_3 [3/4] 2.61ns
.preheader10:137  %vz_in_3 = load float* %v_col1_addr_2, align 4

ST_150: w_in_8 [3/4] 2.61ns
.preheader10:154  %w_in_8 = load float* %s_col2_addr_4, align 4

ST_150: x_in_6 [3/4] 2.61ns
.preheader10:155  %x_in_6 = load float* %s_col1_addr_4, align 4

ST_150: y_in_8 [3/4] 2.61ns
.preheader10:156  %y_in_8 = load float* %s_col2_addr_5, align 4

ST_150: z_in_6 [3/4] 2.61ns
.preheader10:157  %z_in_6 = load float* %s_col1_addr_5, align 4


 <State 151>: 2.71ns
ST_151: diag_w_out_load [1/2] 2.71ns
.preheader10:44  %diag_w_out_load = load float* %diag_w_out_addr_1, align 4

ST_151: diag_x_out_load [1/2] 2.71ns
.preheader10:46  %diag_x_out_load = load float* %diag_x_out_addr_1, align 4

ST_151: diag_y_out_load [1/2] 2.71ns
.preheader10:48  %diag_y_out_load = load float* %diag_y_out_addr_1, align 4

ST_151: diag_z_out_load [1/2] 2.71ns
.preheader10:50  %diag_z_out_load = load float* %diag_z_out_addr_1, align 4

ST_151: tmp_44 [1/1] 0.00ns
.preheader10:63  %tmp_44 = zext i9 %off_px_mid2 to i64

ST_151: tmp_52 [1/1] 2.03ns
.preheader10:72  %tmp_52 = icmp eq i9 %p_v, %off_px_mid2

ST_151: uw_in [2/4] 2.61ns
.preheader10:103  %uw_in = load float* %u_col2_addr_1, align 4

ST_151: ux_in [2/4] 2.61ns
.preheader10:104  %ux_in = load float* %u_col1_addr_1, align 4

ST_151: uy_in [2/4] 2.61ns
.preheader10:132  %uy_in = load float* %u_col2_addr_2, align 4

ST_151: uz_in [2/4] 2.61ns
.preheader10:133  %uz_in = load float* %u_col1_addr_2, align 4

ST_151: vw_in [2/4] 2.61ns
.preheader10:134  %vw_in = load float* %v_col2_addr_1, align 4

ST_151: vx_in [2/4] 2.61ns
.preheader10:135  %vx_in = load float* %v_col1_addr_1, align 4

ST_151: vy_in [2/4] 2.61ns
.preheader10:136  %vy_in = load float* %v_col2_addr_2, align 4

ST_151: vz_in_3 [2/4] 2.61ns
.preheader10:137  %vz_in_3 = load float* %v_col1_addr_2, align 4

ST_151: w_in_8 [2/4] 2.61ns
.preheader10:154  %w_in_8 = load float* %s_col2_addr_4, align 4

ST_151: x_in_6 [2/4] 2.61ns
.preheader10:155  %x_in_6 = load float* %s_col1_addr_4, align 4

ST_151: y_in_8 [2/4] 2.61ns
.preheader10:156  %y_in_8 = load float* %s_col2_addr_5, align 4

ST_151: z_in_6 [2/4] 2.61ns
.preheader10:157  %z_in_6 = load float* %s_col1_addr_5, align 4

ST_151: tmp_57 [1/1] 2.03ns
.preheader10:168  %tmp_57 = icmp ult i9 %off_px_mid2, %p_v

ST_151: uw_new_addr_2 [1/1] 0.00ns
.preheader10:169  %uw_new_addr_2 = getelementptr inbounds [392 x float]* %uw_new, i64 0, i64 %tmp_44

ST_151: uw_new_load_1 [2/2] 2.71ns
.preheader10:170  %uw_new_load_1 = load float* %uw_new_addr_2, align 4

ST_151: uy_new_addr_2 [1/1] 0.00ns
.preheader10:171  %uy_new_addr_2 = getelementptr inbounds [392 x float]* %uy_new, i64 0, i64 %tmp_44

ST_151: uy_new_load_1 [2/2] 2.71ns
.preheader10:172  %uy_new_load_1 = load float* %uy_new_addr_2, align 4

ST_151: ux_new_addr_2 [1/1] 0.00ns
.preheader10:173  %ux_new_addr_2 = getelementptr inbounds [392 x float]* %ux_new, i64 0, i64 %tmp_44

ST_151: ux_new_load_1 [2/2] 2.71ns
.preheader10:174  %ux_new_load_1 = load float* %ux_new_addr_2, align 4

ST_151: uz_new_addr_2 [1/1] 0.00ns
.preheader10:175  %uz_new_addr_2 = getelementptr inbounds [392 x float]* %uz_new, i64 0, i64 %tmp_44

ST_151: uz_new_load_1 [2/2] 2.71ns
.preheader10:176  %uz_new_load_1 = load float* %uz_new_addr_2, align 4

ST_151: tmp_80 [1/1] 2.03ns
.preheader10:209  %tmp_80 = icmp ugt i9 %off_px_mid2, %p_v


 <State 152>: 9.68ns
ST_152: uw_new_addr_1 [1/1] 0.00ns
.preheader10:21  %uw_new_addr_1 = getelementptr [392 x float]* %uw_new, i64 0, i64 %uw_new_px_mid2_cast

ST_152: uw_new_load [2/2] 2.71ns
.preheader10:22  %uw_new_load = load float* %uw_new_addr_1, align 4

ST_152: ux_new_addr_1 [1/1] 0.00ns
.preheader10:23  %ux_new_addr_1 = getelementptr [392 x float]* %ux_new, i64 0, i64 %uw_new_px_mid2_cast

ST_152: ux_new_load [2/2] 2.71ns
.preheader10:24  %ux_new_load = load float* %ux_new_addr_1, align 4

ST_152: uy_new_addr_1 [1/1] 0.00ns
.preheader10:25  %uy_new_addr_1 = getelementptr [392 x float]* %uy_new, i64 0, i64 %uw_new_px_mid2_cast

ST_152: uy_new_load [2/2] 2.71ns
.preheader10:26  %uy_new_load = load float* %uy_new_addr_1, align 4

ST_152: uz_new_addr_1 [1/1] 0.00ns
.preheader10:27  %uz_new_addr_1 = getelementptr [392 x float]* %uz_new, i64 0, i64 %uw_new_px_mid2_cast

ST_152: uz_new_load [2/2] 2.71ns
.preheader10:28  %uz_new_load = load float* %uz_new_addr_1, align 4

ST_152: vw_new_addr_1 [1/1] 0.00ns
.preheader10:51  %vw_new_addr_1 = getelementptr [392 x float]* %vw_new, i64 0, i64 %uw_new_px_mid2_cast

ST_152: vw_new_load [2/2] 2.71ns
.preheader10:52  %vw_new_load = load float* %vw_new_addr_1, align 4

ST_152: vx_new_addr_1 [1/1] 0.00ns
.preheader10:53  %vx_new_addr_1 = getelementptr [392 x float]* %vx_new, i64 0, i64 %uw_new_px_mid2_cast

ST_152: vx_new_load [2/2] 2.71ns
.preheader10:54  %vx_new_load = load float* %vx_new_addr_1, align 4

ST_152: vy_new_addr_1 [1/1] 0.00ns
.preheader10:55  %vy_new_addr_1 = getelementptr [392 x float]* %vy_new, i64 0, i64 %uw_new_px_mid2_cast

ST_152: vy_new_load [2/2] 2.71ns
.preheader10:56  %vy_new_load = load float* %vy_new_addr_1, align 4

ST_152: vz_new_addr_1 [1/1] 0.00ns
.preheader10:57  %vz_new_addr_1 = getelementptr [392 x float]* %vz_new, i64 0, i64 %uw_new_px_mid2_cast

ST_152: vz_new_load [2/2] 2.71ns
.preheader10:58  %vz_new_load = load float* %vz_new_addr_1, align 4

ST_152: uw_in [1/4] 2.61ns
.preheader10:103  %uw_in = load float* %u_col2_addr_1, align 4

ST_152: ux_in [1/4] 2.61ns
.preheader10:104  %ux_in = load float* %u_col1_addr_1, align 4

ST_152: uy_in [1/4] 2.61ns
.preheader10:132  %uy_in = load float* %u_col2_addr_2, align 4

ST_152: uz_in [1/4] 2.61ns
.preheader10:133  %uz_in = load float* %u_col1_addr_2, align 4

ST_152: vw_in [1/4] 2.61ns
.preheader10:134  %vw_in = load float* %v_col2_addr_1, align 4

ST_152: vx_in [1/4] 2.61ns
.preheader10:135  %vx_in = load float* %v_col1_addr_1, align 4

ST_152: vy_in [1/4] 2.61ns
.preheader10:136  %vy_in = load float* %v_col2_addr_2, align 4

ST_152: vz_in_3 [1/4] 2.61ns
.preheader10:137  %vz_in_3 = load float* %v_col1_addr_2, align 4

ST_152: w_in_8 [1/4] 2.61ns
.preheader10:154  %w_in_8 = load float* %s_col2_addr_4, align 4

ST_152: x_in_6 [1/4] 2.61ns
.preheader10:155  %x_in_6 = load float* %s_col1_addr_4, align 4

ST_152: y_in_8 [1/4] 2.61ns
.preheader10:156  %y_in_8 = load float* %s_col2_addr_5, align 4

ST_152: z_in_6 [1/4] 2.61ns
.preheader10:157  %z_in_6 = load float* %s_col1_addr_5, align 4

ST_152: sel_tmp3 [1/1] 0.00ns (grouped into LUT with out node sel_tmp10)
.preheader10:158  %sel_tmp3 = xor i1 %tmp_52, true

ST_152: sel_tmp10 [1/1] 1.37ns (out node of the LUT)
.preheader10:159  %sel_tmp10 = and i1 %not_tmp_mid2, %sel_tmp3

ST_152: z_in_4 [1/1] 0.00ns (grouped into LUT with out node z_in_7)
.preheader10:160  %z_in_4 = select i1 %sel_tmp10, float %z_in_6, float %y_in_8

ST_152: z_in_7 [1/1] 1.37ns (out node of the LUT)
.preheader10:161  %z_in_7 = select i1 %tmp_52, float %diag_z_out_load, float %z_in_4

ST_152: y_in_4 [1/1] 0.00ns (grouped into LUT with out node y_in_9)
.preheader10:162  %y_in_4 = select i1 %sel_tmp10, float %y_in_8, float %z_in_6

ST_152: y_in_9 [1/1] 1.37ns (out node of the LUT)
.preheader10:163  %y_in_9 = select i1 %tmp_52, float %diag_y_out_load, float %y_in_4

ST_152: x_in_4 [1/1] 0.00ns (grouped into LUT with out node x_in_7)
.preheader10:164  %x_in_4 = select i1 %sel_tmp10, float %x_in_6, float %w_in_8

ST_152: x_in_7 [1/1] 1.37ns (out node of the LUT)
.preheader10:165  %x_in_7 = select i1 %tmp_52, float %diag_x_out_load, float %x_in_4

ST_152: w_in_4 [1/1] 0.00ns (grouped into LUT with out node w_in_9)
.preheader10:166  %w_in_4 = select i1 %sel_tmp10, float %w_in_8, float %x_in_6

ST_152: w_in_9 [1/1] 1.37ns (out node of the LUT)
.preheader10:167  %w_in_9 = select i1 %tmp_52, float %diag_w_out_load, float %w_in_4

ST_152: uw_new_load_1 [1/2] 2.71ns
.preheader10:170  %uw_new_load_1 = load float* %uw_new_addr_2, align 4

ST_152: uy_new_load_1 [1/2] 2.71ns
.preheader10:172  %uy_new_load_1 = load float* %uy_new_addr_2, align 4

ST_152: ux_new_load_1 [1/2] 2.71ns
.preheader10:174  %ux_new_load_1 = load float* %ux_new_addr_2, align 4

ST_152: uz_new_load_1 [1/2] 2.71ns
.preheader10:176  %uz_new_load_1 = load float* %uz_new_addr_2, align 4

ST_152: tmp_58 [4/4] 5.70ns
.preheader10:177  %tmp_58 = fmul float %uw_new_load_1, %w_in_9

ST_152: tmp_61 [4/4] 5.70ns
.preheader10:178  %tmp_61 = fmul float %uy_new_load_1, %y_in_9

ST_152: tmp_62 [4/4] 5.70ns
.preheader10:180  %tmp_62 = fmul float %uw_new_load_1, %x_in_7

ST_152: tmp_63 [4/4] 5.70ns
.preheader10:181  %tmp_63 = fmul float %uy_new_load_1, %z_in_7

ST_152: tmp_64 [4/4] 5.70ns
.preheader10:183  %tmp_64 = fmul float %ux_new_load_1, %w_in_9

ST_152: tmp_67 [4/4] 5.70ns
.preheader10:184  %tmp_67 = fmul float %uz_new_load_1, %y_in_9

ST_152: tmp_68 [4/4] 5.70ns
.preheader10:186  %tmp_68 = fmul float %ux_new_load_1, %x_in_7

ST_152: tmp_69 [4/4] 5.70ns
.preheader10:187  %tmp_69 = fmul float %uz_new_load_1, %z_in_7


 <State 153>: 8.44ns
ST_153: uw_new_load [1/2] 2.71ns
.preheader10:22  %uw_new_load = load float* %uw_new_addr_1, align 4

ST_153: ux_new_load [1/2] 2.71ns
.preheader10:24  %ux_new_load = load float* %ux_new_addr_1, align 4

ST_153: uy_new_load [1/2] 2.71ns
.preheader10:26  %uy_new_load = load float* %uy_new_addr_1, align 4

ST_153: uz_new_load [1/2] 2.71ns
.preheader10:28  %uz_new_load = load float* %uz_new_addr_1, align 4

ST_153: vw_new_load [1/2] 2.71ns
.preheader10:52  %vw_new_load = load float* %vw_new_addr_1, align 4

ST_153: vx_new_load [1/2] 2.71ns
.preheader10:54  %vx_new_load = load float* %vx_new_addr_1, align 4

ST_153: vy_new_load [1/2] 2.71ns
.preheader10:56  %vy_new_load = load float* %vy_new_addr_1, align 4

ST_153: vz_new_load [1/2] 2.71ns
.preheader10:58  %vz_new_load = load float* %vz_new_addr_1, align 4

ST_153: sel_tmp3_mid2 [1/1] 1.37ns
.preheader10:59  %sel_tmp3_mid2 = and i1 %not_tmp_mid2, %sel_tmp2

ST_153: vz_in [1/1] 1.37ns
.preheader10:73  %vz_in = select i1 %tmp_52, float 1.000000e+00, float 0.000000e+00

ST_153: sel_tmp9 [1/1] 0.00ns (grouped into LUT with out node a2_assign_8)
.preheader10:142  %sel_tmp9 = select i1 %tmp_20, float 0.000000e+00, float %vw_in

ST_153: a2_assign_8 [1/1] 1.37ns (out node of the LUT)
.preheader10:143  %a2_assign_8 = select i1 %sel_tmp3_mid2, float %vx_in, float %sel_tmp9

ST_153: sel_tmp1 [1/1] 0.00ns (grouped into LUT with out node a1_assign_7)
.preheader10:144  %sel_tmp1 = select i1 %tmp_20, float %vz_in, float %vx_in

ST_153: a1_assign_7 [1/1] 1.37ns (out node of the LUT)
.preheader10:145  %a1_assign_7 = select i1 %sel_tmp3_mid2, float %vw_in, float %sel_tmp1

ST_153: sel_tmp7 [1/1] 0.00ns (grouped into LUT with out node a2_assign_6)
.preheader10:150  %sel_tmp7 = select i1 %tmp_20, float 0.000000e+00, float %uw_in

ST_153: a2_assign_6 [1/1] 1.37ns (out node of the LUT)
.preheader10:151  %a2_assign_6 = select i1 %sel_tmp3_mid2, float %ux_in, float %sel_tmp7

ST_153: sel_tmp8 [1/1] 0.00ns (grouped into LUT with out node a1_assign_5)
.preheader10:152  %sel_tmp8 = select i1 %tmp_20, float %vz_in, float %ux_in

ST_153: a1_assign_5 [1/1] 1.37ns (out node of the LUT)
.preheader10:153  %a1_assign_5 = select i1 %sel_tmp3_mid2, float %uw_in, float %sel_tmp8

ST_153: tmp_58 [3/4] 5.70ns
.preheader10:177  %tmp_58 = fmul float %uw_new_load_1, %w_in_9

ST_153: tmp_61 [3/4] 5.70ns
.preheader10:178  %tmp_61 = fmul float %uy_new_load_1, %y_in_9

ST_153: tmp_62 [3/4] 5.70ns
.preheader10:180  %tmp_62 = fmul float %uw_new_load_1, %x_in_7

ST_153: tmp_63 [3/4] 5.70ns
.preheader10:181  %tmp_63 = fmul float %uy_new_load_1, %z_in_7

ST_153: tmp_64 [3/4] 5.70ns
.preheader10:183  %tmp_64 = fmul float %ux_new_load_1, %w_in_9

ST_153: tmp_67 [3/4] 5.70ns
.preheader10:184  %tmp_67 = fmul float %uz_new_load_1, %y_in_9

ST_153: tmp_68 [3/4] 5.70ns
.preheader10:186  %tmp_68 = fmul float %ux_new_load_1, %x_in_7

ST_153: tmp_69 [3/4] 5.70ns
.preheader10:187  %tmp_69 = fmul float %uz_new_load_1, %z_in_7

ST_153: tmp_91 [4/4] 5.70ns
.preheader10:226  %tmp_91 = fmul float %a1_assign_5, %uw_new_load

ST_153: tmp_92 [4/4] 5.70ns
.preheader10:227  %tmp_92 = fmul float %a2_assign_6, %uy_new_load

ST_153: tmp_93 [4/4] 5.70ns
.preheader10:229  %tmp_93 = fmul float %a1_assign_5, %ux_new_load

ST_153: tmp_96 [4/4] 5.70ns
.preheader10:230  %tmp_96 = fmul float %a2_assign_6, %uz_new_load

ST_153: tmp_103 [4/4] 5.70ns
.preheader10:238  %tmp_103 = fmul float %a1_assign_7, %vw_new_load

ST_153: tmp_104 [4/4] 5.70ns
.preheader10:239  %tmp_104 = fmul float %a2_assign_8, %vy_new_load

ST_153: tmp_105 [4/4] 5.70ns
.preheader10:241  %tmp_105 = fmul float %a1_assign_7, %vx_new_load

ST_153: tmp_106 [4/4] 5.70ns
.preheader10:242  %tmp_106 = fmul float %a2_assign_8, %vz_new_load


 <State 154>: 7.07ns
ST_154: sel_tmp [1/1] 0.00ns (grouped into LUT with out node a4_assign_2)
.preheader10:138  %sel_tmp = select i1 %tmp_20, float %vz_in, float %vy_in

ST_154: a4_assign_2 [1/1] 1.37ns (out node of the LUT)
.preheader10:139  %a4_assign_2 = select i1 %sel_tmp3_mid2, float %vz_in_3, float %sel_tmp

ST_154: sel_tmp5 [1/1] 0.00ns (grouped into LUT with out node a3_assign_2)
.preheader10:140  %sel_tmp5 = select i1 %tmp_20, float 0.000000e+00, float %vz_in_3

ST_154: a3_assign_2 [1/1] 1.37ns (out node of the LUT)
.preheader10:141  %a3_assign_2 = select i1 %sel_tmp3_mid2, float %vy_in, float %sel_tmp5

ST_154: sel_tmp4 [1/1] 0.00ns (grouped into LUT with out node a4_assign_1)
.preheader10:146  %sel_tmp4 = select i1 %tmp_20, float %vz_in, float %uy_in

ST_154: a4_assign_1 [1/1] 1.37ns (out node of the LUT)
.preheader10:147  %a4_assign_1 = select i1 %sel_tmp3_mid2, float %uz_in, float %sel_tmp4

ST_154: sel_tmp6 [1/1] 0.00ns (grouped into LUT with out node a3_assign_1)
.preheader10:148  %sel_tmp6 = select i1 %tmp_20, float 0.000000e+00, float %uz_in

ST_154: a3_assign_1 [1/1] 1.37ns (out node of the LUT)
.preheader10:149  %a3_assign_1 = select i1 %sel_tmp3_mid2, float %uy_in, float %sel_tmp6

ST_154: tmp_58 [2/4] 5.70ns
.preheader10:177  %tmp_58 = fmul float %uw_new_load_1, %w_in_9

ST_154: tmp_61 [2/4] 5.70ns
.preheader10:178  %tmp_61 = fmul float %uy_new_load_1, %y_in_9

ST_154: tmp_62 [2/4] 5.70ns
.preheader10:180  %tmp_62 = fmul float %uw_new_load_1, %x_in_7

ST_154: tmp_63 [2/4] 5.70ns
.preheader10:181  %tmp_63 = fmul float %uy_new_load_1, %z_in_7

ST_154: tmp_64 [2/4] 5.70ns
.preheader10:183  %tmp_64 = fmul float %ux_new_load_1, %w_in_9

ST_154: tmp_67 [2/4] 5.70ns
.preheader10:184  %tmp_67 = fmul float %uz_new_load_1, %y_in_9

ST_154: tmp_68 [2/4] 5.70ns
.preheader10:186  %tmp_68 = fmul float %ux_new_load_1, %x_in_7

ST_154: tmp_69 [2/4] 5.70ns
.preheader10:187  %tmp_69 = fmul float %uz_new_load_1, %z_in_7

ST_154: tmp_91 [3/4] 5.70ns
.preheader10:226  %tmp_91 = fmul float %a1_assign_5, %uw_new_load

ST_154: tmp_92 [3/4] 5.70ns
.preheader10:227  %tmp_92 = fmul float %a2_assign_6, %uy_new_load

ST_154: tmp_93 [3/4] 5.70ns
.preheader10:229  %tmp_93 = fmul float %a1_assign_5, %ux_new_load

ST_154: tmp_96 [3/4] 5.70ns
.preheader10:230  %tmp_96 = fmul float %a2_assign_6, %uz_new_load

ST_154: tmp_99 [4/4] 5.70ns
.preheader10:232  %tmp_99 = fmul float %a3_assign_1, %uw_new_load

ST_154: tmp_100 [4/4] 5.70ns
.preheader10:233  %tmp_100 = fmul float %a4_assign_1, %uy_new_load

ST_154: tmp_101 [4/4] 5.70ns
.preheader10:235  %tmp_101 = fmul float %a3_assign_1, %ux_new_load

ST_154: tmp_102 [4/4] 5.70ns
.preheader10:236  %tmp_102 = fmul float %a4_assign_1, %uz_new_load

ST_154: tmp_103 [3/4] 5.70ns
.preheader10:238  %tmp_103 = fmul float %a1_assign_7, %vw_new_load

ST_154: tmp_104 [3/4] 5.70ns
.preheader10:239  %tmp_104 = fmul float %a2_assign_8, %vy_new_load

ST_154: tmp_105 [3/4] 5.70ns
.preheader10:241  %tmp_105 = fmul float %a1_assign_7, %vx_new_load

ST_154: tmp_106 [3/4] 5.70ns
.preheader10:242  %tmp_106 = fmul float %a2_assign_8, %vz_new_load

ST_154: tmp_107 [4/4] 5.70ns
.preheader10:244  %tmp_107 = fmul float %a3_assign_2, %vw_new_load

ST_154: tmp_108 [4/4] 5.70ns
.preheader10:245  %tmp_108 = fmul float %a4_assign_2, %vy_new_load

ST_154: tmp_109 [4/4] 5.70ns
.preheader10:247  %tmp_109 = fmul float %a3_assign_2, %vx_new_load

ST_154: tmp_110 [4/4] 5.70ns
.preheader10:248  %tmp_110 = fmul float %a4_assign_2, %vz_new_load


 <State 155>: 12.96ns
ST_155: tmp_58 [1/4] 5.70ns
.preheader10:177  %tmp_58 = fmul float %uw_new_load_1, %w_in_9

ST_155: tmp_61 [1/4] 5.70ns
.preheader10:178  %tmp_61 = fmul float %uy_new_load_1, %y_in_9

ST_155: w_int1 [5/5] 7.26ns
.preheader10:179  %w_int1 = fadd float %tmp_58, %tmp_61

ST_155: tmp_62 [1/4] 5.70ns
.preheader10:180  %tmp_62 = fmul float %uw_new_load_1, %x_in_7

ST_155: tmp_63 [1/4] 5.70ns
.preheader10:181  %tmp_63 = fmul float %uy_new_load_1, %z_in_7

ST_155: x_int1 [5/5] 7.26ns
.preheader10:182  %x_int1 = fadd float %tmp_62, %tmp_63

ST_155: tmp_64 [1/4] 5.70ns
.preheader10:183  %tmp_64 = fmul float %ux_new_load_1, %w_in_9

ST_155: tmp_67 [1/4] 5.70ns
.preheader10:184  %tmp_67 = fmul float %uz_new_load_1, %y_in_9

ST_155: y_int1 [5/5] 7.26ns
.preheader10:185  %y_int1 = fadd float %tmp_64, %tmp_67

ST_155: tmp_68 [1/4] 5.70ns
.preheader10:186  %tmp_68 = fmul float %ux_new_load_1, %x_in_7

ST_155: tmp_69 [1/4] 5.70ns
.preheader10:187  %tmp_69 = fmul float %uz_new_load_1, %z_in_7

ST_155: z_int1 [5/5] 7.26ns
.preheader10:188  %z_int1 = fadd float %tmp_68, %tmp_69

ST_155: tmp_91 [2/4] 5.70ns
.preheader10:226  %tmp_91 = fmul float %a1_assign_5, %uw_new_load

ST_155: tmp_92 [2/4] 5.70ns
.preheader10:227  %tmp_92 = fmul float %a2_assign_6, %uy_new_load

ST_155: tmp_93 [2/4] 5.70ns
.preheader10:229  %tmp_93 = fmul float %a1_assign_5, %ux_new_load

ST_155: tmp_96 [2/4] 5.70ns
.preheader10:230  %tmp_96 = fmul float %a2_assign_6, %uz_new_load

ST_155: tmp_99 [3/4] 5.70ns
.preheader10:232  %tmp_99 = fmul float %a3_assign_1, %uw_new_load

ST_155: tmp_100 [3/4] 5.70ns
.preheader10:233  %tmp_100 = fmul float %a4_assign_1, %uy_new_load

ST_155: tmp_101 [3/4] 5.70ns
.preheader10:235  %tmp_101 = fmul float %a3_assign_1, %ux_new_load

ST_155: tmp_102 [3/4] 5.70ns
.preheader10:236  %tmp_102 = fmul float %a4_assign_1, %uz_new_load

ST_155: tmp_103 [2/4] 5.70ns
.preheader10:238  %tmp_103 = fmul float %a1_assign_7, %vw_new_load

ST_155: tmp_104 [2/4] 5.70ns
.preheader10:239  %tmp_104 = fmul float %a2_assign_8, %vy_new_load

ST_155: tmp_105 [2/4] 5.70ns
.preheader10:241  %tmp_105 = fmul float %a1_assign_7, %vx_new_load

ST_155: tmp_106 [2/4] 5.70ns
.preheader10:242  %tmp_106 = fmul float %a2_assign_8, %vz_new_load

ST_155: tmp_107 [3/4] 5.70ns
.preheader10:244  %tmp_107 = fmul float %a3_assign_2, %vw_new_load

ST_155: tmp_108 [3/4] 5.70ns
.preheader10:245  %tmp_108 = fmul float %a4_assign_2, %vy_new_load

ST_155: tmp_109 [3/4] 5.70ns
.preheader10:247  %tmp_109 = fmul float %a3_assign_2, %vx_new_load

ST_155: tmp_110 [3/4] 5.70ns
.preheader10:248  %tmp_110 = fmul float %a4_assign_2, %vz_new_load


 <State 156>: 7.26ns
ST_156: w_int1 [4/5] 7.26ns
.preheader10:179  %w_int1 = fadd float %tmp_58, %tmp_61

ST_156: x_int1 [4/5] 7.26ns
.preheader10:182  %x_int1 = fadd float %tmp_62, %tmp_63

ST_156: y_int1 [4/5] 7.26ns
.preheader10:185  %y_int1 = fadd float %tmp_64, %tmp_67

ST_156: z_int1 [4/5] 7.26ns
.preheader10:188  %z_int1 = fadd float %tmp_68, %tmp_69

ST_156: tmp_91 [1/4] 5.70ns
.preheader10:226  %tmp_91 = fmul float %a1_assign_5, %uw_new_load

ST_156: tmp_92 [1/4] 5.70ns
.preheader10:227  %tmp_92 = fmul float %a2_assign_6, %uy_new_load

ST_156: tmp_93 [1/4] 5.70ns
.preheader10:229  %tmp_93 = fmul float %a1_assign_5, %ux_new_load

ST_156: tmp_96 [1/4] 5.70ns
.preheader10:230  %tmp_96 = fmul float %a2_assign_6, %uz_new_load

ST_156: tmp_99 [2/4] 5.70ns
.preheader10:232  %tmp_99 = fmul float %a3_assign_1, %uw_new_load

ST_156: tmp_100 [2/4] 5.70ns
.preheader10:233  %tmp_100 = fmul float %a4_assign_1, %uy_new_load

ST_156: tmp_101 [2/4] 5.70ns
.preheader10:235  %tmp_101 = fmul float %a3_assign_1, %ux_new_load

ST_156: tmp_102 [2/4] 5.70ns
.preheader10:236  %tmp_102 = fmul float %a4_assign_1, %uz_new_load

ST_156: tmp_103 [1/4] 5.70ns
.preheader10:238  %tmp_103 = fmul float %a1_assign_7, %vw_new_load

ST_156: tmp_104 [1/4] 5.70ns
.preheader10:239  %tmp_104 = fmul float %a2_assign_8, %vy_new_load

ST_156: tmp_105 [1/4] 5.70ns
.preheader10:241  %tmp_105 = fmul float %a1_assign_7, %vx_new_load

ST_156: tmp_106 [1/4] 5.70ns
.preheader10:242  %tmp_106 = fmul float %a2_assign_8, %vz_new_load

ST_156: tmp_107 [2/4] 5.70ns
.preheader10:244  %tmp_107 = fmul float %a3_assign_2, %vw_new_load

ST_156: tmp_108 [2/4] 5.70ns
.preheader10:245  %tmp_108 = fmul float %a4_assign_2, %vy_new_load

ST_156: tmp_109 [2/4] 5.70ns
.preheader10:247  %tmp_109 = fmul float %a3_assign_2, %vx_new_load

ST_156: tmp_110 [2/4] 5.70ns
.preheader10:248  %tmp_110 = fmul float %a4_assign_2, %vz_new_load


 <State 157>: 7.26ns
ST_157: w_int1 [3/5] 7.26ns
.preheader10:179  %w_int1 = fadd float %tmp_58, %tmp_61

ST_157: x_int1 [3/5] 7.26ns
.preheader10:182  %x_int1 = fadd float %tmp_62, %tmp_63

ST_157: y_int1 [3/5] 7.26ns
.preheader10:185  %y_int1 = fadd float %tmp_64, %tmp_67

ST_157: z_int1 [3/5] 7.26ns
.preheader10:188  %z_int1 = fadd float %tmp_68, %tmp_69

ST_157: ux_out_sel [5/5] 7.26ns
.preheader10:228  %ux_out_sel = fadd float %tmp_91, %tmp_92

ST_157: uw_out_sel [5/5] 7.26ns
.preheader10:231  %uw_out_sel = fadd float %tmp_93, %tmp_96

ST_157: tmp_99 [1/4] 5.70ns
.preheader10:232  %tmp_99 = fmul float %a3_assign_1, %uw_new_load

ST_157: tmp_100 [1/4] 5.70ns
.preheader10:233  %tmp_100 = fmul float %a4_assign_1, %uy_new_load

ST_157: tmp_101 [1/4] 5.70ns
.preheader10:235  %tmp_101 = fmul float %a3_assign_1, %ux_new_load

ST_157: tmp_102 [1/4] 5.70ns
.preheader10:236  %tmp_102 = fmul float %a4_assign_1, %uz_new_load

ST_157: vx_out_sel [5/5] 7.26ns
.preheader10:240  %vx_out_sel = fadd float %tmp_103, %tmp_104

ST_157: vw_out_sel [5/5] 7.26ns
.preheader10:243  %vw_out_sel = fadd float %tmp_105, %tmp_106

ST_157: tmp_107 [1/4] 5.70ns
.preheader10:244  %tmp_107 = fmul float %a3_assign_2, %vw_new_load

ST_157: tmp_108 [1/4] 5.70ns
.preheader10:245  %tmp_108 = fmul float %a4_assign_2, %vy_new_load

ST_157: tmp_109 [1/4] 5.70ns
.preheader10:247  %tmp_109 = fmul float %a3_assign_2, %vx_new_load

ST_157: tmp_110 [1/4] 5.70ns
.preheader10:248  %tmp_110 = fmul float %a4_assign_2, %vz_new_load


 <State 158>: 7.26ns
ST_158: w_int1 [2/5] 7.26ns
.preheader10:179  %w_int1 = fadd float %tmp_58, %tmp_61

ST_158: x_int1 [2/5] 7.26ns
.preheader10:182  %x_int1 = fadd float %tmp_62, %tmp_63

ST_158: y_int1 [2/5] 7.26ns
.preheader10:185  %y_int1 = fadd float %tmp_64, %tmp_67

ST_158: z_int1 [2/5] 7.26ns
.preheader10:188  %z_int1 = fadd float %tmp_68, %tmp_69

ST_158: ux_out_sel [4/5] 7.26ns
.preheader10:228  %ux_out_sel = fadd float %tmp_91, %tmp_92

ST_158: uw_out_sel [4/5] 7.26ns
.preheader10:231  %uw_out_sel = fadd float %tmp_93, %tmp_96

ST_158: uz_out_sel [5/5] 7.26ns
.preheader10:234  %uz_out_sel = fadd float %tmp_99, %tmp_100

ST_158: uy_out_sel [5/5] 7.26ns
.preheader10:237  %uy_out_sel = fadd float %tmp_101, %tmp_102

ST_158: vx_out_sel [4/5] 7.26ns
.preheader10:240  %vx_out_sel = fadd float %tmp_103, %tmp_104

ST_158: vw_out_sel [4/5] 7.26ns
.preheader10:243  %vw_out_sel = fadd float %tmp_105, %tmp_106

ST_158: vz_out_sel [5/5] 7.26ns
.preheader10:246  %vz_out_sel = fadd float %tmp_107, %tmp_108

ST_158: vy_out_sel [5/5] 7.26ns
.preheader10:249  %vy_out_sel = fadd float %tmp_109, %tmp_110


 <State 159>: 14.33ns
ST_159: w_int1 [1/5] 7.26ns
.preheader10:179  %w_int1 = fadd float %tmp_58, %tmp_61

ST_159: x_int1 [1/5] 7.26ns
.preheader10:182  %x_int1 = fadd float %tmp_62, %tmp_63

ST_159: y_int1 [1/5] 7.26ns
.preheader10:185  %y_int1 = fadd float %tmp_64, %tmp_67

ST_159: z_int1 [1/5] 7.26ns
.preheader10:188  %z_int1 = fadd float %tmp_68, %tmp_69

ST_159: x_int1_3 [1/1] 1.37ns
.preheader10:189  %x_int1_3 = select i1 %tmp_57, float %x_int1, float %x_in_7

ST_159: w_int1_3 [1/1] 1.37ns
.preheader10:190  %w_int1_3 = select i1 %tmp_57, float %w_int1, float %w_in_9

ST_159: y_int1_3 [1/1] 1.37ns
.preheader10:191  %y_int1_3 = select i1 %tmp_57, float %y_int1, float %y_in_9

ST_159: z_int1_3 [1/1] 1.37ns
.preheader10:192  %z_int1_3 = select i1 %tmp_57, float %z_int1, float %z_in_7

ST_159: tmp_70 [4/4] 5.70ns
.preheader10:193  %tmp_70 = fmul float %w_int1_3, %vw_new_load

ST_159: tmp_71 [4/4] 5.70ns
.preheader10:194  %tmp_71 = fmul float %x_int1_3, %vy_new_load

ST_159: tmp_73 [4/4] 5.70ns
.preheader10:196  %tmp_73 = fmul float %w_int1_3, %vx_new_load

ST_159: tmp_75 [4/4] 5.70ns
.preheader10:197  %tmp_75 = fmul float %x_int1_3, %vz_new_load

ST_159: tmp_76 [4/4] 5.70ns
.preheader10:199  %tmp_76 = fmul float %y_int1_3, %vw_new_load

ST_159: tmp_77 [4/4] 5.70ns
.preheader10:200  %tmp_77 = fmul float %z_int1_3, %vy_new_load

ST_159: tmp_78 [4/4] 5.70ns
.preheader10:202  %tmp_78 = fmul float %y_int1_3, %vx_new_load

ST_159: tmp_79 [4/4] 5.70ns
.preheader10:203  %tmp_79 = fmul float %z_int1_3, %vz_new_load

ST_159: ux_out_sel [3/5] 7.26ns
.preheader10:228  %ux_out_sel = fadd float %tmp_91, %tmp_92

ST_159: uw_out_sel [3/5] 7.26ns
.preheader10:231  %uw_out_sel = fadd float %tmp_93, %tmp_96

ST_159: uz_out_sel [4/5] 7.26ns
.preheader10:234  %uz_out_sel = fadd float %tmp_99, %tmp_100

ST_159: uy_out_sel [4/5] 7.26ns
.preheader10:237  %uy_out_sel = fadd float %tmp_101, %tmp_102

ST_159: vx_out_sel [3/5] 7.26ns
.preheader10:240  %vx_out_sel = fadd float %tmp_103, %tmp_104

ST_159: vw_out_sel [3/5] 7.26ns
.preheader10:243  %vw_out_sel = fadd float %tmp_105, %tmp_106

ST_159: vz_out_sel [4/5] 7.26ns
.preheader10:246  %vz_out_sel = fadd float %tmp_107, %tmp_108

ST_159: vy_out_sel [4/5] 7.26ns
.preheader10:249  %vy_out_sel = fadd float %tmp_109, %tmp_110


 <State 160>: 7.26ns
ST_160: tmp_70 [3/4] 5.70ns
.preheader10:193  %tmp_70 = fmul float %w_int1_3, %vw_new_load

ST_160: tmp_71 [3/4] 5.70ns
.preheader10:194  %tmp_71 = fmul float %x_int1_3, %vy_new_load

ST_160: tmp_73 [3/4] 5.70ns
.preheader10:196  %tmp_73 = fmul float %w_int1_3, %vx_new_load

ST_160: tmp_75 [3/4] 5.70ns
.preheader10:197  %tmp_75 = fmul float %x_int1_3, %vz_new_load

ST_160: tmp_76 [3/4] 5.70ns
.preheader10:199  %tmp_76 = fmul float %y_int1_3, %vw_new_load

ST_160: tmp_77 [3/4] 5.70ns
.preheader10:200  %tmp_77 = fmul float %z_int1_3, %vy_new_load

ST_160: tmp_78 [3/4] 5.70ns
.preheader10:202  %tmp_78 = fmul float %y_int1_3, %vx_new_load

ST_160: tmp_79 [3/4] 5.70ns
.preheader10:203  %tmp_79 = fmul float %z_int1_3, %vz_new_load

ST_160: ux_out_sel [2/5] 7.26ns
.preheader10:228  %ux_out_sel = fadd float %tmp_91, %tmp_92

ST_160: uw_out_sel [2/5] 7.26ns
.preheader10:231  %uw_out_sel = fadd float %tmp_93, %tmp_96

ST_160: uz_out_sel [3/5] 7.26ns
.preheader10:234  %uz_out_sel = fadd float %tmp_99, %tmp_100

ST_160: uy_out_sel [3/5] 7.26ns
.preheader10:237  %uy_out_sel = fadd float %tmp_101, %tmp_102

ST_160: vx_out_sel [2/5] 7.26ns
.preheader10:240  %vx_out_sel = fadd float %tmp_103, %tmp_104

ST_160: vw_out_sel [2/5] 7.26ns
.preheader10:243  %vw_out_sel = fadd float %tmp_105, %tmp_106

ST_160: vz_out_sel [3/5] 7.26ns
.preheader10:246  %vz_out_sel = fadd float %tmp_107, %tmp_108

ST_160: vy_out_sel [3/5] 7.26ns
.preheader10:249  %vy_out_sel = fadd float %tmp_109, %tmp_110


 <State 161>: 8.22ns
ST_161: tmp_38_mid2_v_v [1/1] 0.00ns
.preheader10:38  %tmp_38_mid2_v_v = zext i9 %p_v to i10

ST_161: tmp_38_mid2_v [1/1] 1.84ns
.preheader10:39  %tmp_38_mid2_v = add i10 -1, %tmp_38_mid2_v_v

ST_161: tmp_138 [1/1] 0.00ns
.preheader10:40  %tmp_138 = call i11 @_ssdm_op_BitConcatenate.i11.i10.i1(i10 %tmp_38_mid2_v, i1 %OUTPUT_BANK)

ST_161: tmp_155_cast [1/1] 0.00ns
.preheader10:41  %tmp_155_cast = sext i11 %tmp_138 to i21

ST_161: tmp_139 [1/1] 6.38ns
.preheader10:42  %tmp_139 = mul i21 784, %tmp_155_cast

ST_161: tmp_70 [2/4] 5.70ns
.preheader10:193  %tmp_70 = fmul float %w_int1_3, %vw_new_load

ST_161: tmp_71 [2/4] 5.70ns
.preheader10:194  %tmp_71 = fmul float %x_int1_3, %vy_new_load

ST_161: tmp_73 [2/4] 5.70ns
.preheader10:196  %tmp_73 = fmul float %w_int1_3, %vx_new_load

ST_161: tmp_75 [2/4] 5.70ns
.preheader10:197  %tmp_75 = fmul float %x_int1_3, %vz_new_load

ST_161: tmp_76 [2/4] 5.70ns
.preheader10:199  %tmp_76 = fmul float %y_int1_3, %vw_new_load

ST_161: tmp_77 [2/4] 5.70ns
.preheader10:200  %tmp_77 = fmul float %z_int1_3, %vy_new_load

ST_161: tmp_78 [2/4] 5.70ns
.preheader10:202  %tmp_78 = fmul float %y_int1_3, %vx_new_load

ST_161: tmp_79 [2/4] 5.70ns
.preheader10:203  %tmp_79 = fmul float %z_int1_3, %vz_new_load

ST_161: ux_out_sel [1/5] 7.26ns
.preheader10:228  %ux_out_sel = fadd float %tmp_91, %tmp_92

ST_161: uw_out_sel [1/5] 7.26ns
.preheader10:231  %uw_out_sel = fadd float %tmp_93, %tmp_96

ST_161: uz_out_sel [2/5] 7.26ns
.preheader10:234  %uz_out_sel = fadd float %tmp_99, %tmp_100

ST_161: uy_out_sel [2/5] 7.26ns
.preheader10:237  %uy_out_sel = fadd float %tmp_101, %tmp_102

ST_161: vx_out_sel [1/5] 7.26ns
.preheader10:240  %vx_out_sel = fadd float %tmp_103, %tmp_104

ST_161: vw_out_sel [1/5] 7.26ns
.preheader10:243  %vw_out_sel = fadd float %tmp_105, %tmp_106

ST_161: vz_out_sel [2/5] 7.26ns
.preheader10:246  %vz_out_sel = fadd float %tmp_107, %tmp_108

ST_161: vy_out_sel [2/5] 7.26ns
.preheader10:249  %vy_out_sel = fadd float %tmp_109, %tmp_110


 <State 162>: 12.96ns
ST_162: tmp_145 [1/1] 2.20ns
.preheader10:80  %tmp_145 = add i21 %tmp_143, %tmp_134

ST_162: tmp_159_cast [1/1] 0.00ns
.preheader10:81  %tmp_159_cast = zext i21 %tmp_145 to i64

ST_162: v_col1_addr_3 [1/1] 0.00ns
.preheader10:82  %v_col1_addr_3 = getelementptr [614656 x float]* %v_col1, i64 0, i64 %tmp_159_cast

ST_162: tmp_146 [1/1] 2.20ns
.preheader10:83  %tmp_146 = add i21 %tmp_143, %tmp_137

ST_162: tmp_160_cast [1/1] 0.00ns
.preheader10:84  %tmp_160_cast = zext i21 %tmp_146 to i64

ST_162: v_col1_addr_4 [1/1] 0.00ns
.preheader10:85  %v_col1_addr_4 = getelementptr [614656 x float]* %v_col1, i64 0, i64 %tmp_160_cast

ST_162: s_col1_addr_6 [1/1] 0.00ns
.preheader10:87  %s_col1_addr_6 = getelementptr [614656 x float]* %s_col1, i64 0, i64 %tmp_159_cast

ST_162: s_col1_addr_7 [1/1] 0.00ns
.preheader10:88  %s_col1_addr_7 = getelementptr [614656 x float]* %s_col1, i64 0, i64 %tmp_160_cast

ST_162: v_col2_addr_3 [1/1] 0.00ns
.preheader10:90  %v_col2_addr_3 = getelementptr [614656 x float]* %v_col2, i64 0, i64 %tmp_159_cast

ST_162: tmp_147 [1/1] 2.20ns
.preheader10:91  %tmp_147 = add i21 %tmp_143, %tmp_139

ST_162: tmp_161_cast [1/1] 0.00ns
.preheader10:92  %tmp_161_cast = sext i21 %tmp_147 to i64

ST_162: v_col2_addr_4 [1/1] 0.00ns
.preheader10:93  %v_col2_addr_4 = getelementptr [614656 x float]* %v_col2, i64 0, i64 %tmp_161_cast

ST_162: u_col1_addr_3 [1/1] 0.00ns
.preheader10:95  %u_col1_addr_3 = getelementptr [614656 x float]* %u_col1, i64 0, i64 %tmp_159_cast

ST_162: u_col1_addr_4 [1/1] 0.00ns
.preheader10:96  %u_col1_addr_4 = getelementptr [614656 x float]* %u_col1, i64 0, i64 %tmp_160_cast

ST_162: u_col2_addr_3 [1/1] 0.00ns
.preheader10:98  %u_col2_addr_3 = getelementptr [614656 x float]* %u_col2, i64 0, i64 %tmp_159_cast

ST_162: u_col2_addr_4 [1/1] 0.00ns
.preheader10:99  %u_col2_addr_4 = getelementptr [614656 x float]* %u_col2, i64 0, i64 %tmp_161_cast

ST_162: s_col2_addr_6 [1/1] 0.00ns
.preheader10:101  %s_col2_addr_6 = getelementptr [614656 x float]* %s_col2, i64 0, i64 %tmp_159_cast

ST_162: s_col2_addr_7 [1/1] 0.00ns
.preheader10:102  %s_col2_addr_7 = getelementptr [614656 x float]* %s_col2, i64 0, i64 %tmp_161_cast

ST_162: tmp_150 [1/1] 2.20ns
.preheader10:109  %tmp_150 = add i21 %tmp_148, %tmp_134

ST_162: tmp_151 [1/1] 2.20ns
.preheader10:112  %tmp_151 = add i21 %tmp_148, %tmp_137

ST_162: tmp_152 [1/1] 2.20ns
.preheader10:120  %tmp_152 = add i21 %tmp_148, %tmp_139

ST_162: tmp_70 [1/4] 5.70ns
.preheader10:193  %tmp_70 = fmul float %w_int1_3, %vw_new_load

ST_162: tmp_71 [1/4] 5.70ns
.preheader10:194  %tmp_71 = fmul float %x_int1_3, %vy_new_load

ST_162: w_int2 [5/5] 7.26ns
.preheader10:195  %w_int2 = fadd float %tmp_70, %tmp_71

ST_162: tmp_73 [1/4] 5.70ns
.preheader10:196  %tmp_73 = fmul float %w_int1_3, %vx_new_load

ST_162: tmp_75 [1/4] 5.70ns
.preheader10:197  %tmp_75 = fmul float %x_int1_3, %vz_new_load

ST_162: x_int2 [5/5] 7.26ns
.preheader10:198  %x_int2 = fadd float %tmp_73, %tmp_75

ST_162: tmp_76 [1/4] 5.70ns
.preheader10:199  %tmp_76 = fmul float %y_int1_3, %vw_new_load

ST_162: tmp_77 [1/4] 5.70ns
.preheader10:200  %tmp_77 = fmul float %z_int1_3, %vy_new_load

ST_162: y_int2 [5/5] 7.26ns
.preheader10:201  %y_int2 = fadd float %tmp_76, %tmp_77

ST_162: tmp_78 [1/4] 5.70ns
.preheader10:202  %tmp_78 = fmul float %y_int1_3, %vx_new_load

ST_162: tmp_79 [1/4] 5.70ns
.preheader10:203  %tmp_79 = fmul float %z_int1_3, %vz_new_load

ST_162: z_int2 [5/5] 7.26ns
.preheader10:204  %z_int2 = fadd float %tmp_78, %tmp_79

ST_162: uz_out_sel [1/5] 7.26ns
.preheader10:234  %uz_out_sel = fadd float %tmp_99, %tmp_100

ST_162: uy_out_sel [1/5] 7.26ns
.preheader10:237  %uy_out_sel = fadd float %tmp_101, %tmp_102

ST_162: vz_out_sel [1/5] 7.26ns
.preheader10:246  %vz_out_sel = fadd float %tmp_107, %tmp_108

ST_162: vy_out_sel [1/5] 7.26ns
.preheader10:249  %vy_out_sel = fadd float %tmp_109, %tmp_110

ST_162: vw_out_0_vx_out [1/1] 1.37ns
.preheader10:252  %vw_out_0_vx_out = select i1 %not_tmp_mid2, float %vx_out_sel, float %vw_out_sel

ST_162: vx_out_0_vw_out [1/1] 1.37ns
.preheader10:253  %vx_out_0_vw_out = select i1 %not_tmp_mid2, float %vw_out_sel, float %vx_out_sel

ST_162: uw_out_0_ux_out [1/1] 1.37ns
.preheader10:256  %uw_out_0_ux_out = select i1 %not_tmp_mid2, float %ux_out_sel, float %uw_out_sel

ST_162: ux_out_0_uw_out [1/1] 1.37ns
.preheader10:257  %ux_out_0_uw_out = select i1 %not_tmp_mid2, float %uw_out_sel, float %ux_out_sel

ST_162: stg_1342 [2/2] 2.61ns
:4  store float %ux_out_0_uw_out, float* %u_col1_addr_4, align 4

ST_162: stg_1343 [2/2] 2.61ns
:5  store float %uw_out_0_ux_out, float* %u_col2_addr_4, align 4

ST_162: stg_1344 [2/2] 2.61ns
:8  store float %vx_out_0_vw_out, float* %v_col1_addr_4, align 4

ST_162: stg_1345 [2/2] 2.61ns
:9  store float %vw_out_0_vx_out, float* %v_col2_addr_4, align 4

ST_162: stg_1346 [2/2] 2.61ns
:4  store float %ux_out_0_uw_out, float* %u_col2_addr_3, align 4

ST_162: stg_1347 [2/2] 2.61ns
:5  store float %uw_out_0_ux_out, float* %u_col2_addr_4, align 4

ST_162: stg_1348 [2/2] 2.61ns
:8  store float %vx_out_0_vw_out, float* %v_col2_addr_3, align 4

ST_162: stg_1349 [2/2] 2.61ns
:9  store float %vw_out_0_vx_out, float* %v_col2_addr_4, align 4

ST_162: stg_1350 [2/2] 2.61ns
:4  store float %ux_out_0_uw_out, float* %u_col1_addr_3, align 4

ST_162: stg_1351 [2/2] 2.61ns
:5  store float %uw_out_0_ux_out, float* %u_col1_addr_4, align 4

ST_162: stg_1352 [2/2] 2.61ns
:8  store float %vx_out_0_vw_out, float* %v_col1_addr_3, align 4

ST_162: stg_1353 [2/2] 2.61ns
:9  store float %vw_out_0_vx_out, float* %v_col1_addr_4, align 4


 <State 163>: 7.26ns
ST_163: tmp_163_cast [1/1] 0.00ns
.preheader10:110  %tmp_163_cast = zext i21 %tmp_150 to i64

ST_163: v_col1_addr_5 [1/1] 0.00ns
.preheader10:111  %v_col1_addr_5 = getelementptr [614656 x float]* %v_col1, i64 0, i64 %tmp_163_cast

ST_163: tmp_164_cast [1/1] 0.00ns
.preheader10:113  %tmp_164_cast = zext i21 %tmp_151 to i64

ST_163: v_col1_addr_6 [1/1] 0.00ns
.preheader10:114  %v_col1_addr_6 = getelementptr [614656 x float]* %v_col1, i64 0, i64 %tmp_164_cast

ST_163: s_col1_addr_8 [1/1] 0.00ns
.preheader10:116  %s_col1_addr_8 = getelementptr [614656 x float]* %s_col1, i64 0, i64 %tmp_163_cast

ST_163: s_col1_addr_9 [1/1] 0.00ns
.preheader10:117  %s_col1_addr_9 = getelementptr [614656 x float]* %s_col1, i64 0, i64 %tmp_164_cast

ST_163: v_col2_addr_5 [1/1] 0.00ns
.preheader10:119  %v_col2_addr_5 = getelementptr [614656 x float]* %v_col2, i64 0, i64 %tmp_163_cast

ST_163: tmp_165_cast [1/1] 0.00ns
.preheader10:121  %tmp_165_cast = sext i21 %tmp_152 to i64

ST_163: v_col2_addr_6 [1/1] 0.00ns
.preheader10:122  %v_col2_addr_6 = getelementptr [614656 x float]* %v_col2, i64 0, i64 %tmp_165_cast

ST_163: u_col1_addr_5 [1/1] 0.00ns
.preheader10:124  %u_col1_addr_5 = getelementptr [614656 x float]* %u_col1, i64 0, i64 %tmp_163_cast

ST_163: u_col1_addr_6 [1/1] 0.00ns
.preheader10:125  %u_col1_addr_6 = getelementptr [614656 x float]* %u_col1, i64 0, i64 %tmp_164_cast

ST_163: u_col2_addr_5 [1/1] 0.00ns
.preheader10:127  %u_col2_addr_5 = getelementptr [614656 x float]* %u_col2, i64 0, i64 %tmp_163_cast

ST_163: u_col2_addr_6 [1/1] 0.00ns
.preheader10:128  %u_col2_addr_6 = getelementptr [614656 x float]* %u_col2, i64 0, i64 %tmp_165_cast

ST_163: s_col2_addr_8 [1/1] 0.00ns
.preheader10:130  %s_col2_addr_8 = getelementptr [614656 x float]* %s_col2, i64 0, i64 %tmp_163_cast

ST_163: s_col2_addr_9 [1/1] 0.00ns
.preheader10:131  %s_col2_addr_9 = getelementptr [614656 x float]* %s_col2, i64 0, i64 %tmp_165_cast

ST_163: w_int2 [4/5] 7.26ns
.preheader10:195  %w_int2 = fadd float %tmp_70, %tmp_71

ST_163: x_int2 [4/5] 7.26ns
.preheader10:198  %x_int2 = fadd float %tmp_73, %tmp_75

ST_163: y_int2 [4/5] 7.26ns
.preheader10:201  %y_int2 = fadd float %tmp_76, %tmp_77

ST_163: z_int2 [4/5] 7.26ns
.preheader10:204  %z_int2 = fadd float %tmp_78, %tmp_79

ST_163: vy_out_0_vz_out [1/1] 1.37ns
.preheader10:250  %vy_out_0_vz_out = select i1 %not_tmp_mid2, float %vz_out_sel, float %vy_out_sel

ST_163: vz_out_0_vy_out [1/1] 1.37ns
.preheader10:251  %vz_out_0_vy_out = select i1 %not_tmp_mid2, float %vy_out_sel, float %vz_out_sel

ST_163: uy_out_0_uz_out [1/1] 1.37ns
.preheader10:254  %uy_out_0_uz_out = select i1 %not_tmp_mid2, float %uz_out_sel, float %uy_out_sel

ST_163: uz_out_0_uy_out [1/1] 1.37ns
.preheader10:255  %uz_out_0_uy_out = select i1 %not_tmp_mid2, float %uy_out_sel, float %uz_out_sel

ST_163: stg_1377 [1/2] 2.61ns
:4  store float %ux_out_0_uw_out, float* %u_col1_addr_4, align 4

ST_163: stg_1378 [1/2] 2.61ns
:5  store float %uw_out_0_ux_out, float* %u_col2_addr_4, align 4

ST_163: stg_1379 [2/2] 2.61ns
:6  store float %uz_out_0_uy_out, float* %u_col1_addr_6, align 4

ST_163: stg_1380 [2/2] 2.61ns
:7  store float %uy_out_0_uz_out, float* %u_col2_addr_6, align 4

ST_163: stg_1381 [1/2] 2.61ns
:8  store float %vx_out_0_vw_out, float* %v_col1_addr_4, align 4

ST_163: stg_1382 [1/2] 2.61ns
:9  store float %vw_out_0_vx_out, float* %v_col2_addr_4, align 4

ST_163: stg_1383 [2/2] 2.61ns
:10  store float %vz_out_0_vy_out, float* %v_col1_addr_6, align 4

ST_163: stg_1384 [1/2] 2.61ns
:4  store float %ux_out_0_uw_out, float* %u_col2_addr_3, align 4

ST_163: stg_1385 [1/2] 2.61ns
:5  store float %uw_out_0_ux_out, float* %u_col2_addr_4, align 4

ST_163: stg_1386 [2/2] 2.61ns
:6  store float %uz_out_0_uy_out, float* %u_col2_addr_5, align 4

ST_163: stg_1387 [2/2] 2.61ns
:7  store float %uy_out_0_uz_out, float* %u_col2_addr_6, align 4

ST_163: stg_1388 [1/2] 2.61ns
:8  store float %vx_out_0_vw_out, float* %v_col2_addr_3, align 4

ST_163: stg_1389 [1/2] 2.61ns
:9  store float %vw_out_0_vx_out, float* %v_col2_addr_4, align 4

ST_163: stg_1390 [2/2] 2.61ns
:10  store float %vz_out_0_vy_out, float* %v_col2_addr_5, align 4

ST_163: stg_1391 [1/2] 2.61ns
:4  store float %ux_out_0_uw_out, float* %u_col1_addr_3, align 4

ST_163: stg_1392 [1/2] 2.61ns
:5  store float %uw_out_0_ux_out, float* %u_col1_addr_4, align 4

ST_163: stg_1393 [2/2] 2.61ns
:6  store float %uz_out_0_uy_out, float* %u_col1_addr_5, align 4

ST_163: stg_1394 [2/2] 2.61ns
:7  store float %uy_out_0_uz_out, float* %u_col1_addr_6, align 4

ST_163: stg_1395 [1/2] 2.61ns
:8  store float %vx_out_0_vw_out, float* %v_col1_addr_3, align 4

ST_163: stg_1396 [1/2] 2.61ns
:9  store float %vw_out_0_vx_out, float* %v_col1_addr_4, align 4

ST_163: stg_1397 [2/2] 2.61ns
:10  store float %vz_out_0_vy_out, float* %v_col1_addr_5, align 4

ST_163: stg_1398 [2/2] 2.61ns
:11  store float %vy_out_0_vz_out, float* %v_col1_addr_6, align 4


 <State 164>: 7.26ns
ST_164: w_int2 [3/5] 7.26ns
.preheader10:195  %w_int2 = fadd float %tmp_70, %tmp_71

ST_164: x_int2 [3/5] 7.26ns
.preheader10:198  %x_int2 = fadd float %tmp_73, %tmp_75

ST_164: y_int2 [3/5] 7.26ns
.preheader10:201  %y_int2 = fadd float %tmp_76, %tmp_77

ST_164: z_int2 [3/5] 7.26ns
.preheader10:204  %z_int2 = fadd float %tmp_78, %tmp_79

ST_164: stg_1403 [1/2] 2.61ns
:6  store float %uz_out_0_uy_out, float* %u_col1_addr_6, align 4

ST_164: stg_1404 [1/2] 2.61ns
:7  store float %uy_out_0_uz_out, float* %u_col2_addr_6, align 4

ST_164: stg_1405 [1/2] 2.61ns
:10  store float %vz_out_0_vy_out, float* %v_col1_addr_6, align 4

ST_164: stg_1406 [1/2] 2.61ns
:6  store float %uz_out_0_uy_out, float* %u_col2_addr_5, align 4

ST_164: stg_1407 [1/2] 2.61ns
:7  store float %uy_out_0_uz_out, float* %u_col2_addr_6, align 4

ST_164: stg_1408 [1/2] 2.61ns
:10  store float %vz_out_0_vy_out, float* %v_col2_addr_5, align 4

ST_164: stg_1409 [2/2] 2.61ns
:0  store float %vy_out_0_vz_out, float* %v_col2_addr_6, align 4

ST_164: stg_1410 [1/2] 2.61ns
:6  store float %uz_out_0_uy_out, float* %u_col1_addr_5, align 4

ST_164: stg_1411 [1/2] 2.61ns
:7  store float %uy_out_0_uz_out, float* %u_col1_addr_6, align 4

ST_164: stg_1412 [1/2] 2.61ns
:10  store float %vz_out_0_vy_out, float* %v_col1_addr_5, align 4

ST_164: stg_1413 [1/2] 2.61ns
:11  store float %vy_out_0_vz_out, float* %v_col1_addr_6, align 4


 <State 165>: 7.26ns
ST_165: w_int2 [2/5] 7.26ns
.preheader10:195  %w_int2 = fadd float %tmp_70, %tmp_71

ST_165: x_int2 [2/5] 7.26ns
.preheader10:198  %x_int2 = fadd float %tmp_73, %tmp_75

ST_165: y_int2 [2/5] 7.26ns
.preheader10:201  %y_int2 = fadd float %tmp_76, %tmp_77

ST_165: z_int2 [2/5] 7.26ns
.preheader10:204  %z_int2 = fadd float %tmp_78, %tmp_79

ST_165: stg_1418 [1/2] 2.61ns
:0  store float %vy_out_0_vz_out, float* %v_col2_addr_6, align 4

ST_165: stg_1419 [1/1] 0.00ns
:1  br label %ifBlock1


 <State 166>: 14.33ns
ST_166: w_int2 [1/5] 7.26ns
.preheader10:195  %w_int2 = fadd float %tmp_70, %tmp_71

ST_166: x_int2 [1/5] 7.26ns
.preheader10:198  %x_int2 = fadd float %tmp_73, %tmp_75

ST_166: y_int2 [1/5] 7.26ns
.preheader10:201  %y_int2 = fadd float %tmp_76, %tmp_77

ST_166: z_int2 [1/5] 7.26ns
.preheader10:204  %z_int2 = fadd float %tmp_78, %tmp_79

ST_166: w_int2_3 [1/1] 1.37ns
.preheader10:205  %w_int2_3 = select i1 %tmp_52, float %w_int1_3, float %w_int2

ST_166: x_int2_3 [1/1] 1.37ns
.preheader10:206  %x_int2_3 = select i1 %tmp_52, float %x_int1_3, float %x_int2

ST_166: y_int2_3 [1/1] 1.37ns
.preheader10:207  %y_int2_3 = select i1 %tmp_52, float %y_int1_3, float %y_int2

ST_166: z_int2_3 [1/1] 1.37ns
.preheader10:208  %z_int2_3 = select i1 %tmp_52, float %z_int1_3, float %z_int2

ST_166: tmp_81 [4/4] 5.70ns
.preheader10:210  %tmp_81 = fmul float %uw_new_load_1, %w_int2_3

ST_166: tmp_82 [4/4] 5.70ns
.preheader10:211  %tmp_82 = fmul float %uy_new_load_1, %y_int2_3

ST_166: tmp_85 [4/4] 5.70ns
.preheader10:213  %tmp_85 = fmul float %uw_new_load_1, %x_int2_3

ST_166: tmp_86 [4/4] 5.70ns
.preheader10:214  %tmp_86 = fmul float %uy_new_load_1, %z_int2_3


 <State 167>: 5.70ns
ST_167: tmp_81 [3/4] 5.70ns
.preheader10:210  %tmp_81 = fmul float %uw_new_load_1, %w_int2_3

ST_167: tmp_82 [3/4] 5.70ns
.preheader10:211  %tmp_82 = fmul float %uy_new_load_1, %y_int2_3

ST_167: tmp_85 [3/4] 5.70ns
.preheader10:213  %tmp_85 = fmul float %uw_new_load_1, %x_int2_3

ST_167: tmp_86 [3/4] 5.70ns
.preheader10:214  %tmp_86 = fmul float %uy_new_load_1, %z_int2_3

ST_167: tmp_87 [4/4] 5.70ns
.preheader10:216  %tmp_87 = fmul float %ux_new_load_1, %w_int2_3

ST_167: tmp_88 [4/4] 5.70ns
.preheader10:217  %tmp_88 = fmul float %uz_new_load_1, %y_int2_3

ST_167: tmp_89 [4/4] 5.70ns
.preheader10:219  %tmp_89 = fmul float %ux_new_load_1, %x_int2_3

ST_167: tmp_90 [4/4] 5.70ns
.preheader10:220  %tmp_90 = fmul float %uz_new_load_1, %z_int2_3


 <State 168>: 5.70ns
ST_168: tmp_81 [2/4] 5.70ns
.preheader10:210  %tmp_81 = fmul float %uw_new_load_1, %w_int2_3

ST_168: tmp_82 [2/4] 5.70ns
.preheader10:211  %tmp_82 = fmul float %uy_new_load_1, %y_int2_3

ST_168: tmp_85 [2/4] 5.70ns
.preheader10:213  %tmp_85 = fmul float %uw_new_load_1, %x_int2_3

ST_168: tmp_86 [2/4] 5.70ns
.preheader10:214  %tmp_86 = fmul float %uy_new_load_1, %z_int2_3

ST_168: tmp_87 [3/4] 5.70ns
.preheader10:216  %tmp_87 = fmul float %ux_new_load_1, %w_int2_3

ST_168: tmp_88 [3/4] 5.70ns
.preheader10:217  %tmp_88 = fmul float %uz_new_load_1, %y_int2_3

ST_168: tmp_89 [3/4] 5.70ns
.preheader10:219  %tmp_89 = fmul float %ux_new_load_1, %x_int2_3

ST_168: tmp_90 [3/4] 5.70ns
.preheader10:220  %tmp_90 = fmul float %uz_new_load_1, %z_int2_3


 <State 169>: 12.96ns
ST_169: tmp_81 [1/4] 5.70ns
.preheader10:210  %tmp_81 = fmul float %uw_new_load_1, %w_int2_3

ST_169: tmp_82 [1/4] 5.70ns
.preheader10:211  %tmp_82 = fmul float %uy_new_load_1, %y_int2_3

ST_169: w_out [5/5] 7.26ns
.preheader10:212  %w_out = fadd float %tmp_81, %tmp_82

ST_169: tmp_85 [1/4] 5.70ns
.preheader10:213  %tmp_85 = fmul float %uw_new_load_1, %x_int2_3

ST_169: tmp_86 [1/4] 5.70ns
.preheader10:214  %tmp_86 = fmul float %uy_new_load_1, %z_int2_3

ST_169: x_out [5/5] 7.26ns
.preheader10:215  %x_out = fadd float %tmp_85, %tmp_86

ST_169: tmp_87 [2/4] 5.70ns
.preheader10:216  %tmp_87 = fmul float %ux_new_load_1, %w_int2_3

ST_169: tmp_88 [2/4] 5.70ns
.preheader10:217  %tmp_88 = fmul float %uz_new_load_1, %y_int2_3

ST_169: tmp_89 [2/4] 5.70ns
.preheader10:219  %tmp_89 = fmul float %ux_new_load_1, %x_int2_3

ST_169: tmp_90 [2/4] 5.70ns
.preheader10:220  %tmp_90 = fmul float %uz_new_load_1, %z_int2_3


 <State 170>: 12.96ns
ST_170: w_out [4/5] 7.26ns
.preheader10:212  %w_out = fadd float %tmp_81, %tmp_82

ST_170: x_out [4/5] 7.26ns
.preheader10:215  %x_out = fadd float %tmp_85, %tmp_86

ST_170: tmp_87 [1/4] 5.70ns
.preheader10:216  %tmp_87 = fmul float %ux_new_load_1, %w_int2_3

ST_170: tmp_88 [1/4] 5.70ns
.preheader10:217  %tmp_88 = fmul float %uz_new_load_1, %y_int2_3

ST_170: y_out [5/5] 7.26ns
.preheader10:218  %y_out = fadd float %tmp_87, %tmp_88

ST_170: tmp_89 [1/4] 5.70ns
.preheader10:219  %tmp_89 = fmul float %ux_new_load_1, %x_int2_3

ST_170: tmp_90 [1/4] 5.70ns
.preheader10:220  %tmp_90 = fmul float %uz_new_load_1, %z_int2_3

ST_170: z_out [5/5] 7.26ns
.preheader10:221  %z_out = fadd float %tmp_89, %tmp_90


 <State 171>: 7.26ns
ST_171: w_out [3/5] 7.26ns
.preheader10:212  %w_out = fadd float %tmp_81, %tmp_82

ST_171: x_out [3/5] 7.26ns
.preheader10:215  %x_out = fadd float %tmp_85, %tmp_86

ST_171: y_out [4/5] 7.26ns
.preheader10:218  %y_out = fadd float %tmp_87, %tmp_88

ST_171: z_out [4/5] 7.26ns
.preheader10:221  %z_out = fadd float %tmp_89, %tmp_90


 <State 172>: 7.26ns
ST_172: w_out [2/5] 7.26ns
.preheader10:212  %w_out = fadd float %tmp_81, %tmp_82

ST_172: x_out [2/5] 7.26ns
.preheader10:215  %x_out = fadd float %tmp_85, %tmp_86

ST_172: y_out [3/5] 7.26ns
.preheader10:218  %y_out = fadd float %tmp_87, %tmp_88

ST_172: z_out [3/5] 7.26ns
.preheader10:221  %z_out = fadd float %tmp_89, %tmp_90


 <State 173>: 12.61ns
ST_173: w_out [1/5] 7.26ns
.preheader10:212  %w_out = fadd float %tmp_81, %tmp_82

ST_173: x_out [1/5] 7.26ns
.preheader10:215  %x_out = fadd float %tmp_85, %tmp_86

ST_173: y_out [2/5] 7.26ns
.preheader10:218  %y_out = fadd float %tmp_87, %tmp_88

ST_173: z_out [2/5] 7.26ns
.preheader10:221  %z_out = fadd float %tmp_89, %tmp_90

ST_173: w_out_3 [1/1] 1.37ns
.preheader10:222  %w_out_3 = select i1 %tmp_80, float %w_out, float %w_int2_3

ST_173: x_out_3 [1/1] 1.37ns
.preheader10:223  %x_out_3 = select i1 %tmp_80, float %x_out, float %x_int2_3

ST_173: w_out_0_x_out [1/1] 1.37ns
.preheader10:260  %w_out_0_x_out = select i1 %not_tmp_mid2, float %w_out_3, float %x_out_3

ST_173: x_out_0_w_out [1/1] 1.37ns
.preheader10:261  %x_out_0_w_out = select i1 %not_tmp_mid2, float %x_out_3, float %w_out_3

ST_173: stg_1482 [2/2] 2.61ns
:0  store float %x_out_0_w_out, float* %s_col1_addr_7, align 4

ST_173: stg_1483 [2/2] 2.61ns
:1  store float %w_out_0_x_out, float* %s_col2_addr_7, align 4

ST_173: stg_1484 [2/2] 2.61ns
:0  store float %x_out_0_w_out, float* %s_col2_addr_6, align 4

ST_173: stg_1485 [2/2] 2.61ns
:1  store float %w_out_0_x_out, float* %s_col2_addr_7, align 4

ST_173: stg_1486 [2/2] 2.61ns
:0  store float %x_out_0_w_out, float* %s_col1_addr_6, align 4

ST_173: stg_1487 [2/2] 2.61ns
:1  store float %w_out_0_x_out, float* %s_col1_addr_7, align 4


 <State 174>: 12.61ns
ST_174: stg_1488 [1/1] 0.00ns
.preheader10:0  call void (...)* @_ssdm_op_SpecLoopName([26 x i8]* @off_diag_px_off_diag_loop_str)

ST_174: empty_15 [1/1] 0.00ns
.preheader10:1  %empty_15 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 153664, i64 153664, i64 153664)

ST_174: stg_1490 [1/1] 0.00ns
.preheader10:60  call void (...)* @_ssdm_op_SpecLoopName([14 x i8]* @p_str1817) nounwind

ST_174: stg_1491 [1/1] 0.00ns
.preheader10:62  call void (...)* @_ssdm_op_SpecPipeline(i32 8, i32 1, i32 1, i32 0, [1 x i8]* @p_str1806) nounwind

ST_174: y_out [1/5] 7.26ns
.preheader10:218  %y_out = fadd float %tmp_87, %tmp_88

ST_174: z_out [1/5] 7.26ns
.preheader10:221  %z_out = fadd float %tmp_89, %tmp_90

ST_174: y_out_3 [1/1] 1.37ns
.preheader10:224  %y_out_3 = select i1 %tmp_80, float %y_out, float %y_int2_3

ST_174: z_out_3 [1/1] 1.37ns
.preheader10:225  %z_out_3 = select i1 %tmp_80, float %z_out, float %z_int2_3

ST_174: y_out_0_z_out [1/1] 1.37ns
.preheader10:258  %y_out_0_z_out = select i1 %not_tmp_mid2, float %y_out_3, float %z_out_3

ST_174: z_out_0_y_out [1/1] 1.37ns
.preheader10:259  %z_out_0_y_out = select i1 %not_tmp_mid2, float %z_out_3, float %y_out_3

ST_174: stg_1498 [1/2] 2.61ns
:0  store float %x_out_0_w_out, float* %s_col1_addr_7, align 4

ST_174: stg_1499 [1/2] 2.61ns
:1  store float %w_out_0_x_out, float* %s_col2_addr_7, align 4

ST_174: stg_1500 [2/2] 2.61ns
:2  store float %z_out_0_y_out, float* %s_col1_addr_9, align 4

ST_174: stg_1501 [2/2] 2.61ns
:3  store float %y_out_0_z_out, float* %s_col2_addr_9, align 4

ST_174: stg_1502 [1/2] 2.61ns
:0  store float %x_out_0_w_out, float* %s_col2_addr_6, align 4

ST_174: stg_1503 [1/2] 2.61ns
:1  store float %w_out_0_x_out, float* %s_col2_addr_7, align 4

ST_174: stg_1504 [2/2] 2.61ns
:2  store float %z_out_0_y_out, float* %s_col2_addr_8, align 4

ST_174: stg_1505 [2/2] 2.61ns
:3  store float %y_out_0_z_out, float* %s_col2_addr_9, align 4

ST_174: stg_1506 [1/2] 2.61ns
:0  store float %x_out_0_w_out, float* %s_col1_addr_6, align 4

ST_174: stg_1507 [1/2] 2.61ns
:1  store float %w_out_0_x_out, float* %s_col1_addr_7, align 4

ST_174: stg_1508 [2/2] 2.61ns
:2  store float %z_out_0_y_out, float* %s_col1_addr_8, align 4

ST_174: stg_1509 [2/2] 2.61ns
:3  store float %y_out_0_z_out, float* %s_col1_addr_9, align 4


 <State 175>: 2.61ns
ST_175: stg_1510 [1/2] 2.61ns
:2  store float %z_out_0_y_out, float* %s_col1_addr_9, align 4

ST_175: stg_1511 [1/2] 2.61ns
:3  store float %y_out_0_z_out, float* %s_col2_addr_9, align 4

ST_175: stg_1512 [1/1] 0.00ns
:11  br label %29

ST_175: stg_1513 [1/2] 2.61ns
:2  store float %z_out_0_y_out, float* %s_col2_addr_8, align 4

ST_175: stg_1514 [1/2] 2.61ns
:3  store float %y_out_0_z_out, float* %s_col2_addr_9, align 4

ST_175: stg_1515 [1/1] 0.00ns
:11  br label %29

ST_175: stg_1516 [1/2] 2.61ns
:2  store float %z_out_0_y_out, float* %s_col1_addr_8, align 4

ST_175: stg_1517 [1/2] 2.61ns
:3  store float %y_out_0_z_out, float* %s_col1_addr_9, align 4

ST_175: stg_1518 [1/1] 0.00ns
:12  br label %ifBlock1


 <State 176>: 1.84ns
ST_176: empty_16 [1/1] 0.00ns
:0  %empty_16 = call i32 (...)* @_ssdm_op_SpecRegionEnd([10 x i8]* @p_str1813, i32 %tmp_s)

ST_176: step_1 [1/1] 1.84ns
:1  %step_1 = add i10 %step_mid2, 1

ST_176: stg_1521 [1/1] 0.00ns
:2  br label %.preheader12.preheader


 <State 177>: 5.28ns
ST_177: indvar_flatten2 [1/1] 0.00ns
.preheader.preheader:0  %indvar_flatten2 = phi i19 [ %indvar_flatten_next1, %.preheader ], [ 0, %.preheader12.preheader ]

ST_177: col3 [1/1] 0.00ns
.preheader.preheader:1  %col3 = phi i9 [ %tmp_9_mid2_v, %.preheader ], [ 0, %.preheader12.preheader ]

ST_177: row4 [1/1] 0.00ns
.preheader.preheader:2  %row4 = phi i10 [ %row_2, %.preheader ], [ 0, %.preheader12.preheader ]

ST_177: exitcond_flatten2 [1/1] 2.33ns
.preheader.preheader:3  %exitcond_flatten2 = icmp eq i19 %indvar_flatten2, -216960

ST_177: indvar_flatten_next1 [1/1] 2.08ns
.preheader.preheader:4  %indvar_flatten_next1 = add i19 %indvar_flatten2, 1

ST_177: stg_1527 [1/1] 0.00ns
.preheader.preheader:5  br i1 %exitcond_flatten2, label %31, label %.preheader

ST_177: col_2 [1/1] 1.84ns
.preheader:0  %col_2 = add i9 %col3, 1

ST_177: exitcond1 [1/1] 2.07ns
.preheader:3  %exitcond1 = icmp eq i10 %row4, -240

ST_177: row4_mid2 [1/1] 1.37ns
.preheader:4  %row4_mid2 = select i1 %exitcond1, i10 0, i10 %row4

ST_177: tmp_9_mid2_v [1/1] 1.37ns
.preheader:5  %tmp_9_mid2_v = select i1 %exitcond1, i9 %col_2, i9 %col3

ST_177: row_2 [1/1] 1.84ns
.preheader:49  %row_2 = add i10 %row4_mid2, 1


 <State 178>: 8.99ns
ST_178: tmp_9_mid2_cast [1/1] 0.00ns
.preheader:6  %tmp_9_mid2_cast = zext i9 %tmp_9_mid2_v to i20

ST_178: tmp_6 [1/1] 3.36ns
.preheader:7  %tmp_6 = mul i20 %tmp_9_mid2_cast, 1568

ST_178: tmp_16_cast1 [1/1] 0.00ns
.preheader:15  %tmp_16_cast1 = zext i10 %row4_mid2 to i20

ST_178: tmp_11 [1/1] 3.02ns
.preheader:28  %tmp_11 = add i20 %tmp_16_cast1, %tmp_6

ST_178: tmp_134_cast [1/1] 0.00ns
.preheader:29  %tmp_134_cast = zext i20 %tmp_11 to i64

ST_178: v_col1_addr [1/1] 0.00ns
.preheader:30  %v_col1_addr = getelementptr [614656 x float]* %v_col1, i64 0, i64 %tmp_134_cast

ST_178: s_col1_addr_1 [1/1] 0.00ns
.preheader:31  %s_col1_addr_1 = getelementptr [614656 x float]* %s_col1, i64 0, i64 %tmp_134_cast

ST_178: v_col2_addr [1/1] 0.00ns
.preheader:32  %v_col2_addr = getelementptr [614656 x float]* %v_col2, i64 0, i64 %tmp_134_cast

ST_178: u_col1_addr [1/1] 0.00ns
.preheader:33  %u_col1_addr = getelementptr [614656 x float]* %u_col1, i64 0, i64 %tmp_134_cast

ST_178: u_col2_addr [1/1] 0.00ns
.preheader:34  %u_col2_addr = getelementptr [614656 x float]* %u_col2, i64 0, i64 %tmp_134_cast

ST_178: s_col2_addr_1 [1/1] 0.00ns
.preheader:35  %s_col2_addr_1 = getelementptr [614656 x float]* %s_col2, i64 0, i64 %tmp_134_cast

ST_178: s_col1_load [4/4] 2.61ns
.preheader:36  %s_col1_load = load float* %s_col1_addr_1, align 4

ST_178: s_col2_load [4/4] 2.61ns
.preheader:38  %s_col2_load = load float* %s_col2_addr_1, align 4

ST_178: u_col1_load [4/4] 2.61ns
.preheader:40  %u_col1_load = load float* %u_col1_addr, align 4

ST_178: u_col2_load [4/4] 2.61ns
.preheader:42  %u_col2_load = load float* %u_col2_addr, align 4

ST_178: v_col1_load [4/4] 2.61ns
.preheader:44  %v_col1_load = load float* %v_col1_addr, align 4

ST_178: v_col2_load [4/4] 2.61ns
.preheader:46  %v_col2_load = load float* %v_col2_addr, align 4


 <State 179>: 2.61ns
ST_179: s_col1_load [3/4] 2.61ns
.preheader:36  %s_col1_load = load float* %s_col1_addr_1, align 4

ST_179: s_col2_load [3/4] 2.61ns
.preheader:38  %s_col2_load = load float* %s_col2_addr_1, align 4

ST_179: u_col1_load [3/4] 2.61ns
.preheader:40  %u_col1_load = load float* %u_col1_addr, align 4

ST_179: u_col2_load [3/4] 2.61ns
.preheader:42  %u_col2_load = load float* %u_col2_addr, align 4

ST_179: v_col1_load [3/4] 2.61ns
.preheader:44  %v_col1_load = load float* %v_col1_addr, align 4

ST_179: v_col2_load [3/4] 2.61ns
.preheader:46  %v_col2_load = load float* %v_col2_addr, align 4


 <State 180>: 6.38ns
ST_180: tmp_16_cast [1/1] 0.00ns
.preheader:16  %tmp_16_cast = zext i10 %row4_mid2 to i20

ST_180: tmp_8 [1/1] 6.38ns
.preheader:17  %tmp_8 = mul i20 %tmp_16_cast, 784

ST_180: s_col1_load [2/4] 2.61ns
.preheader:36  %s_col1_load = load float* %s_col1_addr_1, align 4

ST_180: s_col2_load [2/4] 2.61ns
.preheader:38  %s_col2_load = load float* %s_col2_addr_1, align 4

ST_180: u_col1_load [2/4] 2.61ns
.preheader:40  %u_col1_load = load float* %u_col1_addr, align 4

ST_180: u_col2_load [2/4] 2.61ns
.preheader:42  %u_col2_load = load float* %u_col2_addr, align 4

ST_180: v_col1_load [2/4] 2.61ns
.preheader:44  %v_col1_load = load float* %v_col1_addr, align 4

ST_180: v_col2_load [2/4] 2.61ns
.preheader:46  %v_col2_load = load float* %v_col2_addr, align 4


 <State 181>: 5.22ns
ST_181: tmp_6_mid2_v [1/1] 0.00ns
.preheader:8  %tmp_6_mid2_v = call i10 @_ssdm_op_BitConcatenate.i10.i9.i1(i9 %tmp_9_mid2_v, i1 false)

ST_181: tmp_6_mid2_cast [1/1] 0.00ns
.preheader:9  %tmp_6_mid2_cast = zext i10 %tmp_6_mid2_v to i20

ST_181: tmp_10_mid2_v [1/1] 0.00ns (grouped into LUT with out node tmp_10)
.preheader:10  %tmp_10_mid2_v = or i10 %tmp_6_mid2_v, 1

ST_181: tmp_10_mid2_cast [1/1] 0.00ns (grouped into LUT with out node tmp_10)
.preheader:11  %tmp_10_mid2_cast = zext i10 %tmp_10_mid2_v to i20

ST_181: tmp_9 [1/1] 2.08ns
.preheader:18  %tmp_9 = add i20 %tmp_6_mid2_cast, %tmp_8

ST_181: tmp_132_cast [1/1] 0.00ns
.preheader:19  %tmp_132_cast = zext i20 %tmp_9 to i64

ST_181: S_addr [1/1] 0.00ns
.preheader:20  %S_addr = getelementptr [614656 x float]* %S, i64 0, i64 %tmp_132_cast

ST_181: tmp_10 [1/1] 2.08ns (out node of the LUT)
.preheader:21  %tmp_10 = add i20 %tmp_10_mid2_cast, %tmp_8

ST_181: tmp_133_cast [1/1] 0.00ns
.preheader:22  %tmp_133_cast = zext i20 %tmp_10 to i64

ST_181: S_addr_1 [1/1] 0.00ns
.preheader:23  %S_addr_1 = getelementptr [614656 x float]* %S, i64 0, i64 %tmp_133_cast

ST_181: U_addr [1/1] 0.00ns
.preheader:24  %U_addr = getelementptr [614656 x float]* %U, i64 0, i64 %tmp_132_cast

ST_181: U_addr_1 [1/1] 0.00ns
.preheader:25  %U_addr_1 = getelementptr [614656 x float]* %U, i64 0, i64 %tmp_133_cast

ST_181: V_addr [1/1] 0.00ns
.preheader:26  %V_addr = getelementptr [614656 x float]* %V, i64 0, i64 %tmp_132_cast

ST_181: V_addr_1 [1/1] 0.00ns
.preheader:27  %V_addr_1 = getelementptr [614656 x float]* %V, i64 0, i64 %tmp_133_cast

ST_181: s_col1_load [1/4] 2.61ns
.preheader:36  %s_col1_load = load float* %s_col1_addr_1, align 4

ST_181: stg_1579 [2/2] 2.61ns
.preheader:37  store float %s_col1_load, float* %S_addr, align 4

ST_181: s_col2_load [1/4] 2.61ns
.preheader:38  %s_col2_load = load float* %s_col2_addr_1, align 4

ST_181: stg_1581 [2/2] 2.61ns
.preheader:39  store float %s_col2_load, float* %S_addr_1, align 4

ST_181: u_col1_load [1/4] 2.61ns
.preheader:40  %u_col1_load = load float* %u_col1_addr, align 4

ST_181: stg_1583 [2/2] 2.61ns
.preheader:41  store float %u_col1_load, float* %U_addr, align 4

ST_181: u_col2_load [1/4] 2.61ns
.preheader:42  %u_col2_load = load float* %u_col2_addr, align 4

ST_181: stg_1585 [2/2] 2.61ns
.preheader:43  store float %u_col2_load, float* %U_addr_1, align 4

ST_181: v_col1_load [1/4] 2.61ns
.preheader:44  %v_col1_load = load float* %v_col1_addr, align 4

ST_181: stg_1587 [2/2] 2.61ns
.preheader:45  store float %v_col1_load, float* %V_addr, align 4

ST_181: v_col2_load [1/4] 2.61ns
.preheader:46  %v_col2_load = load float* %v_col2_addr, align 4

ST_181: stg_1589 [2/2] 2.61ns
.preheader:47  store float %v_col2_load, float* %V_addr_1, align 4


 <State 182>: 2.61ns
ST_182: stg_1590 [1/1] 0.00ns
.preheader:1  call void (...)* @_ssdm_op_SpecLoopName([20 x i8]* @col_store_row_store_str)

ST_182: empty_18 [1/1] 0.00ns
.preheader:2  %empty_18 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 307328, i64 307328, i64 307328)

ST_182: stg_1592 [1/1] 0.00ns
.preheader:12  call void (...)* @_ssdm_op_SpecLoopName([10 x i8]* @p_str1819) nounwind

ST_182: tmp_7 [1/1] 0.00ns
.preheader:13  %tmp_7 = call i32 (...)* @_ssdm_op_SpecRegionBegin([10 x i8]* @p_str1819)

ST_182: stg_1594 [1/1] 0.00ns
.preheader:14  call void (...)* @_ssdm_op_SpecPipeline(i32 -1, i32 1, i32 1, i32 0, [1 x i8]* @p_str1806) nounwind

ST_182: stg_1595 [1/2] 2.61ns
.preheader:37  store float %s_col1_load, float* %S_addr, align 4

ST_182: stg_1596 [1/2] 2.61ns
.preheader:39  store float %s_col2_load, float* %S_addr_1, align 4

ST_182: stg_1597 [1/2] 2.61ns
.preheader:41  store float %u_col1_load, float* %U_addr, align 4

ST_182: stg_1598 [1/2] 2.61ns
.preheader:43  store float %u_col2_load, float* %U_addr_1, align 4

ST_182: stg_1599 [1/2] 2.61ns
.preheader:45  store float %v_col1_load, float* %V_addr, align 4

ST_182: stg_1600 [1/2] 2.61ns
.preheader:47  store float %v_col2_load, float* %V_addr_1, align 4

ST_182: empty_19 [1/1] 0.00ns
.preheader:48  %empty_19 = call i32 (...)* @_ssdm_op_SpecRegionEnd([10 x i8]* @p_str1819, i32 %tmp_7)

ST_182: stg_1602 [1/1] 0.00ns
.preheader:50  br label %.preheader.preheader


 <State 183>: 0.00ns
ST_183: stg_1603 [1/1] 0.00ns
:0  ret void



============================================================
+ Verbose Summary: Timing violations
============================================================
Target clock period: 10ns, clock uncertainty: 1.25ns.

 <State 152>: 9.68ns
The critical path consists of the following:
	'load' operation ('w_in', /opt/xilinx/xilinx_2016.2/Vivado_HLS/2016.2/common/technology/autopilot/hls/linear_algebra/hls_svd.h:1066) on array 's_col2', /opt/xilinx/xilinx_2016.2/Vivado_HLS/2016.2/common/technology/autopilot/hls/linear_algebra/hls_svd.h:817 (2.61 ns)
	'select' operation ('x_in', /opt/xilinx/xilinx_2016.2/Vivado_HLS/2016.2/common/technology/autopilot/hls/linear_algebra/hls_svd.h:131->/opt/xilinx/xilinx_2016.2/Vivado_HLS/2016.2/common/technology/autopilot/hls/linear_algebra/hls_svd.h:167->/opt/xilinx/xilinx_2016.2/Vivado_HLS/2016.2/common/technology/autopilot/hls/linear_algebra/hls_svd.h:184->/opt/xilinx/xilinx_2016.2/Vivado_HLS/2016.2/common/technology/autopilot/hls/linear_algebra/hls_svd.h:1085) (0 ns)
	'select' operation ('x_in', /opt/xilinx/xilinx_2016.2/Vivado_HLS/2016.2/common/technology/autopilot/hls/linear_algebra/hls_svd.h:131->/opt/xilinx/xilinx_2016.2/Vivado_HLS/2016.2/common/technology/autopilot/hls/linear_algebra/hls_svd.h:167->/opt/xilinx/xilinx_2016.2/Vivado_HLS/2016.2/common/technology/autopilot/hls/linear_algebra/hls_svd.h:184->/opt/xilinx/xilinx_2016.2/Vivado_HLS/2016.2/common/technology/autopilot/hls/linear_algebra/hls_svd.h:1085) (1.37 ns)
	'fmul' operation ('tmp_68', /opt/xilinx/xilinx_2016.2/Vivado_HLS/2016.2/common/technology/autopilot/hls/linear_algebra/hls_svd.h:137->/opt/xilinx/xilinx_2016.2/Vivado_HLS/2016.2/common/technology/autopilot/hls/linear_algebra/hls_svd.h:167->/opt/xilinx/xilinx_2016.2/Vivado_HLS/2016.2/common/technology/autopilot/hls/linear_algebra/hls_svd.h:184->/opt/xilinx/xilinx_2016.2/Vivado_HLS/2016.2/common/technology/autopilot/hls/linear_algebra/hls_svd.h:1085) (5.7 ns)

 <State 155>: 13ns
The critical path consists of the following:
	'fmul' operation ('tmp_58', /opt/xilinx/xilinx_2016.2/Vivado_HLS/2016.2/common/technology/autopilot/hls/linear_algebra/hls_svd.h:137->/opt/xilinx/xilinx_2016.2/Vivado_HLS/2016.2/common/technology/autopilot/hls/linear_algebra/hls_svd.h:167->/opt/xilinx/xilinx_2016.2/Vivado_HLS/2016.2/common/technology/autopilot/hls/linear_algebra/hls_svd.h:181->/opt/xilinx/xilinx_2016.2/Vivado_HLS/2016.2/common/technology/autopilot/hls/linear_algebra/hls_svd.h:1085) (5.7 ns)
	'fadd' operation ('w_int1', /opt/xilinx/xilinx_2016.2/Vivado_HLS/2016.2/common/technology/autopilot/hls/linear_algebra/hls_svd.h:137->/opt/xilinx/xilinx_2016.2/Vivado_HLS/2016.2/common/technology/autopilot/hls/linear_algebra/hls_svd.h:167->/opt/xilinx/xilinx_2016.2/Vivado_HLS/2016.2/common/technology/autopilot/hls/linear_algebra/hls_svd.h:181->/opt/xilinx/xilinx_2016.2/Vivado_HLS/2016.2/common/technology/autopilot/hls/linear_algebra/hls_svd.h:1085) (7.26 ns)

 <State 159>: 14.3ns
The critical path consists of the following:
	'fadd' operation ('w_int1', /opt/xilinx/xilinx_2016.2/Vivado_HLS/2016.2/common/technology/autopilot/hls/linear_algebra/hls_svd.h:137->/opt/xilinx/xilinx_2016.2/Vivado_HLS/2016.2/common/technology/autopilot/hls/linear_algebra/hls_svd.h:167->/opt/xilinx/xilinx_2016.2/Vivado_HLS/2016.2/common/technology/autopilot/hls/linear_algebra/hls_svd.h:181->/opt/xilinx/xilinx_2016.2/Vivado_HLS/2016.2/common/technology/autopilot/hls/linear_algebra/hls_svd.h:1085) (7.26 ns)
	'select' operation ('w_int1', /opt/xilinx/xilinx_2016.2/Vivado_HLS/2016.2/common/technology/autopilot/hls/linear_algebra/hls_svd.h:131->/opt/xilinx/xilinx_2016.2/Vivado_HLS/2016.2/common/technology/autopilot/hls/linear_algebra/hls_svd.h:167->/opt/xilinx/xilinx_2016.2/Vivado_HLS/2016.2/common/technology/autopilot/hls/linear_algebra/hls_svd.h:182->/opt/xilinx/xilinx_2016.2/Vivado_HLS/2016.2/common/technology/autopilot/hls/linear_algebra/hls_svd.h:1097) (1.37 ns)
	'fmul' operation ('tmp_73', /opt/xilinx/xilinx_2016.2/Vivado_HLS/2016.2/common/technology/autopilot/hls/linear_algebra/hls_svd.h:137->/opt/xilinx/xilinx_2016.2/Vivado_HLS/2016.2/common/technology/autopilot/hls/linear_algebra/hls_svd.h:167->/opt/xilinx/xilinx_2016.2/Vivado_HLS/2016.2/common/technology/autopilot/hls/linear_algebra/hls_svd.h:182->/opt/xilinx/xilinx_2016.2/Vivado_HLS/2016.2/common/technology/autopilot/hls/linear_algebra/hls_svd.h:1097) (5.7 ns)

 <State 162>: 13ns
The critical path consists of the following:
	'fmul' operation ('tmp_70', /opt/xilinx/xilinx_2016.2/Vivado_HLS/2016.2/common/technology/autopilot/hls/linear_algebra/hls_svd.h:137->/opt/xilinx/xilinx_2016.2/Vivado_HLS/2016.2/common/technology/autopilot/hls/linear_algebra/hls_svd.h:167->/opt/xilinx/xilinx_2016.2/Vivado_HLS/2016.2/common/technology/autopilot/hls/linear_algebra/hls_svd.h:181->/opt/xilinx/xilinx_2016.2/Vivado_HLS/2016.2/common/technology/autopilot/hls/linear_algebra/hls_svd.h:1097) (5.7 ns)
	'fadd' operation ('w_int2', /opt/xilinx/xilinx_2016.2/Vivado_HLS/2016.2/common/technology/autopilot/hls/linear_algebra/hls_svd.h:137->/opt/xilinx/xilinx_2016.2/Vivado_HLS/2016.2/common/technology/autopilot/hls/linear_algebra/hls_svd.h:167->/opt/xilinx/xilinx_2016.2/Vivado_HLS/2016.2/common/technology/autopilot/hls/linear_algebra/hls_svd.h:181->/opt/xilinx/xilinx_2016.2/Vivado_HLS/2016.2/common/technology/autopilot/hls/linear_algebra/hls_svd.h:1097) (7.26 ns)

 <State 166>: 14.3ns
The critical path consists of the following:
	'fadd' operation ('w_int2', /opt/xilinx/xilinx_2016.2/Vivado_HLS/2016.2/common/technology/autopilot/hls/linear_algebra/hls_svd.h:137->/opt/xilinx/xilinx_2016.2/Vivado_HLS/2016.2/common/technology/autopilot/hls/linear_algebra/hls_svd.h:167->/opt/xilinx/xilinx_2016.2/Vivado_HLS/2016.2/common/technology/autopilot/hls/linear_algebra/hls_svd.h:181->/opt/xilinx/xilinx_2016.2/Vivado_HLS/2016.2/common/technology/autopilot/hls/linear_algebra/hls_svd.h:1097) (7.26 ns)
	'select' operation ('w_int2', /opt/xilinx/xilinx_2016.2/Vivado_HLS/2016.2/common/technology/autopilot/hls/linear_algebra/hls_svd.h:131->/opt/xilinx/xilinx_2016.2/Vivado_HLS/2016.2/common/technology/autopilot/hls/linear_algebra/hls_svd.h:167->/opt/xilinx/xilinx_2016.2/Vivado_HLS/2016.2/common/technology/autopilot/hls/linear_algebra/hls_svd.h:183->/opt/xilinx/xilinx_2016.2/Vivado_HLS/2016.2/common/technology/autopilot/hls/linear_algebra/hls_svd.h:1112) (1.37 ns)
	'fmul' operation ('tmp_81', /opt/xilinx/xilinx_2016.2/Vivado_HLS/2016.2/common/technology/autopilot/hls/linear_algebra/hls_svd.h:137->/opt/xilinx/xilinx_2016.2/Vivado_HLS/2016.2/common/technology/autopilot/hls/linear_algebra/hls_svd.h:167->/opt/xilinx/xilinx_2016.2/Vivado_HLS/2016.2/common/technology/autopilot/hls/linear_algebra/hls_svd.h:181->/opt/xilinx/xilinx_2016.2/Vivado_HLS/2016.2/common/technology/autopilot/hls/linear_algebra/hls_svd.h:1112) (5.7 ns)

 <State 169>: 13ns
The critical path consists of the following:
	'fmul' operation ('tmp_81', /opt/xilinx/xilinx_2016.2/Vivado_HLS/2016.2/common/technology/autopilot/hls/linear_algebra/hls_svd.h:137->/opt/xilinx/xilinx_2016.2/Vivado_HLS/2016.2/common/technology/autopilot/hls/linear_algebra/hls_svd.h:167->/opt/xilinx/xilinx_2016.2/Vivado_HLS/2016.2/common/technology/autopilot/hls/linear_algebra/hls_svd.h:181->/opt/xilinx/xilinx_2016.2/Vivado_HLS/2016.2/common/technology/autopilot/hls/linear_algebra/hls_svd.h:1112) (5.7 ns)
	'fadd' operation ('w_out', /opt/xilinx/xilinx_2016.2/Vivado_HLS/2016.2/common/technology/autopilot/hls/linear_algebra/hls_svd.h:137->/opt/xilinx/xilinx_2016.2/Vivado_HLS/2016.2/common/technology/autopilot/hls/linear_algebra/hls_svd.h:167->/opt/xilinx/xilinx_2016.2/Vivado_HLS/2016.2/common/technology/autopilot/hls/linear_algebra/hls_svd.h:181->/opt/xilinx/xilinx_2016.2/Vivado_HLS/2016.2/common/technology/autopilot/hls/linear_algebra/hls_svd.h:1112) (7.26 ns)

 <State 170>: 13ns
The critical path consists of the following:
	'fmul' operation ('tmp_87', /opt/xilinx/xilinx_2016.2/Vivado_HLS/2016.2/common/technology/autopilot/hls/linear_algebra/hls_svd.h:137->/opt/xilinx/xilinx_2016.2/Vivado_HLS/2016.2/common/technology/autopilot/hls/linear_algebra/hls_svd.h:167->/opt/xilinx/xilinx_2016.2/Vivado_HLS/2016.2/common/technology/autopilot/hls/linear_algebra/hls_svd.h:183->/opt/xilinx/xilinx_2016.2/Vivado_HLS/2016.2/common/technology/autopilot/hls/linear_algebra/hls_svd.h:1112) (5.7 ns)
	'fadd' operation ('y_out', /opt/xilinx/xilinx_2016.2/Vivado_HLS/2016.2/common/technology/autopilot/hls/linear_algebra/hls_svd.h:137->/opt/xilinx/xilinx_2016.2/Vivado_HLS/2016.2/common/technology/autopilot/hls/linear_algebra/hls_svd.h:167->/opt/xilinx/xilinx_2016.2/Vivado_HLS/2016.2/common/technology/autopilot/hls/linear_algebra/hls_svd.h:183->/opt/xilinx/xilinx_2016.2/Vivado_HLS/2016.2/common/technology/autopilot/hls/linear_algebra/hls_svd.h:1112) (7.26 ns)

 <State 173>: 12.6ns
The critical path consists of the following:
	'fadd' operation ('w_out', /opt/xilinx/xilinx_2016.2/Vivado_HLS/2016.2/common/technology/autopilot/hls/linear_algebra/hls_svd.h:137->/opt/xilinx/xilinx_2016.2/Vivado_HLS/2016.2/common/technology/autopilot/hls/linear_algebra/hls_svd.h:167->/opt/xilinx/xilinx_2016.2/Vivado_HLS/2016.2/common/technology/autopilot/hls/linear_algebra/hls_svd.h:181->/opt/xilinx/xilinx_2016.2/Vivado_HLS/2016.2/common/technology/autopilot/hls/linear_algebra/hls_svd.h:1112) (7.26 ns)
	'select' operation ('w_out', /opt/xilinx/xilinx_2016.2/Vivado_HLS/2016.2/common/technology/autopilot/hls/linear_algebra/hls_svd.h:1133) (1.37 ns)
	'select' operation ('w_out_0_x_out', /opt/xilinx/xilinx_2016.2/Vivado_HLS/2016.2/common/technology/autopilot/hls/linear_algebra/hls_svd.h:1132) (1.37 ns)
	'store' operation (/opt/xilinx/xilinx_2016.2/Vivado_HLS/2016.2/common/technology/autopilot/hls/linear_algebra/hls_svd.h:1167) of variable 'w_out_0_x_out', /opt/xilinx/xilinx_2016.2/Vivado_HLS/2016.2/common/technology/autopilot/hls/linear_algebra/hls_svd.h:1132 on array 's_col1', /opt/xilinx/xilinx_2016.2/Vivado_HLS/2016.2/common/technology/autopilot/hls/linear_algebra/hls_svd.h:816 (2.61 ns)

 <State 174>: 12.6ns
The critical path consists of the following:
	'fadd' operation ('y_out', /opt/xilinx/xilinx_2016.2/Vivado_HLS/2016.2/common/technology/autopilot/hls/linear_algebra/hls_svd.h:137->/opt/xilinx/xilinx_2016.2/Vivado_HLS/2016.2/common/technology/autopilot/hls/linear_algebra/hls_svd.h:167->/opt/xilinx/xilinx_2016.2/Vivado_HLS/2016.2/common/technology/autopilot/hls/linear_algebra/hls_svd.h:183->/opt/xilinx/xilinx_2016.2/Vivado_HLS/2016.2/common/technology/autopilot/hls/linear_algebra/hls_svd.h:1112) (7.26 ns)
	'select' operation ('y_out', /opt/xilinx/xilinx_2016.2/Vivado_HLS/2016.2/common/technology/autopilot/hls/linear_algebra/hls_svd.h:1135) (1.37 ns)
	'select' operation ('y_out_0_z_out', /opt/xilinx/xilinx_2016.2/Vivado_HLS/2016.2/common/technology/autopilot/hls/linear_algebra/hls_svd.h:1132) (1.37 ns)
	'store' operation (/opt/xilinx/xilinx_2016.2/Vivado_HLS/2016.2/common/technology/autopilot/hls/linear_algebra/hls_svd.h:1169) of variable 'y_out_0_z_out', /opt/xilinx/xilinx_2016.2/Vivado_HLS/2016.2/common/technology/autopilot/hls/linear_algebra/hls_svd.h:1132 on array 's_col1', /opt/xilinx/xilinx_2016.2/Vivado_HLS/2016.2/common/technology/autopilot/hls/linear_algebra/hls_svd.h:816 (2.61 ns)

 <State 178>: 8.99ns
The critical path consists of the following:
	'mul' operation ('tmp_6', /opt/xilinx/xilinx_2016.2/Vivado_HLS/2016.2/common/technology/autopilot/hls/linear_algebra/hls_svd.h:1233) (3.36 ns)
	'add' operation ('tmp_11', /opt/xilinx/xilinx_2016.2/Vivado_HLS/2016.2/common/technology/autopilot/hls/linear_algebra/hls_svd.h:1233) (3.02 ns)
	'getelementptr' operation ('v_col2_addr', /opt/xilinx/xilinx_2016.2/Vivado_HLS/2016.2/common/technology/autopilot/hls/linear_algebra/hls_svd.h:1234) (0 ns)
	'load' operation ('v_col2_load', /opt/xilinx/xilinx_2016.2/Vivado_HLS/2016.2/common/technology/autopilot/hls/linear_algebra/hls_svd.h:1234) on array 'v_col2', /opt/xilinx/xilinx_2016.2/Vivado_HLS/2016.2/common/technology/autopilot/hls/linear_algebra/hls_svd.h:821 (2.61 ns)


============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
 - Input state : 
  - Chain level:
	State 1
	State 2
	State 3
	State 4
	State 5
	State 6
	State 7
	State 8
	State 9
	State 10
	State 11
	State 12
	State 13
	State 14
	State 15
	State 16
	State 17
	State 18
	State 19
	State 20
	State 21
	State 22
	State 23
	State 24
	State 25
	State 26
	State 27
	State 28
	State 29
	State 30
	State 31
	State 32
	State 33
	State 34
	State 35
	State 36
	State 37
	State 38
	State 39
	State 40
	State 41
	State 42
	State 43
	State 44
	State 45
	State 46
	State 47
	State 48
	State 49
	State 50
	State 51
	State 52
	State 53
	State 54
	State 55
	State 56
	State 57
	State 58
	State 59
	State 60
	State 61
	State 62
	State 63
	State 64
	State 65
	State 66
	State 67
	State 68
	State 69
	State 70
	State 71
	State 72
	State 73
	State 74
	State 75
	State 76
	State 77
	State 78
	State 79
	State 80
	State 81
	State 82
	State 83
	State 84
	State 85
	State 86
	State 87
	State 88
	State 89
	State 90
	State 91
	State 92
	State 93
	State 94
	State 95
	State 96
	State 97
	State 98
	State 99
	State 100
	State 101
	State 102
	State 103
	State 104
	State 105
	State 106
	State 107
	State 108
	State 109
	State 110
	State 111
	State 112
	State 113
	State 114
	State 115
	State 116
	State 117
	State 118
	State 119
	State 120
	State 121
	State 122
	State 123
	State 124
	State 125
	State 126
	State 127
	State 128
	State 129
	State 130
	State 131
	State 132
	State 133
	State 134
	State 135
	State 136
	State 137
	State 138
	State 139
	State 140
	State 141
	State 142
	State 143
	State 144
	State 145
	State 146
	State 147
	State 148
	State 149
	State 150
	State 151
	State 152
	State 153
	State 154
	State 155
	State 156
	State 157
	State 158
	State 159
	State 160
	State 161
	State 162
	State 163
	State 164
	State 165
	State 166
	State 167
	State 168
	State 169
	State 170
	State 171
	State 172
	State 173
	State 174
	State 175
	State 176
	State 177
	State 178
	State 179
	State 180
	State 181
	State 182
	State 183


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
