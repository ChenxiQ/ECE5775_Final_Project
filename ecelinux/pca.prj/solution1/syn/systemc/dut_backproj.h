// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.2
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _dut_backproj_HH_
#define _dut_backproj_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "dut_fadd_32ns_32ns_32_5_full_dsp.h"
#include "dut_fmul_32ns_32ns_32_4_max_dsp.h"
#include "dut_backproj_A.h"

namespace ap_rtl {

struct dut_backproj : public sc_module {
    // Port declarations 12
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<32> > strm_in_V_dout;
    sc_in< sc_logic > strm_in_V_empty_n;
    sc_out< sc_logic > strm_in_V_read;
    sc_out< sc_lv<32> > strm_out_V_din;
    sc_in< sc_logic > strm_out_V_full_n;
    sc_out< sc_logic > strm_out_V_write;


    // Module declarations
    dut_backproj(sc_module_name name);
    SC_HAS_PROCESS(dut_backproj);

    ~dut_backproj();

    sc_trace_file* mVcdFile;

    dut_backproj_A* A_U;
    dut_fadd_32ns_32ns_32_5_full_dsp<1,5,32,32,32>* dut_fadd_32ns_32ns_32_5_full_dsp_U1;
    dut_fmul_32ns_32ns_32_4_max_dsp<1,4,32,32,32>* dut_fmul_32ns_32ns_32_4_max_dsp_U2;
    sc_signal< sc_lv<6> > ap_CS_fsm;
    sc_signal< sc_logic > ap_sig_cseq_ST_st1_fsm_0;
    sc_signal< bool > ap_sig_23;
    sc_signal< sc_logic > strm_in_V_blk_n;
    sc_signal< sc_logic > ap_sig_cseq_ST_pp0_stg1_fsm_2;
    sc_signal< bool > ap_sig_42;
    sc_signal< sc_logic > ap_reg_ppiten_pp0_it0;
    sc_signal< sc_logic > ap_reg_ppiten_pp0_it1;
    sc_signal< sc_logic > ap_reg_ppiten_pp0_it2;
    sc_signal< sc_lv<1> > exitcond_flatten2_reg_320;
    sc_signal< sc_lv<1> > tmp_mid2_reg_338;
    sc_signal< sc_logic > ap_sig_cseq_ST_pp0_stg2_fsm_3;
    sc_signal< bool > ap_sig_64;
    sc_signal< sc_logic > strm_out_V_blk_n;
    sc_signal< sc_logic > ap_sig_cseq_ST_pp0_stg0_fsm_1;
    sc_signal< bool > ap_sig_75;
    sc_signal< sc_logic > ap_reg_ppiten_pp0_it3;
    sc_signal< sc_lv<1> > tmp_4_reg_367;
    sc_signal< sc_lv<1> > ap_reg_ppstg_tmp_4_reg_367_pp0_iter2;
    sc_signal< sc_lv<14> > indvar_flatten2_reg_112;
    sc_signal< sc_lv<12> > indvar_flatten_reg_123;
    sc_signal< sc_lv<7> > j_reg_134;
    sc_signal< sc_lv<32> > p_03_2_reg_145;
    sc_signal< sc_lv<5> > k_reg_157;
    sc_signal< sc_lv<1> > exitcond_flatten2_fu_177_p2;
    sc_signal< bool > ap_sig_98;
    sc_signal< sc_lv<1> > ap_reg_ppstg_exitcond_flatten2_reg_320_pp0_iter1;
    sc_signal< sc_lv<1> > ap_reg_ppstg_exitcond_flatten2_reg_320_pp0_iter2;
    sc_signal< sc_lv<14> > indvar_flatten_next2_fu_183_p2;
    sc_signal< sc_lv<14> > indvar_flatten_next2_reg_324;
    sc_signal< sc_lv<5> > k_mid2_fu_245_p3;
    sc_signal< sc_lv<5> > k_mid2_reg_329;
    sc_signal< sc_lv<1> > tmp_mid2_fu_259_p3;
    sc_signal< sc_lv<7> > j_mid2_fu_267_p3;
    sc_signal< sc_lv<7> > j_mid2_reg_342;
    sc_signal< sc_lv<12> > indvar_flatten_next_fu_281_p3;
    sc_signal< sc_lv<12> > indvar_flatten_next_reg_347;
    sc_signal< sc_lv<1> > tmp_1_fu_293_p2;
    sc_signal< sc_lv<1> > tmp_1_reg_352;
    sc_signal< bool > ap_sig_126;
    sc_signal< sc_lv<1> > ap_reg_ppstg_tmp_1_reg_352_pp0_iter1;
    sc_signal< sc_lv<32> > tmp_74_reg_362;
    sc_signal< sc_lv<1> > tmp_4_fu_302_p2;
    sc_signal< sc_lv<1> > ap_reg_ppstg_tmp_4_reg_367_pp0_iter1;
    sc_signal< sc_lv<5> > k_2_fu_307_p2;
    sc_signal< sc_lv<5> > k_2_reg_371;
    sc_signal< sc_lv<32> > A_q0;
    sc_signal< sc_logic > ap_sig_cseq_ST_pp0_stg3_fsm_4;
    sc_signal< bool > ap_sig_151;
    sc_signal< sc_lv<32> > grp_fu_172_p2;
    sc_signal< sc_lv<32> > tmp_3_reg_381;
    sc_signal< sc_lv<32> > grp_fu_168_p2;
    sc_signal< sc_lv<32> > result_reg_391;
    sc_signal< sc_lv<4> > A_address0;
    sc_signal< sc_logic > A_ce0;
    sc_signal< sc_logic > A_we0;
    sc_signal< sc_lv<14> > indvar_flatten2_phi_fu_116_p4;
    sc_signal< sc_lv<12> > indvar_flatten_phi_fu_127_p4;
    sc_signal< sc_lv<7> > j_phi_fu_138_p4;
    sc_signal< sc_lv<32> > p_03_2_phi_fu_149_p4;
    sc_signal< sc_lv<5> > k_phi_fu_161_p4;
    sc_signal< sc_lv<64> > tmp_s_fu_289_p1;
    sc_signal< sc_lv<64> > tmp_2_fu_298_p1;
    sc_signal< bool > ap_sig_205;
    sc_signal< sc_lv<32> > grp_fu_168_p0;
    sc_signal< sc_lv<1> > exitcond_flatten_fu_189_p2;
    sc_signal< sc_lv<1> > tmp31_fu_203_p2;
    sc_signal< sc_lv<1> > exitcond_fu_221_p2;
    sc_signal< sc_lv<1> > not_exitcond_flatten_fu_215_p2;
    sc_signal< sc_lv<7> > j_mid_fu_195_p3;
    sc_signal< sc_lv<1> > exitcond_mid_fu_227_p2;
    sc_signal< sc_lv<1> > tmp_17_fu_239_p2;
    sc_signal< sc_lv<7> > j_2_fu_233_p2;
    sc_signal< sc_lv<1> > tmp_mid1_fu_253_p2;
    sc_signal< sc_lv<1> > tmp_mid_fu_209_p2;
    sc_signal< sc_lv<12> > indvar_flatten_op_fu_275_p2;
    sc_signal< sc_logic > grp_fu_168_ce;
    sc_signal< sc_logic > grp_fu_172_ce;
    sc_signal< sc_logic > ap_sig_cseq_ST_st15_fsm_5;
    sc_signal< bool > ap_sig_329;
    sc_signal< sc_lv<6> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<6> ap_ST_st1_fsm_0;
    static const sc_lv<6> ap_ST_pp0_stg0_fsm_1;
    static const sc_lv<6> ap_ST_pp0_stg1_fsm_2;
    static const sc_lv<6> ap_ST_pp0_stg2_fsm_3;
    static const sc_lv<6> ap_ST_pp0_stg3_fsm_4;
    static const sc_lv<6> ap_ST_st15_fsm_5;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<14> ap_const_lv14_0;
    static const sc_lv<12> ap_const_lv12_0;
    static const sc_lv<7> ap_const_lv7_0;
    static const sc_lv<5> ap_const_lv5_0;
    static const sc_lv<14> ap_const_lv14_3E80;
    static const sc_lv<14> ap_const_lv14_1;
    static const sc_lv<12> ap_const_lv12_640;
    static const sc_lv<5> ap_const_lv5_10;
    static const sc_lv<7> ap_const_lv7_1;
    static const sc_lv<12> ap_const_lv12_1;
    static const sc_lv<5> ap_const_lv5_F;
    static const sc_lv<5> ap_const_lv5_1;
    static const sc_lv<32> ap_const_lv32_5;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_A_address0();
    void thread_A_ce0();
    void thread_A_we0();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_sig_126();
    void thread_ap_sig_151();
    void thread_ap_sig_205();
    void thread_ap_sig_23();
    void thread_ap_sig_329();
    void thread_ap_sig_42();
    void thread_ap_sig_64();
    void thread_ap_sig_75();
    void thread_ap_sig_98();
    void thread_ap_sig_cseq_ST_pp0_stg0_fsm_1();
    void thread_ap_sig_cseq_ST_pp0_stg1_fsm_2();
    void thread_ap_sig_cseq_ST_pp0_stg2_fsm_3();
    void thread_ap_sig_cseq_ST_pp0_stg3_fsm_4();
    void thread_ap_sig_cseq_ST_st15_fsm_5();
    void thread_ap_sig_cseq_ST_st1_fsm_0();
    void thread_exitcond_flatten2_fu_177_p2();
    void thread_exitcond_flatten_fu_189_p2();
    void thread_exitcond_fu_221_p2();
    void thread_exitcond_mid_fu_227_p2();
    void thread_grp_fu_168_ce();
    void thread_grp_fu_168_p0();
    void thread_grp_fu_172_ce();
    void thread_indvar_flatten2_phi_fu_116_p4();
    void thread_indvar_flatten_next2_fu_183_p2();
    void thread_indvar_flatten_next_fu_281_p3();
    void thread_indvar_flatten_op_fu_275_p2();
    void thread_indvar_flatten_phi_fu_127_p4();
    void thread_j_2_fu_233_p2();
    void thread_j_mid2_fu_267_p3();
    void thread_j_mid_fu_195_p3();
    void thread_j_phi_fu_138_p4();
    void thread_k_2_fu_307_p2();
    void thread_k_mid2_fu_245_p3();
    void thread_k_phi_fu_161_p4();
    void thread_not_exitcond_flatten_fu_215_p2();
    void thread_p_03_2_phi_fu_149_p4();
    void thread_strm_in_V_blk_n();
    void thread_strm_in_V_read();
    void thread_strm_out_V_blk_n();
    void thread_strm_out_V_din();
    void thread_strm_out_V_write();
    void thread_tmp31_fu_203_p2();
    void thread_tmp_17_fu_239_p2();
    void thread_tmp_1_fu_293_p2();
    void thread_tmp_2_fu_298_p1();
    void thread_tmp_4_fu_302_p2();
    void thread_tmp_mid1_fu_253_p2();
    void thread_tmp_mid2_fu_259_p3();
    void thread_tmp_mid_fu_209_p2();
    void thread_tmp_s_fu_289_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
