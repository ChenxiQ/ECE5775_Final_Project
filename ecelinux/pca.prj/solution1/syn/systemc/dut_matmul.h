// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.2
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _dut_matmul_HH_
#define _dut_matmul_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "dut_fadd_32ns_32ns_32_5_full_dsp.h"
#include "dut_fmul_32ns_32ns_32_4_max_dsp.h"
#include "dut_matmul_A.h"

namespace ap_rtl {

struct dut_matmul : public sc_module {
    // Port declarations 12
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<32> > strm_in_V_dout;
    sc_in< sc_logic > strm_in_V_empty_n;
    sc_out< sc_logic > strm_in_V_read;
    sc_out< sc_lv<32> > strm_out_V_din;
    sc_in< sc_logic > strm_out_V_full_n;
    sc_out< sc_logic > strm_out_V_write;
    sc_signal< sc_logic > ap_var_for_const0;


    // Module declarations
    dut_matmul(sc_module_name name);
    SC_HAS_PROCESS(dut_matmul);

    ~dut_matmul();

    sc_trace_file* mVcdFile;

    dut_matmul_A* A_U;
    dut_matmul_A* B_U;
    dut_fadd_32ns_32ns_32_5_full_dsp<1,5,32,32,32>* dut_fadd_32ns_32ns_32_5_full_dsp_U1;
    dut_fmul_32ns_32ns_32_4_max_dsp<1,4,32,32,32>* dut_fmul_32ns_32ns_32_4_max_dsp_U2;
    sc_signal< sc_lv<16> > ap_CS_fsm;
    sc_signal< sc_logic > ap_sig_cseq_ST_st1_fsm_0;
    sc_signal< bool > ap_sig_33;
    sc_signal< sc_logic > strm_in_V_blk_n;
    sc_signal< sc_logic > ap_sig_cseq_ST_st3_fsm_2;
    sc_signal< bool > ap_sig_52;
    sc_signal< sc_lv<1> > exitcond8_fu_209_p2;
    sc_signal< sc_logic > ap_sig_cseq_ST_st5_fsm_4;
    sc_signal< bool > ap_sig_63;
    sc_signal< sc_lv<1> > exitcond6_fu_238_p2;
    sc_signal< sc_logic > strm_out_V_blk_n;
    sc_signal< sc_logic > ap_sig_cseq_ST_st16_fsm_15;
    sc_signal< bool > ap_sig_75;
    sc_signal< sc_lv<1> > tmp_5_reg_362;
    sc_signal< sc_lv<10> > i_1_fu_203_p2;
    sc_signal< sc_lv<10> > i_1_reg_310;
    sc_signal< sc_logic > ap_sig_cseq_ST_st2_fsm_1;
    sc_signal< bool > ap_sig_88;
    sc_signal< sc_lv<7> > m_1_fu_215_p2;
    sc_signal< bool > ap_sig_94;
    sc_signal< sc_lv<10> > j_1_fu_232_p2;
    sc_signal< sc_lv<10> > j_1_reg_326;
    sc_signal< sc_logic > ap_sig_cseq_ST_st4_fsm_3;
    sc_signal< bool > ap_sig_104;
    sc_signal< sc_lv<7> > n_1_fu_244_p2;
    sc_signal< bool > ap_sig_109;
    sc_signal< sc_lv<7> > k_1_fu_261_p2;
    sc_signal< sc_lv<7> > k_1_reg_342;
    sc_signal< sc_logic > ap_sig_cseq_ST_st6_fsm_5;
    sc_signal< bool > ap_sig_119;
    sc_signal< sc_lv<1> > tmp_2_fu_267_p2;
    sc_signal< sc_lv<1> > tmp_2_reg_347;
    sc_signal< sc_lv<1> > exitcond_fu_255_p2;
    sc_signal< sc_lv<1> > tmp_5_fu_279_p2;
    sc_signal< sc_lv<32> > A_q0;
    sc_signal< sc_logic > ap_sig_cseq_ST_st7_fsm_6;
    sc_signal< bool > ap_sig_138;
    sc_signal< sc_lv<32> > B_q0;
    sc_signal< sc_lv<32> > grp_fu_186_p2;
    sc_signal< sc_lv<32> > tmp_4_reg_376;
    sc_signal< sc_logic > ap_sig_cseq_ST_st10_fsm_9;
    sc_signal< bool > ap_sig_149;
    sc_signal< sc_logic > ap_sig_cseq_ST_st11_fsm_10;
    sc_signal< bool > ap_sig_158;
    sc_signal< sc_lv<32> > grp_fu_182_p2;
    sc_signal< sc_lv<32> > result_reg_386;
    sc_signal< sc_logic > ap_sig_cseq_ST_st15_fsm_14;
    sc_signal< bool > ap_sig_167;
    sc_signal< sc_lv<7> > A_address0;
    sc_signal< sc_logic > A_ce0;
    sc_signal< sc_logic > A_we0;
    sc_signal< sc_lv<7> > B_address0;
    sc_signal< sc_logic > B_ce0;
    sc_signal< sc_logic > B_we0;
    sc_signal< sc_lv<10> > i_reg_127;
    sc_signal< sc_lv<1> > exitcond7_fu_226_p2;
    sc_signal< sc_lv<7> > m_reg_138;
    sc_signal< sc_lv<1> > exitcond9_fu_197_p2;
    sc_signal< sc_lv<10> > j_reg_149;
    sc_signal< sc_lv<7> > n_reg_160;
    sc_signal< sc_lv<7> > k_reg_171;
    sc_signal< bool > ap_sig_217;
    sc_signal< sc_lv<64> > tmp_s_fu_221_p1;
    sc_signal< sc_lv<64> > tmp_1_fu_250_p1;
    sc_signal< sc_lv<64> > tmp_3_fu_273_p1;
    sc_signal< sc_lv<32> > tmp_fu_64;
    sc_signal< sc_lv<32> > grp_fu_182_p0;
    sc_signal< sc_lv<16> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<16> ap_ST_st1_fsm_0;
    static const sc_lv<16> ap_ST_st2_fsm_1;
    static const sc_lv<16> ap_ST_st3_fsm_2;
    static const sc_lv<16> ap_ST_st4_fsm_3;
    static const sc_lv<16> ap_ST_st5_fsm_4;
    static const sc_lv<16> ap_ST_st6_fsm_5;
    static const sc_lv<16> ap_ST_st7_fsm_6;
    static const sc_lv<16> ap_ST_st8_fsm_7;
    static const sc_lv<16> ap_ST_st9_fsm_8;
    static const sc_lv<16> ap_ST_st10_fsm_9;
    static const sc_lv<16> ap_ST_st11_fsm_10;
    static const sc_lv<16> ap_ST_st12_fsm_11;
    static const sc_lv<16> ap_ST_st13_fsm_12;
    static const sc_lv<16> ap_ST_st14_fsm_13;
    static const sc_lv<16> ap_ST_st15_fsm_14;
    static const sc_lv<16> ap_ST_st16_fsm_15;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_F;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<32> ap_const_lv32_6;
    static const sc_lv<32> ap_const_lv32_9;
    static const sc_lv<32> ap_const_lv32_A;
    static const sc_lv<32> ap_const_lv32_E;
    static const sc_lv<10> ap_const_lv10_0;
    static const sc_lv<7> ap_const_lv7_0;
    static const sc_lv<10> ap_const_lv10_310;
    static const sc_lv<10> ap_const_lv10_1;
    static const sc_lv<7> ap_const_lv7_64;
    static const sc_lv<7> ap_const_lv7_1;
    static const sc_lv<7> ap_const_lv7_63;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_clk_no_reset_();
    void thread_A_address0();
    void thread_A_ce0();
    void thread_A_we0();
    void thread_B_address0();
    void thread_B_ce0();
    void thread_B_we0();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_sig_104();
    void thread_ap_sig_109();
    void thread_ap_sig_119();
    void thread_ap_sig_138();
    void thread_ap_sig_149();
    void thread_ap_sig_158();
    void thread_ap_sig_167();
    void thread_ap_sig_217();
    void thread_ap_sig_33();
    void thread_ap_sig_52();
    void thread_ap_sig_63();
    void thread_ap_sig_75();
    void thread_ap_sig_88();
    void thread_ap_sig_94();
    void thread_ap_sig_cseq_ST_st10_fsm_9();
    void thread_ap_sig_cseq_ST_st11_fsm_10();
    void thread_ap_sig_cseq_ST_st15_fsm_14();
    void thread_ap_sig_cseq_ST_st16_fsm_15();
    void thread_ap_sig_cseq_ST_st1_fsm_0();
    void thread_ap_sig_cseq_ST_st2_fsm_1();
    void thread_ap_sig_cseq_ST_st3_fsm_2();
    void thread_ap_sig_cseq_ST_st4_fsm_3();
    void thread_ap_sig_cseq_ST_st5_fsm_4();
    void thread_ap_sig_cseq_ST_st6_fsm_5();
    void thread_ap_sig_cseq_ST_st7_fsm_6();
    void thread_exitcond6_fu_238_p2();
    void thread_exitcond7_fu_226_p2();
    void thread_exitcond8_fu_209_p2();
    void thread_exitcond9_fu_197_p2();
    void thread_exitcond_fu_255_p2();
    void thread_grp_fu_182_p0();
    void thread_i_1_fu_203_p2();
    void thread_j_1_fu_232_p2();
    void thread_k_1_fu_261_p2();
    void thread_m_1_fu_215_p2();
    void thread_n_1_fu_244_p2();
    void thread_strm_in_V_blk_n();
    void thread_strm_in_V_read();
    void thread_strm_out_V_blk_n();
    void thread_strm_out_V_din();
    void thread_strm_out_V_write();
    void thread_tmp_1_fu_250_p1();
    void thread_tmp_2_fu_267_p2();
    void thread_tmp_3_fu_273_p1();
    void thread_tmp_5_fu_279_p2();
    void thread_tmp_s_fu_221_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
