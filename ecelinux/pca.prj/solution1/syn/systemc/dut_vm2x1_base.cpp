// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.2
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "dut_vm2x1_base.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic dut_vm2x1_base::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic dut_vm2x1_base::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<10> dut_vm2x1_base::ap_ST_st1_fsm_0 = "1";
const sc_lv<10> dut_vm2x1_base::ap_ST_st2_fsm_1 = "10";
const sc_lv<10> dut_vm2x1_base::ap_ST_st3_fsm_2 = "100";
const sc_lv<10> dut_vm2x1_base::ap_ST_st4_fsm_3 = "1000";
const sc_lv<10> dut_vm2x1_base::ap_ST_st5_fsm_4 = "10000";
const sc_lv<10> dut_vm2x1_base::ap_ST_st6_fsm_5 = "100000";
const sc_lv<10> dut_vm2x1_base::ap_ST_st7_fsm_6 = "1000000";
const sc_lv<10> dut_vm2x1_base::ap_ST_st8_fsm_7 = "10000000";
const sc_lv<10> dut_vm2x1_base::ap_ST_st9_fsm_8 = "100000000";
const sc_lv<10> dut_vm2x1_base::ap_ST_st10_fsm_9 = "1000000000";
const sc_lv<32> dut_vm2x1_base::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> dut_vm2x1_base::ap_const_lv1_1 = "1";
const sc_lv<32> dut_vm2x1_base::ap_const_lv32_1 = "1";
const sc_lv<32> dut_vm2x1_base::ap_const_lv32_3 = "11";
const sc_lv<32> dut_vm2x1_base::ap_const_lv32_4 = "100";
const sc_lv<32> dut_vm2x1_base::ap_const_lv32_5 = "101";
const sc_lv<32> dut_vm2x1_base::ap_const_lv32_6 = "110";
const sc_lv<32> dut_vm2x1_base::ap_const_lv32_7 = "111";
const sc_lv<32> dut_vm2x1_base::ap_const_lv32_8 = "1000";
const sc_lv<32> dut_vm2x1_base::ap_const_lv32_9 = "1001";
const sc_lv<32> dut_vm2x1_base::ap_const_lv32_2 = "10";

dut_vm2x1_base::dut_vm2x1_base(sc_module_name name) : sc_module(name), mVcdFile(0) {
    dut_fadd_32ns_32ns_32_5_full_dsp_U24 = new dut_fadd_32ns_32ns_32_5_full_dsp<1,5,32,32,32>("dut_fadd_32ns_32ns_32_5_full_dsp_U24");
    dut_fadd_32ns_32ns_32_5_full_dsp_U24->clk(ap_clk);
    dut_fadd_32ns_32ns_32_5_full_dsp_U24->reset(ap_rst);
    dut_fadd_32ns_32ns_32_5_full_dsp_U24->din0(tmp_reg_66);
    dut_fadd_32ns_32ns_32_5_full_dsp_U24->din1(tmp_5_reg_71);
    dut_fadd_32ns_32ns_32_5_full_dsp_U24->ce(grp_fu_34_ce);
    dut_fadd_32ns_32ns_32_5_full_dsp_U24->dout(grp_fu_34_p2);
    dut_fmul_32ns_32ns_32_4_max_dsp_U25 = new dut_fmul_32ns_32ns_32_4_max_dsp<1,4,32,32,32>("dut_fmul_32ns_32ns_32_4_max_dsp_U25");
    dut_fmul_32ns_32ns_32_4_max_dsp_U25->clk(ap_clk);
    dut_fmul_32ns_32ns_32_4_max_dsp_U25->reset(ap_rst);
    dut_fmul_32ns_32ns_32_4_max_dsp_U25->din0(grp_fu_38_p0);
    dut_fmul_32ns_32ns_32_4_max_dsp_U25->din1(grp_fu_38_p1);
    dut_fmul_32ns_32ns_32_4_max_dsp_U25->ce(grp_fu_38_ce);
    dut_fmul_32ns_32ns_32_4_max_dsp_U25->dout(grp_fu_38_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );
    sensitive << ( ap_ce );
    sensitive << ( ap_sig_cseq_ST_st10_fsm_9 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_ce );
    sensitive << ( ap_sig_cseq_ST_st10_fsm_9 );

    SC_METHOD(thread_ap_return);
    sensitive << ( ap_ce );
    sensitive << ( grp_fu_34_p2 );
    sensitive << ( ap_sig_cseq_ST_st10_fsm_9 );

    SC_METHOD(thread_ap_sig_101);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_109);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_117);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_125);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_138);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_27);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_55);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_67);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_76);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_88);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_cseq_ST_st10_fsm_9);
    sensitive << ( ap_sig_125 );

    SC_METHOD(thread_ap_sig_cseq_ST_st1_fsm_0);
    sensitive << ( ap_sig_27 );

    SC_METHOD(thread_ap_sig_cseq_ST_st2_fsm_1);
    sensitive << ( ap_sig_55 );

    SC_METHOD(thread_ap_sig_cseq_ST_st3_fsm_2);
    sensitive << ( ap_sig_138 );

    SC_METHOD(thread_ap_sig_cseq_ST_st4_fsm_3);
    sensitive << ( ap_sig_67 );

    SC_METHOD(thread_ap_sig_cseq_ST_st5_fsm_4);
    sensitive << ( ap_sig_76 );

    SC_METHOD(thread_ap_sig_cseq_ST_st6_fsm_5);
    sensitive << ( ap_sig_88 );

    SC_METHOD(thread_ap_sig_cseq_ST_st7_fsm_6);
    sensitive << ( ap_sig_101 );

    SC_METHOD(thread_ap_sig_cseq_ST_st8_fsm_7);
    sensitive << ( ap_sig_109 );

    SC_METHOD(thread_ap_sig_cseq_ST_st9_fsm_8);
    sensitive << ( ap_sig_117 );

    SC_METHOD(thread_grp_fu_34_ce);
    sensitive << ( ap_ce );
    sensitive << ( ap_sig_cseq_ST_st6_fsm_5 );
    sensitive << ( ap_sig_cseq_ST_st7_fsm_6 );
    sensitive << ( ap_sig_cseq_ST_st8_fsm_7 );
    sensitive << ( ap_sig_cseq_ST_st9_fsm_8 );
    sensitive << ( ap_sig_cseq_ST_st10_fsm_9 );

    SC_METHOD(thread_grp_fu_38_ce);
    sensitive << ( ap_start );
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );
    sensitive << ( ap_ce );
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( ap_sig_cseq_ST_st4_fsm_3 );
    sensitive << ( ap_sig_cseq_ST_st5_fsm_4 );
    sensitive << ( ap_sig_cseq_ST_st3_fsm_2 );

    SC_METHOD(thread_grp_fu_38_p0);
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );
    sensitive << ( a1 );
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( ap_reg_ptbuf_a2 );

    SC_METHOD(thread_grp_fu_38_p1);
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );
    sensitive << ( b1 );
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( ap_reg_ptbuf_b2 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_ce );

    ap_CS_fsm = "0000000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "dut_vm2x1_base_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, a1, "(port)a1");
    sc_trace(mVcdFile, b1, "(port)b1");
    sc_trace(mVcdFile, a2, "(port)a2");
    sc_trace(mVcdFile, b2, "(port)b2");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
    sc_trace(mVcdFile, ap_ce, "(port)ap_ce");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st1_fsm_0, "ap_sig_cseq_ST_st1_fsm_0");
    sc_trace(mVcdFile, ap_sig_27, "ap_sig_27");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st2_fsm_1, "ap_sig_cseq_ST_st2_fsm_1");
    sc_trace(mVcdFile, ap_sig_55, "ap_sig_55");
    sc_trace(mVcdFile, grp_fu_38_p2, "grp_fu_38_p2");
    sc_trace(mVcdFile, tmp_reg_66, "tmp_reg_66");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st4_fsm_3, "ap_sig_cseq_ST_st4_fsm_3");
    sc_trace(mVcdFile, ap_sig_67, "ap_sig_67");
    sc_trace(mVcdFile, tmp_5_reg_71, "tmp_5_reg_71");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st5_fsm_4, "ap_sig_cseq_ST_st5_fsm_4");
    sc_trace(mVcdFile, ap_sig_76, "ap_sig_76");
    sc_trace(mVcdFile, ap_reg_ptbuf_a2, "ap_reg_ptbuf_a2");
    sc_trace(mVcdFile, ap_reg_ptbuf_b2, "ap_reg_ptbuf_b2");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st6_fsm_5, "ap_sig_cseq_ST_st6_fsm_5");
    sc_trace(mVcdFile, ap_sig_88, "ap_sig_88");
    sc_trace(mVcdFile, grp_fu_38_p0, "grp_fu_38_p0");
    sc_trace(mVcdFile, grp_fu_38_p1, "grp_fu_38_p1");
    sc_trace(mVcdFile, grp_fu_34_p2, "grp_fu_34_p2");
    sc_trace(mVcdFile, grp_fu_34_ce, "grp_fu_34_ce");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st7_fsm_6, "ap_sig_cseq_ST_st7_fsm_6");
    sc_trace(mVcdFile, ap_sig_101, "ap_sig_101");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st8_fsm_7, "ap_sig_cseq_ST_st8_fsm_7");
    sc_trace(mVcdFile, ap_sig_109, "ap_sig_109");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st9_fsm_8, "ap_sig_cseq_ST_st9_fsm_8");
    sc_trace(mVcdFile, ap_sig_117, "ap_sig_117");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st10_fsm_9, "ap_sig_cseq_ST_st10_fsm_9");
    sc_trace(mVcdFile, ap_sig_125, "ap_sig_125");
    sc_trace(mVcdFile, grp_fu_38_ce, "grp_fu_38_ce");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st3_fsm_2, "ap_sig_cseq_ST_st3_fsm_2");
    sc_trace(mVcdFile, ap_sig_138, "ap_sig_138");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

dut_vm2x1_base::~dut_vm2x1_base() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete dut_fadd_32ns_32ns_32_5_full_dsp_U24;
    delete dut_fmul_32ns_32ns_32_4_max_dsp_U25;
}

void dut_vm2x1_base::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_st1_fsm_0;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_ce.read()) && !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        ap_reg_ptbuf_a2 = a2.read();
        ap_reg_ptbuf_b2 = b2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_ce.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st5_fsm_4.read()))) {
        tmp_5_reg_71 = grp_fu_38_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_ce.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st4_fsm_3.read()))) {
        tmp_reg_66 = grp_fu_38_p2.read();
    }
}

void dut_vm2x1_base::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_ce.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st10_fsm_9.read())))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void dut_vm2x1_base::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void dut_vm2x1_base::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_ce.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st10_fsm_9.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void dut_vm2x1_base::thread_ap_return() {
    ap_return = grp_fu_34_p2.read();
}

void dut_vm2x1_base::thread_ap_sig_101() {
    ap_sig_101 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(6, 6));
}

void dut_vm2x1_base::thread_ap_sig_109() {
    ap_sig_109 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(7, 7));
}

void dut_vm2x1_base::thread_ap_sig_117() {
    ap_sig_117 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(8, 8));
}

void dut_vm2x1_base::thread_ap_sig_125() {
    ap_sig_125 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(9, 9));
}

void dut_vm2x1_base::thread_ap_sig_138() {
    ap_sig_138 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(2, 2));
}

void dut_vm2x1_base::thread_ap_sig_27() {
    ap_sig_27 = esl_seteq<1,1,1>(ap_CS_fsm.read().range(0, 0), ap_const_lv1_1);
}

void dut_vm2x1_base::thread_ap_sig_55() {
    ap_sig_55 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(1, 1));
}

void dut_vm2x1_base::thread_ap_sig_67() {
    ap_sig_67 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(3, 3));
}

void dut_vm2x1_base::thread_ap_sig_76() {
    ap_sig_76 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(4, 4));
}

void dut_vm2x1_base::thread_ap_sig_88() {
    ap_sig_88 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(5, 5));
}

void dut_vm2x1_base::thread_ap_sig_cseq_ST_st10_fsm_9() {
    if (ap_sig_125.read()) {
        ap_sig_cseq_ST_st10_fsm_9 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st10_fsm_9 = ap_const_logic_0;
    }
}

void dut_vm2x1_base::thread_ap_sig_cseq_ST_st1_fsm_0() {
    if (ap_sig_27.read()) {
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    }
}

void dut_vm2x1_base::thread_ap_sig_cseq_ST_st2_fsm_1() {
    if (ap_sig_55.read()) {
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    }
}

void dut_vm2x1_base::thread_ap_sig_cseq_ST_st3_fsm_2() {
    if (ap_sig_138.read()) {
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_0;
    }
}

void dut_vm2x1_base::thread_ap_sig_cseq_ST_st4_fsm_3() {
    if (ap_sig_67.read()) {
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_0;
    }
}

void dut_vm2x1_base::thread_ap_sig_cseq_ST_st5_fsm_4() {
    if (ap_sig_76.read()) {
        ap_sig_cseq_ST_st5_fsm_4 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st5_fsm_4 = ap_const_logic_0;
    }
}

void dut_vm2x1_base::thread_ap_sig_cseq_ST_st6_fsm_5() {
    if (ap_sig_88.read()) {
        ap_sig_cseq_ST_st6_fsm_5 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st6_fsm_5 = ap_const_logic_0;
    }
}

void dut_vm2x1_base::thread_ap_sig_cseq_ST_st7_fsm_6() {
    if (ap_sig_101.read()) {
        ap_sig_cseq_ST_st7_fsm_6 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st7_fsm_6 = ap_const_logic_0;
    }
}

void dut_vm2x1_base::thread_ap_sig_cseq_ST_st8_fsm_7() {
    if (ap_sig_109.read()) {
        ap_sig_cseq_ST_st8_fsm_7 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st8_fsm_7 = ap_const_logic_0;
    }
}

void dut_vm2x1_base::thread_ap_sig_cseq_ST_st9_fsm_8() {
    if (ap_sig_117.read()) {
        ap_sig_cseq_ST_st9_fsm_8 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st9_fsm_8 = ap_const_logic_0;
    }
}

void dut_vm2x1_base::thread_grp_fu_34_ce() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_ce.read()) && 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st6_fsm_5.read()) || 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st7_fsm_6.read()) || 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st8_fsm_7.read()) || 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st9_fsm_8.read()) || 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st10_fsm_9.read())))) {
        grp_fu_34_ce = ap_const_logic_1;
    } else {
        grp_fu_34_ce = ap_const_logic_0;
    }
}

void dut_vm2x1_base::thread_grp_fu_38_ce() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_ce.read()) && 
         ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
           !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) || 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) || 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st4_fsm_3.read()) || 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st5_fsm_4.read()) || 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read())))) {
        grp_fu_38_ce = ap_const_logic_1;
    } else {
        grp_fu_38_ce = ap_const_logic_0;
    }
}

void dut_vm2x1_base::thread_grp_fu_38_p0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read())) {
        grp_fu_38_p0 = ap_reg_ptbuf_a2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read())) {
        grp_fu_38_p0 = a1.read();
    } else {
        grp_fu_38_p0 = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void dut_vm2x1_base::thread_grp_fu_38_p1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read())) {
        grp_fu_38_p1 = ap_reg_ptbuf_b2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read())) {
        grp_fu_38_p1 = b1.read();
    } else {
        grp_fu_38_p1 = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void dut_vm2x1_base::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_ce.read()) && !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
                ap_NS_fsm = ap_ST_st2_fsm_1;
            } else {
                ap_NS_fsm = ap_ST_st1_fsm_0;
            }
            break;
        case 2 : 
            if (esl_seteq<1,1,1>(ap_const_logic_1, ap_ce.read())) {
                ap_NS_fsm = ap_ST_st3_fsm_2;
            } else {
                ap_NS_fsm = ap_ST_st2_fsm_1;
            }
            break;
        case 4 : 
            if (esl_seteq<1,1,1>(ap_const_logic_1, ap_ce.read())) {
                ap_NS_fsm = ap_ST_st4_fsm_3;
            } else {
                ap_NS_fsm = ap_ST_st3_fsm_2;
            }
            break;
        case 8 : 
            if (esl_seteq<1,1,1>(ap_const_logic_1, ap_ce.read())) {
                ap_NS_fsm = ap_ST_st5_fsm_4;
            } else {
                ap_NS_fsm = ap_ST_st4_fsm_3;
            }
            break;
        case 16 : 
            if (esl_seteq<1,1,1>(ap_const_logic_1, ap_ce.read())) {
                ap_NS_fsm = ap_ST_st6_fsm_5;
            } else {
                ap_NS_fsm = ap_ST_st5_fsm_4;
            }
            break;
        case 32 : 
            if (esl_seteq<1,1,1>(ap_const_logic_1, ap_ce.read())) {
                ap_NS_fsm = ap_ST_st7_fsm_6;
            } else {
                ap_NS_fsm = ap_ST_st6_fsm_5;
            }
            break;
        case 64 : 
            if (esl_seteq<1,1,1>(ap_const_logic_1, ap_ce.read())) {
                ap_NS_fsm = ap_ST_st8_fsm_7;
            } else {
                ap_NS_fsm = ap_ST_st7_fsm_6;
            }
            break;
        case 128 : 
            if (esl_seteq<1,1,1>(ap_const_logic_1, ap_ce.read())) {
                ap_NS_fsm = ap_ST_st9_fsm_8;
            } else {
                ap_NS_fsm = ap_ST_st8_fsm_7;
            }
            break;
        case 256 : 
            if (esl_seteq<1,1,1>(ap_const_logic_1, ap_ce.read())) {
                ap_NS_fsm = ap_ST_st10_fsm_9;
            } else {
                ap_NS_fsm = ap_ST_st9_fsm_8;
            }
            break;
        case 512 : 
            if (esl_seteq<1,1,1>(ap_const_logic_1, ap_ce.read())) {
                ap_NS_fsm = ap_ST_st1_fsm_0;
            } else {
                ap_NS_fsm = ap_ST_st10_fsm_9;
            }
            break;
        default : 
            ap_NS_fsm =  (sc_lv<10>) ("XXXXXXXXXX");
            break;
    }
}

}

