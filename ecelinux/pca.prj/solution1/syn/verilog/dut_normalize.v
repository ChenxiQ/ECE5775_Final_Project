// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.2
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module dut_normalize (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        X_address0,
        X_ce0,
        X_we0,
        X_d0,
        X_q0,
        mean_address0,
        mean_ce0,
        mean_we0,
        mean_d0
);

parameter    ap_ST_st1_fsm_0 = 33'b1;
parameter    ap_ST_st2_fsm_1 = 33'b10;
parameter    ap_ST_st3_fsm_2 = 33'b100;
parameter    ap_ST_st4_fsm_3 = 33'b1000;
parameter    ap_ST_st5_fsm_4 = 33'b10000;
parameter    ap_ST_st6_fsm_5 = 33'b100000;
parameter    ap_ST_st7_fsm_6 = 33'b1000000;
parameter    ap_ST_st8_fsm_7 = 33'b10000000;
parameter    ap_ST_st9_fsm_8 = 33'b100000000;
parameter    ap_ST_st10_fsm_9 = 33'b1000000000;
parameter    ap_ST_st11_fsm_10 = 33'b10000000000;
parameter    ap_ST_st12_fsm_11 = 33'b100000000000;
parameter    ap_ST_st13_fsm_12 = 33'b1000000000000;
parameter    ap_ST_st14_fsm_13 = 33'b10000000000000;
parameter    ap_ST_st15_fsm_14 = 33'b100000000000000;
parameter    ap_ST_st16_fsm_15 = 33'b1000000000000000;
parameter    ap_ST_st17_fsm_16 = 33'b10000000000000000;
parameter    ap_ST_st18_fsm_17 = 33'b100000000000000000;
parameter    ap_ST_st19_fsm_18 = 33'b1000000000000000000;
parameter    ap_ST_st20_fsm_19 = 33'b10000000000000000000;
parameter    ap_ST_st21_fsm_20 = 33'b100000000000000000000;
parameter    ap_ST_st22_fsm_21 = 33'b1000000000000000000000;
parameter    ap_ST_st23_fsm_22 = 33'b10000000000000000000000;
parameter    ap_ST_st24_fsm_23 = 33'b100000000000000000000000;
parameter    ap_ST_st25_fsm_24 = 33'b1000000000000000000000000;
parameter    ap_ST_st26_fsm_25 = 33'b10000000000000000000000000;
parameter    ap_ST_st27_fsm_26 = 33'b100000000000000000000000000;
parameter    ap_ST_st28_fsm_27 = 33'b1000000000000000000000000000;
parameter    ap_ST_st29_fsm_28 = 33'b10000000000000000000000000000;
parameter    ap_ST_st30_fsm_29 = 33'b100000000000000000000000000000;
parameter    ap_ST_st31_fsm_30 = 33'b1000000000000000000000000000000;
parameter    ap_ST_st32_fsm_31 = 33'b10000000000000000000000000000000;
parameter    ap_ST_st33_fsm_32 = 33'b100000000000000000000000000000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv32_1A = 32'b11010;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_8 = 32'b1000;
parameter    ap_const_lv32_17 = 32'b10111;
parameter    ap_const_lv32_19 = 32'b11001;
parameter    ap_const_lv32_1F = 32'b11111;
parameter    ap_const_lv10_0 = 10'b0000000000;
parameter    ap_const_lv18_0 = 18'b000000000000000000;
parameter    ap_const_lv8_0 = 8'b00000000;
parameter    ap_const_lv32_18 = 32'b11000;
parameter    ap_const_lv32_20 = 32'b100000;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv32_1B = 32'b11011;
parameter    ap_const_lv32_43480000 = 32'b1000011010010000000000000000000;
parameter    ap_const_lv18_C8 = 18'b11001000;
parameter    ap_const_lv10_310 = 10'b1100010000;
parameter    ap_const_lv10_1 = 10'b1;
parameter    ap_const_lv8_C8 = 8'b11001000;
parameter    ap_const_lv8_1 = 8'b1;
parameter    ap_const_lv2_0 = 2'b00;
parameter    ap_const_lv2_1 = 2'b1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [17:0] X_address0;
output   X_ce0;
output   X_we0;
output  [31:0] X_d0;
input  [31:0] X_q0;
output  [9:0] mean_address0;
output   mean_ce0;
output   mean_we0;
output  [31:0] mean_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[17:0] X_address0;
reg X_ce0;
reg X_we0;
reg mean_ce0;
reg mean_we0;

(* fsm_encoding = "none" *) reg   [32:0] ap_CS_fsm;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_50;
reg   [31:0] reg_132;
reg    ap_sig_cseq_ST_st4_fsm_3;
reg    ap_sig_76;
reg    ap_sig_cseq_ST_st27_fsm_26;
reg    ap_sig_83;
wire   [17:0] next_mul_fu_138_p2;
reg   [17:0] next_mul_reg_214;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_93;
wire   [9:0] j_2_fu_150_p2;
reg   [9:0] j_2_reg_222;
wire   [63:0] tmp_s_fu_156_p1;
reg   [63:0] tmp_s_reg_227;
wire   [0:0] exitcond2_fu_144_p2;
wire   [7:0] i_3_fu_166_p2;
reg   [7:0] i_3_reg_235;
reg    ap_sig_cseq_ST_st3_fsm_2;
reg    ap_sig_110;
wire   [0:0] exitcond1_fu_160_p2;
wire   [31:0] grp_fu_121_p2;
reg    ap_sig_cseq_ST_st9_fsm_8;
reg    ap_sig_124;
wire   [31:0] grp_fu_126_p2;
reg   [31:0] tmp_133_reg_250;
reg    ap_sig_cseq_ST_st24_fsm_23;
reg    ap_sig_133;
wire   [7:0] i_4_fu_193_p2;
reg   [7:0] i_4_reg_259;
reg    ap_sig_cseq_ST_st26_fsm_25;
reg    ap_sig_142;
reg   [17:0] X_addr_1_reg_264;
wire   [0:0] exitcond_fu_187_p2;
reg   [31:0] tmp_136_reg_269;
reg    ap_sig_cseq_ST_st32_fsm_31;
reg    ap_sig_155;
reg   [9:0] j_reg_64;
reg   [17:0] phi_mul_reg_75;
reg   [31:0] sum_reg_87;
reg   [7:0] i_reg_99;
reg   [7:0] i1_reg_110;
reg    ap_sig_cseq_ST_st25_fsm_24;
reg    ap_sig_180;
reg    ap_sig_cseq_ST_st33_fsm_32;
reg    ap_sig_187;
wire   [63:0] tmp_172_cast_fu_182_p1;
wire   [63:0] tmp_173_cast_fu_209_p1;
reg   [31:0] grp_fu_121_p0;
reg   [31:0] grp_fu_121_p1;
reg    ap_sig_cseq_ST_st5_fsm_4;
reg    ap_sig_203;
reg    ap_sig_cseq_ST_st28_fsm_27;
reg    ap_sig_210;
wire   [17:0] tmp_134_cast_fu_172_p1;
wire   [17:0] tmp_157_fu_176_p2;
wire   [17:0] tmp_135_cast_fu_199_p1;
wire   [17:0] tmp_158_fu_203_p2;
reg   [1:0] grp_fu_121_opcode;
reg   [32:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 33'b1;
end

dut_faddfsub_32ns_32ns_32_5_full_dsp #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dut_faddfsub_32ns_32ns_32_5_full_dsp_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_121_p0),
    .din1(grp_fu_121_p1),
    .opcode(grp_fu_121_opcode),
    .ce(1'b1),
    .dout(grp_fu_121_p2)
);

dut_fdiv_32ns_32ns_32_16 #(
    .ID( 1 ),
    .NUM_STAGE( 16 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dut_fdiv_32ns_32ns_32_16_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(sum_reg_87),
    .din1(ap_const_lv32_43480000),
    .ce(1'b1),
    .dout(grp_fu_126_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st33_fsm_32)) begin
        i1_reg_110 <= i_4_reg_259;
    end else if ((1'b1 == ap_sig_cseq_ST_st25_fsm_24)) begin
        i1_reg_110 <= ap_const_lv8_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond2_fu_144_p2 == 1'b0))) begin
        i_reg_99 <= ap_const_lv8_0;
    end else if ((1'b1 == ap_sig_cseq_ST_st9_fsm_8)) begin
        i_reg_99 <= i_3_reg_235;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st26_fsm_25) & ~(1'b0 == exitcond_fu_187_p2))) begin
        j_reg_64 <= j_2_reg_222;
    end else if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == 1'b0))) begin
        j_reg_64 <= ap_const_lv10_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st26_fsm_25) & ~(1'b0 == exitcond_fu_187_p2))) begin
        phi_mul_reg_75 <= next_mul_reg_214;
    end else if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == 1'b0))) begin
        phi_mul_reg_75 <= ap_const_lv18_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond2_fu_144_p2 == 1'b0))) begin
        sum_reg_87 <= ap_const_lv32_0;
    end else if ((1'b1 == ap_sig_cseq_ST_st9_fsm_8)) begin
        sum_reg_87 <= grp_fu_121_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st26_fsm_25) & (1'b0 == exitcond_fu_187_p2))) begin
        X_addr_1_reg_264 <= tmp_173_cast_fu_209_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        i_3_reg_235 <= i_3_fu_166_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st26_fsm_25)) begin
        i_4_reg_259 <= i_4_fu_193_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        j_2_reg_222 <= j_2_fu_150_p2;
        next_mul_reg_214 <= next_mul_fu_138_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st4_fsm_3) | (1'b1 == ap_sig_cseq_ST_st27_fsm_26))) begin
        reg_132 <= X_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st24_fsm_23)) begin
        tmp_133_reg_250 <= grp_fu_126_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st32_fsm_31)) begin
        tmp_136_reg_269 <= grp_fu_121_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond2_fu_144_p2 == 1'b0))) begin
        tmp_s_reg_227[9 : 0] <= tmp_s_fu_156_p1[9 : 0];
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st33_fsm_32)) begin
        X_address0 = X_addr_1_reg_264;
    end else if ((1'b1 == ap_sig_cseq_ST_st26_fsm_25)) begin
        X_address0 = tmp_173_cast_fu_209_p1;
    end else if ((1'b1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        X_address0 = tmp_172_cast_fu_182_p1;
    end else begin
        X_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st3_fsm_2) | (1'b1 == ap_sig_cseq_ST_st26_fsm_25) | (1'b1 == ap_sig_cseq_ST_st33_fsm_32))) begin
        X_ce0 = 1'b1;
    end else begin
        X_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st33_fsm_32)) begin
        X_we0 = 1'b1;
    end else begin
        X_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_sig_cseq_ST_st1_fsm_0)) | ((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & ~(exitcond2_fu_144_p2 == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & ~(exitcond2_fu_144_p2 == 1'b0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_50) begin
        ap_sig_cseq_ST_st1_fsm_0 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_133) begin
        ap_sig_cseq_ST_st24_fsm_23 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st24_fsm_23 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_180) begin
        ap_sig_cseq_ST_st25_fsm_24 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st25_fsm_24 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_142) begin
        ap_sig_cseq_ST_st26_fsm_25 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st26_fsm_25 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_83) begin
        ap_sig_cseq_ST_st27_fsm_26 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st27_fsm_26 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_210) begin
        ap_sig_cseq_ST_st28_fsm_27 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st28_fsm_27 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_93) begin
        ap_sig_cseq_ST_st2_fsm_1 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_155) begin
        ap_sig_cseq_ST_st32_fsm_31 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st32_fsm_31 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_187) begin
        ap_sig_cseq_ST_st33_fsm_32 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st33_fsm_32 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_110) begin
        ap_sig_cseq_ST_st3_fsm_2 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st3_fsm_2 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_76) begin
        ap_sig_cseq_ST_st4_fsm_3 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st4_fsm_3 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_203) begin
        ap_sig_cseq_ST_st5_fsm_4 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st5_fsm_4 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_124) begin
        ap_sig_cseq_ST_st9_fsm_8 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st9_fsm_8 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st28_fsm_27)) begin
        grp_fu_121_opcode = ap_const_lv2_1;
    end else if ((1'b1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        grp_fu_121_opcode = ap_const_lv2_0;
    end else begin
        grp_fu_121_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st28_fsm_27)) begin
        grp_fu_121_p0 = reg_132;
    end else if ((1'b1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        grp_fu_121_p0 = sum_reg_87;
    end else begin
        grp_fu_121_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st28_fsm_27)) begin
        grp_fu_121_p1 = tmp_133_reg_250;
    end else if ((1'b1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        grp_fu_121_p1 = reg_132;
    end else begin
        grp_fu_121_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st25_fsm_24)) begin
        mean_ce0 = 1'b1;
    end else begin
        mean_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st25_fsm_24)) begin
        mean_we0 = 1'b1;
    end else begin
        mean_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : begin
            if (~(ap_start == 1'b0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : begin
            if (~(exitcond2_fu_144_p2 == 1'b0)) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end
        end
        ap_ST_st3_fsm_2 : begin
            if (~(1'b0 == exitcond1_fu_160_p2)) begin
                ap_NS_fsm = ap_ST_st10_fsm_9;
            end else begin
                ap_NS_fsm = ap_ST_st4_fsm_3;
            end
        end
        ap_ST_st4_fsm_3 : begin
            ap_NS_fsm = ap_ST_st5_fsm_4;
        end
        ap_ST_st5_fsm_4 : begin
            ap_NS_fsm = ap_ST_st6_fsm_5;
        end
        ap_ST_st6_fsm_5 : begin
            ap_NS_fsm = ap_ST_st7_fsm_6;
        end
        ap_ST_st7_fsm_6 : begin
            ap_NS_fsm = ap_ST_st8_fsm_7;
        end
        ap_ST_st8_fsm_7 : begin
            ap_NS_fsm = ap_ST_st9_fsm_8;
        end
        ap_ST_st9_fsm_8 : begin
            ap_NS_fsm = ap_ST_st3_fsm_2;
        end
        ap_ST_st10_fsm_9 : begin
            ap_NS_fsm = ap_ST_st11_fsm_10;
        end
        ap_ST_st11_fsm_10 : begin
            ap_NS_fsm = ap_ST_st12_fsm_11;
        end
        ap_ST_st12_fsm_11 : begin
            ap_NS_fsm = ap_ST_st13_fsm_12;
        end
        ap_ST_st13_fsm_12 : begin
            ap_NS_fsm = ap_ST_st14_fsm_13;
        end
        ap_ST_st14_fsm_13 : begin
            ap_NS_fsm = ap_ST_st15_fsm_14;
        end
        ap_ST_st15_fsm_14 : begin
            ap_NS_fsm = ap_ST_st16_fsm_15;
        end
        ap_ST_st16_fsm_15 : begin
            ap_NS_fsm = ap_ST_st17_fsm_16;
        end
        ap_ST_st17_fsm_16 : begin
            ap_NS_fsm = ap_ST_st18_fsm_17;
        end
        ap_ST_st18_fsm_17 : begin
            ap_NS_fsm = ap_ST_st19_fsm_18;
        end
        ap_ST_st19_fsm_18 : begin
            ap_NS_fsm = ap_ST_st20_fsm_19;
        end
        ap_ST_st20_fsm_19 : begin
            ap_NS_fsm = ap_ST_st21_fsm_20;
        end
        ap_ST_st21_fsm_20 : begin
            ap_NS_fsm = ap_ST_st22_fsm_21;
        end
        ap_ST_st22_fsm_21 : begin
            ap_NS_fsm = ap_ST_st23_fsm_22;
        end
        ap_ST_st23_fsm_22 : begin
            ap_NS_fsm = ap_ST_st24_fsm_23;
        end
        ap_ST_st24_fsm_23 : begin
            ap_NS_fsm = ap_ST_st25_fsm_24;
        end
        ap_ST_st25_fsm_24 : begin
            ap_NS_fsm = ap_ST_st26_fsm_25;
        end
        ap_ST_st26_fsm_25 : begin
            if ((1'b0 == exitcond_fu_187_p2)) begin
                ap_NS_fsm = ap_ST_st27_fsm_26;
            end else begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end
        end
        ap_ST_st27_fsm_26 : begin
            ap_NS_fsm = ap_ST_st28_fsm_27;
        end
        ap_ST_st28_fsm_27 : begin
            ap_NS_fsm = ap_ST_st29_fsm_28;
        end
        ap_ST_st29_fsm_28 : begin
            ap_NS_fsm = ap_ST_st30_fsm_29;
        end
        ap_ST_st30_fsm_29 : begin
            ap_NS_fsm = ap_ST_st31_fsm_30;
        end
        ap_ST_st31_fsm_30 : begin
            ap_NS_fsm = ap_ST_st32_fsm_31;
        end
        ap_ST_st32_fsm_31 : begin
            ap_NS_fsm = ap_ST_st33_fsm_32;
        end
        ap_ST_st33_fsm_32 : begin
            ap_NS_fsm = ap_ST_st26_fsm_25;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign X_d0 = tmp_136_reg_269;

always @ (*) begin
    ap_sig_110 = (1'b1 == ap_CS_fsm[ap_const_lv32_2]);
end

always @ (*) begin
    ap_sig_124 = (1'b1 == ap_CS_fsm[ap_const_lv32_8]);
end

always @ (*) begin
    ap_sig_133 = (1'b1 == ap_CS_fsm[ap_const_lv32_17]);
end

always @ (*) begin
    ap_sig_142 = (1'b1 == ap_CS_fsm[ap_const_lv32_19]);
end

always @ (*) begin
    ap_sig_155 = (1'b1 == ap_CS_fsm[ap_const_lv32_1F]);
end

always @ (*) begin
    ap_sig_180 = (1'b1 == ap_CS_fsm[ap_const_lv32_18]);
end

always @ (*) begin
    ap_sig_187 = (1'b1 == ap_CS_fsm[ap_const_lv32_20]);
end

always @ (*) begin
    ap_sig_203 = (1'b1 == ap_CS_fsm[ap_const_lv32_4]);
end

always @ (*) begin
    ap_sig_210 = (1'b1 == ap_CS_fsm[ap_const_lv32_1B]);
end

always @ (*) begin
    ap_sig_50 = (ap_CS_fsm[ap_const_lv32_0] == 1'b1);
end

always @ (*) begin
    ap_sig_76 = (1'b1 == ap_CS_fsm[ap_const_lv32_3]);
end

always @ (*) begin
    ap_sig_83 = (1'b1 == ap_CS_fsm[ap_const_lv32_1A]);
end

always @ (*) begin
    ap_sig_93 = (1'b1 == ap_CS_fsm[ap_const_lv32_1]);
end

assign exitcond1_fu_160_p2 = ((i_reg_99 == ap_const_lv8_C8) ? 1'b1 : 1'b0);

assign exitcond2_fu_144_p2 = ((j_reg_64 == ap_const_lv10_310) ? 1'b1 : 1'b0);

assign exitcond_fu_187_p2 = ((i1_reg_110 == ap_const_lv8_C8) ? 1'b1 : 1'b0);

assign i_3_fu_166_p2 = (i_reg_99 + ap_const_lv8_1);

assign i_4_fu_193_p2 = (i1_reg_110 + ap_const_lv8_1);

assign j_2_fu_150_p2 = (j_reg_64 + ap_const_lv10_1);

assign mean_address0 = tmp_s_reg_227;

assign mean_d0 = tmp_133_reg_250;

assign next_mul_fu_138_p2 = (phi_mul_reg_75 + ap_const_lv18_C8);

assign tmp_134_cast_fu_172_p1 = i_reg_99;

assign tmp_135_cast_fu_199_p1 = i1_reg_110;

assign tmp_157_fu_176_p2 = (phi_mul_reg_75 + tmp_134_cast_fu_172_p1);

assign tmp_158_fu_203_p2 = (phi_mul_reg_75 + tmp_135_cast_fu_199_p1);

assign tmp_172_cast_fu_182_p1 = tmp_157_fu_176_p2;

assign tmp_173_cast_fu_209_p1 = tmp_158_fu_203_p2;

assign tmp_s_fu_156_p1 = j_reg_64;

always @ (posedge ap_clk) begin
    tmp_s_reg_227[63:10] <= 54'b000000000000000000000000000000000000000000000000000000;
end

endmodule //dut_normalize
