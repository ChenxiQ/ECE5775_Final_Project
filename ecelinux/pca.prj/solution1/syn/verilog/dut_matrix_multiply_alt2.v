// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.2
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module dut_matrix_multiply_alt2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        A_address0,
        A_ce0,
        A_q0,
        B_address0,
        B_ce0,
        B_q0,
        C_address0,
        C_ce0,
        C_we0,
        C_d0
);

parameter    ap_ST_st1_fsm_0 = 3'b1;
parameter    ap_ST_pp0_stg0_fsm_1 = 3'b10;
parameter    ap_ST_st14_fsm_2 = 3'b100;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv22_0 = 22'b0000000000000000000000;
parameter    ap_const_lv10_0 = 10'b0000000000;
parameter    ap_const_lv13_0 = 13'b0000000000000;
parameter    ap_const_lv5_0 = 5'b00000;
parameter    ap_const_lv8_0 = 8'b00000000;
parameter    ap_const_lv22_2FDA00 = 22'b1011111101101000000000;
parameter    ap_const_lv22_1 = 22'b1;
parameter    ap_const_lv10_1 = 10'b1;
parameter    ap_const_lv13_FA0 = 13'b111110100000;
parameter    ap_const_lv10_30F = 10'b1100001111;
parameter    ap_const_lv8_C8 = 8'b11001000;
parameter    ap_const_lv5_1 = 5'b1;
parameter    ap_const_lv8_1 = 8'b1;
parameter    ap_const_lv13_1 = 13'b1;
parameter    ap_const_lv13_C8 = 13'b11001000;
parameter    ap_const_lv18_C8 = 18'b11001000;
parameter    ap_const_lv15_310 = 15'b1100010000;
parameter    ap_const_lv32_2 = 32'b10;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [13:0] A_address0;
output   A_ce0;
input  [31:0] A_q0;
output  [17:0] B_address0;
output   B_ce0;
input  [31:0] B_q0;
output  [11:0] C_address0;
output   C_ce0;
output   C_we0;
output  [31:0] C_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg A_ce0;
reg B_ce0;
reg C_ce0;
reg C_we0;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_20;
reg   [21:0] indvar_flatten4_reg_123;
reg   [9:0] Col_assign_3_reg_134;
reg   [12:0] indvar_flatten_reg_145;
reg   [4:0] Row_assign_reg_156;
reg   [7:0] Col_assign_reg_167;
wire   [0:0] exitcond_flatten4_fu_188_p2;
reg   [0:0] exitcond_flatten4_reg_392;
reg    ap_sig_cseq_ST_pp0_stg0_fsm_1;
reg    ap_sig_61;
reg    ap_reg_ppiten_pp0_it0;
reg    ap_reg_ppiten_pp0_it1;
reg    ap_reg_ppiten_pp0_it2;
reg    ap_reg_ppiten_pp0_it3;
reg    ap_reg_ppiten_pp0_it4;
reg    ap_reg_ppiten_pp0_it5;
reg    ap_reg_ppiten_pp0_it6;
reg    ap_reg_ppiten_pp0_it7;
reg    ap_reg_ppiten_pp0_it8;
reg    ap_reg_ppiten_pp0_it9;
reg    ap_reg_ppiten_pp0_it10;
reg    ap_reg_ppiten_pp0_it11;
reg   [0:0] ap_reg_ppstg_exitcond_flatten4_reg_392_pp0_iter1;
reg   [0:0] ap_reg_ppstg_exitcond_flatten4_reg_392_pp0_iter2;
reg   [0:0] ap_reg_ppstg_exitcond_flatten4_reg_392_pp0_iter3;
reg   [0:0] ap_reg_ppstg_exitcond_flatten4_reg_392_pp0_iter4;
wire   [21:0] indvar_flatten_next4_fu_194_p2;
wire   [0:0] tmp_mid2_fu_232_p3;
reg   [0:0] tmp_mid2_reg_401;
reg   [0:0] ap_reg_ppstg_tmp_mid2_reg_401_pp0_iter1;
reg   [0:0] ap_reg_ppstg_tmp_mid2_reg_401_pp0_iter2;
reg   [0:0] ap_reg_ppstg_tmp_mid2_reg_401_pp0_iter3;
reg   [0:0] ap_reg_ppstg_tmp_mid2_reg_401_pp0_iter4;
reg   [0:0] ap_reg_ppstg_tmp_mid2_reg_401_pp0_iter5;
reg   [0:0] ap_reg_ppstg_tmp_mid2_reg_401_pp0_iter6;
reg   [0:0] ap_reg_ppstg_tmp_mid2_reg_401_pp0_iter7;
reg   [0:0] ap_reg_ppstg_tmp_mid2_reg_401_pp0_iter8;
reg   [0:0] ap_reg_ppstg_tmp_mid2_reg_401_pp0_iter9;
reg   [0:0] ap_reg_ppstg_tmp_mid2_reg_401_pp0_iter10;
wire   [0:0] tmp_mid2_29_fu_252_p3;
reg   [0:0] tmp_mid2_29_reg_405;
reg   [0:0] ap_reg_ppstg_tmp_mid2_29_reg_405_pp0_iter1;
reg   [0:0] ap_reg_ppstg_tmp_mid2_29_reg_405_pp0_iter2;
reg   [0:0] ap_reg_ppstg_tmp_mid2_29_reg_405_pp0_iter3;
reg   [0:0] ap_reg_ppstg_tmp_mid2_29_reg_405_pp0_iter4;
reg   [0:0] ap_reg_ppstg_tmp_mid2_29_reg_405_pp0_iter5;
reg   [0:0] ap_reg_ppstg_tmp_mid2_29_reg_405_pp0_iter6;
reg   [0:0] ap_reg_ppstg_tmp_mid2_29_reg_405_pp0_iter7;
reg   [0:0] ap_reg_ppstg_tmp_mid2_29_reg_405_pp0_iter8;
reg   [0:0] ap_reg_ppstg_tmp_mid2_29_reg_405_pp0_iter9;
reg   [0:0] ap_reg_ppstg_tmp_mid2_29_reg_405_pp0_iter10;
wire   [9:0] tmp_i_i_mid2_v_fu_260_p3;
reg   [9:0] tmp_i_i_mid2_v_reg_409;
wire   [7:0] Col_assign_mid2_fu_298_p3;
reg   [7:0] Col_assign_mid2_reg_416;
reg   [7:0] ap_reg_ppstg_Col_assign_mid2_reg_416_pp0_iter1;
reg   [7:0] ap_reg_ppstg_Col_assign_mid2_reg_416_pp0_iter2;
reg   [7:0] ap_reg_ppstg_Col_assign_mid2_reg_416_pp0_iter3;
wire   [4:0] tmp_139_mid2_fu_306_p3;
reg   [4:0] tmp_139_mid2_reg_422;
reg   [4:0] ap_reg_ppstg_tmp_139_mid2_reg_422_pp0_iter1;
reg   [4:0] ap_reg_ppstg_tmp_139_mid2_reg_422_pp0_iter2;
reg   [4:0] ap_reg_ppstg_tmp_139_mid2_reg_422_pp0_iter3;
wire   [7:0] c_fu_314_p2;
wire   [12:0] indvar_flatten_next_fu_326_p3;
reg   [11:0] C_addr_reg_459;
reg   [11:0] ap_reg_ppstg_C_addr_reg_459_pp0_iter5;
reg   [11:0] ap_reg_ppstg_C_addr_reg_459_pp0_iter6;
reg   [11:0] ap_reg_ppstg_C_addr_reg_459_pp0_iter7;
reg   [11:0] ap_reg_ppstg_C_addr_reg_459_pp0_iter8;
reg   [11:0] ap_reg_ppstg_C_addr_reg_459_pp0_iter9;
reg   [11:0] ap_reg_ppstg_C_addr_reg_459_pp0_iter10;
reg   [11:0] sum_mult_addr_reg_464;
reg   [11:0] ap_reg_ppstg_sum_mult_addr_reg_464_pp0_iter5;
reg   [11:0] ap_reg_ppstg_sum_mult_addr_reg_464_pp0_iter6;
reg   [11:0] ap_reg_ppstg_sum_mult_addr_reg_464_pp0_iter7;
reg   [11:0] ap_reg_ppstg_sum_mult_addr_reg_464_pp0_iter8;
reg   [11:0] ap_reg_ppstg_sum_mult_addr_reg_464_pp0_iter9;
reg   [11:0] ap_reg_ppstg_sum_mult_addr_reg_464_pp0_iter10;
wire   [31:0] grp_fu_182_p2;
reg   [31:0] mult_reg_470;
reg   [31:0] ap_reg_ppstg_mult_reg_470_pp0_iter6;
reg   [31:0] ap_reg_ppstg_mult_reg_470_pp0_iter7;
reg   [31:0] ap_reg_ppstg_mult_reg_470_pp0_iter8;
reg   [31:0] ap_reg_ppstg_mult_reg_470_pp0_iter9;
reg   [31:0] ap_reg_ppstg_mult_reg_470_pp0_iter10;
wire   [31:0] sum_mult_q0;
reg   [31:0] sum_mult_load_reg_476;
wire   [31:0] grp_fu_178_p2;
reg   [31:0] tmp_139_reg_481;
wire   [11:0] sum_mult_address0;
reg    sum_mult_ce0;
reg    sum_mult_ce1;
reg    sum_mult_we1;
reg   [31:0] sum_mult_d1;
reg   [9:0] Col_assign_3_phi_fu_138_p4;
reg   [4:0] Row_assign_phi_fu_160_p4;
wire  signed [63:0] tmp_184_cast_fu_343_p1;
wire   [63:0] tmp_186_cast_fu_350_p1;
wire  signed [63:0] tmp_187_cast_fu_360_p1;
wire   [0:0] exitcond_flatten_fu_206_p2;
wire   [9:0] k_fu_200_p2;
wire   [0:0] tmp_mid1_fu_220_p2;
wire   [0:0] tmp2_fu_226_p2;
wire   [0:0] tmp_mid1_28_fu_240_p2;
wire   [0:0] tmp_1_fu_246_p2;
wire   [0:0] exitcond_fu_274_p2;
wire   [0:0] not_exitcond_flatten_fu_268_p2;
wire   [4:0] Row_assign_mid_fu_212_p3;
wire   [0:0] exitcond_mid_fu_280_p2;
wire   [0:0] tmp_165_fu_292_p2;
wire   [4:0] r_fu_286_p2;
wire   [12:0] indvar_flatten_op_fu_320_p2;
wire   [14:0] grp_fu_383_p3;
wire   [17:0] grp_fu_374_p3;
wire   [12:0] grp_fu_365_p3;
wire   [4:0] grp_fu_365_p0;
wire   [8:0] grp_fu_365_p1;
wire   [7:0] grp_fu_365_p2;
wire   [9:0] grp_fu_374_p0;
wire   [8:0] grp_fu_374_p1;
wire   [7:0] grp_fu_374_p2;
wire   [4:0] grp_fu_383_p0;
wire   [10:0] grp_fu_383_p1;
wire   [9:0] grp_fu_383_p2;
reg    ap_sig_cseq_ST_st14_fsm_2;
reg    ap_sig_402;
reg   [2:0] ap_NS_fsm;
wire   [12:0] grp_fu_365_p00;
wire   [12:0] grp_fu_365_p20;
wire   [17:0] grp_fu_374_p00;
wire   [17:0] grp_fu_374_p20;
wire   [14:0] grp_fu_383_p00;
wire   [14:0] grp_fu_383_p20;
reg    ap_sig_239;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'b1;
#0 ap_reg_ppiten_pp0_it0 = 1'b0;
#0 ap_reg_ppiten_pp0_it1 = 1'b0;
#0 ap_reg_ppiten_pp0_it2 = 1'b0;
#0 ap_reg_ppiten_pp0_it3 = 1'b0;
#0 ap_reg_ppiten_pp0_it4 = 1'b0;
#0 ap_reg_ppiten_pp0_it5 = 1'b0;
#0 ap_reg_ppiten_pp0_it6 = 1'b0;
#0 ap_reg_ppiten_pp0_it7 = 1'b0;
#0 ap_reg_ppiten_pp0_it8 = 1'b0;
#0 ap_reg_ppiten_pp0_it9 = 1'b0;
#0 ap_reg_ppiten_pp0_it10 = 1'b0;
#0 ap_reg_ppiten_pp0_it11 = 1'b0;
end

dut_matrix_multiply_alt2_sum_mult #(
    .DataWidth( 32 ),
    .AddressRange( 4000 ),
    .AddressWidth( 12 ))
sum_mult_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(sum_mult_address0),
    .ce0(sum_mult_ce0),
    .q0(sum_mult_q0),
    .address1(ap_reg_ppstg_sum_mult_addr_reg_464_pp0_iter10),
    .ce1(sum_mult_ce1),
    .we1(sum_mult_we1),
    .d1(sum_mult_d1)
);

dut_fadd_32ns_32ns_32_5_full_dsp #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dut_fadd_32ns_32ns_32_5_full_dsp_U48(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(sum_mult_load_reg_476),
    .din1(mult_reg_470),
    .ce(1'b1),
    .dout(grp_fu_178_p2)
);

dut_fmul_32ns_32ns_32_4_max_dsp #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dut_fmul_32ns_32ns_32_4_max_dsp_U49(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(A_q0),
    .din1(B_q0),
    .ce(1'b1),
    .dout(grp_fu_182_p2)
);

dut_mac_muladd_5ns_9ns_8ns_13_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 5 ),
    .din1_WIDTH( 9 ),
    .din2_WIDTH( 8 ),
    .dout_WIDTH( 13 ))
dut_mac_muladd_5ns_9ns_8ns_13_1_U50(
    .din0(grp_fu_365_p0),
    .din1(grp_fu_365_p1),
    .din2(grp_fu_365_p2),
    .dout(grp_fu_365_p3)
);

dut_mac_muladd_10ns_9ns_8ns_18_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 9 ),
    .din2_WIDTH( 8 ),
    .dout_WIDTH( 18 ))
dut_mac_muladd_10ns_9ns_8ns_18_1_U51(
    .din0(grp_fu_374_p0),
    .din1(grp_fu_374_p1),
    .din2(grp_fu_374_p2),
    .dout(grp_fu_374_p3)
);

dut_mac_muladd_5ns_11ns_10ns_15_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 5 ),
    .din1_WIDTH( 11 ),
    .din2_WIDTH( 10 ),
    .dout_WIDTH( 15 ))
dut_mac_muladd_5ns_11ns_10ns_15_1_U52(
    .din0(grp_fu_383_p0),
    .din1(grp_fu_383_p1),
    .din2(grp_fu_383_p2),
    .dout(grp_fu_383_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & ~(exitcond_flatten4_fu_188_p2 == 1'b0))) begin
            ap_reg_ppiten_pp0_it0 <= 1'b0;
        end else if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == 1'b0))) begin
            ap_reg_ppiten_pp0_it0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (exitcond_flatten4_fu_188_p2 == 1'b0))) begin
            ap_reg_ppiten_pp0_it1 <= 1'b1;
        end else if ((((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == 1'b0)) | ((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & ~(exitcond_flatten4_fu_188_p2 == 1'b0)))) begin
            ap_reg_ppiten_pp0_it1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it10 <= 1'b0;
    end else begin
        ap_reg_ppiten_pp0_it10 <= ap_reg_ppiten_pp0_it9;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it11 <= 1'b0;
    end else begin
        ap_reg_ppiten_pp0_it11 <= ap_reg_ppiten_pp0_it10;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it2 <= 1'b0;
    end else begin
        ap_reg_ppiten_pp0_it2 <= ap_reg_ppiten_pp0_it1;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it3 <= 1'b0;
    end else begin
        ap_reg_ppiten_pp0_it3 <= ap_reg_ppiten_pp0_it2;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it4 <= 1'b0;
    end else begin
        ap_reg_ppiten_pp0_it4 <= ap_reg_ppiten_pp0_it3;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it5 <= 1'b0;
    end else begin
        ap_reg_ppiten_pp0_it5 <= ap_reg_ppiten_pp0_it4;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it6 <= 1'b0;
    end else begin
        ap_reg_ppiten_pp0_it6 <= ap_reg_ppiten_pp0_it5;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it7 <= 1'b0;
    end else begin
        ap_reg_ppiten_pp0_it7 <= ap_reg_ppiten_pp0_it6;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it8 <= 1'b0;
    end else begin
        ap_reg_ppiten_pp0_it8 <= ap_reg_ppiten_pp0_it7;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it9 <= 1'b0;
    end else begin
        ap_reg_ppiten_pp0_it9 <= ap_reg_ppiten_pp0_it8;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (1'b1 == ap_reg_ppiten_pp0_it1) & (exitcond_flatten4_reg_392 == 1'b0))) begin
        Col_assign_3_reg_134 <= tmp_i_i_mid2_v_reg_409;
    end else if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == 1'b0))) begin
        Col_assign_3_reg_134 <= ap_const_lv10_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (1'b1 == ap_reg_ppiten_pp0_it0) & (exitcond_flatten4_fu_188_p2 == 1'b0))) begin
        Col_assign_reg_167 <= c_fu_314_p2;
    end else if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == 1'b0))) begin
        Col_assign_reg_167 <= ap_const_lv8_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (1'b1 == ap_reg_ppiten_pp0_it1) & (exitcond_flatten4_reg_392 == 1'b0))) begin
        Row_assign_reg_156 <= tmp_139_mid2_reg_422;
    end else if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == 1'b0))) begin
        Row_assign_reg_156 <= ap_const_lv5_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (1'b1 == ap_reg_ppiten_pp0_it0) & (exitcond_flatten4_fu_188_p2 == 1'b0))) begin
        indvar_flatten4_reg_123 <= indvar_flatten_next4_fu_194_p2;
    end else if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == 1'b0))) begin
        indvar_flatten4_reg_123 <= ap_const_lv22_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (1'b1 == ap_reg_ppiten_pp0_it0) & (exitcond_flatten4_fu_188_p2 == 1'b0))) begin
        indvar_flatten_reg_145 <= indvar_flatten_next_fu_326_p3;
    end else if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == 1'b0))) begin
        indvar_flatten_reg_145 <= ap_const_lv13_0;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_reg_ppstg_exitcond_flatten4_reg_392_pp0_iter3 == 1'b0)) begin
        C_addr_reg_459 <= tmp_187_cast_fu_360_p1;
        sum_mult_addr_reg_464 <= tmp_187_cast_fu_360_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (exitcond_flatten4_fu_188_p2 == 1'b0))) begin
        Col_assign_mid2_reg_416 <= Col_assign_mid2_fu_298_p3;
        tmp_mid2_29_reg_405 <= tmp_mid2_29_fu_252_p3;
        tmp_mid2_reg_401 <= tmp_mid2_fu_232_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == 1'b1)) begin
        ap_reg_ppstg_C_addr_reg_459_pp0_iter10 <= ap_reg_ppstg_C_addr_reg_459_pp0_iter9;
        ap_reg_ppstg_C_addr_reg_459_pp0_iter5 <= C_addr_reg_459;
        ap_reg_ppstg_C_addr_reg_459_pp0_iter6 <= ap_reg_ppstg_C_addr_reg_459_pp0_iter5;
        ap_reg_ppstg_C_addr_reg_459_pp0_iter7 <= ap_reg_ppstg_C_addr_reg_459_pp0_iter6;
        ap_reg_ppstg_C_addr_reg_459_pp0_iter8 <= ap_reg_ppstg_C_addr_reg_459_pp0_iter7;
        ap_reg_ppstg_C_addr_reg_459_pp0_iter9 <= ap_reg_ppstg_C_addr_reg_459_pp0_iter8;
        ap_reg_ppstg_Col_assign_mid2_reg_416_pp0_iter2 <= ap_reg_ppstg_Col_assign_mid2_reg_416_pp0_iter1;
        ap_reg_ppstg_Col_assign_mid2_reg_416_pp0_iter3 <= ap_reg_ppstg_Col_assign_mid2_reg_416_pp0_iter2;
        ap_reg_ppstg_exitcond_flatten4_reg_392_pp0_iter2 <= ap_reg_ppstg_exitcond_flatten4_reg_392_pp0_iter1;
        ap_reg_ppstg_exitcond_flatten4_reg_392_pp0_iter3 <= ap_reg_ppstg_exitcond_flatten4_reg_392_pp0_iter2;
        ap_reg_ppstg_exitcond_flatten4_reg_392_pp0_iter4 <= ap_reg_ppstg_exitcond_flatten4_reg_392_pp0_iter3;
        ap_reg_ppstg_mult_reg_470_pp0_iter10 <= ap_reg_ppstg_mult_reg_470_pp0_iter9;
        ap_reg_ppstg_mult_reg_470_pp0_iter6 <= mult_reg_470;
        ap_reg_ppstg_mult_reg_470_pp0_iter7 <= ap_reg_ppstg_mult_reg_470_pp0_iter6;
        ap_reg_ppstg_mult_reg_470_pp0_iter8 <= ap_reg_ppstg_mult_reg_470_pp0_iter7;
        ap_reg_ppstg_mult_reg_470_pp0_iter9 <= ap_reg_ppstg_mult_reg_470_pp0_iter8;
        ap_reg_ppstg_sum_mult_addr_reg_464_pp0_iter10 <= ap_reg_ppstg_sum_mult_addr_reg_464_pp0_iter9;
        ap_reg_ppstg_sum_mult_addr_reg_464_pp0_iter5 <= sum_mult_addr_reg_464;
        ap_reg_ppstg_sum_mult_addr_reg_464_pp0_iter6 <= ap_reg_ppstg_sum_mult_addr_reg_464_pp0_iter5;
        ap_reg_ppstg_sum_mult_addr_reg_464_pp0_iter7 <= ap_reg_ppstg_sum_mult_addr_reg_464_pp0_iter6;
        ap_reg_ppstg_sum_mult_addr_reg_464_pp0_iter8 <= ap_reg_ppstg_sum_mult_addr_reg_464_pp0_iter7;
        ap_reg_ppstg_sum_mult_addr_reg_464_pp0_iter9 <= ap_reg_ppstg_sum_mult_addr_reg_464_pp0_iter8;
        ap_reg_ppstg_tmp_139_mid2_reg_422_pp0_iter2 <= ap_reg_ppstg_tmp_139_mid2_reg_422_pp0_iter1;
        ap_reg_ppstg_tmp_139_mid2_reg_422_pp0_iter3 <= ap_reg_ppstg_tmp_139_mid2_reg_422_pp0_iter2;
        ap_reg_ppstg_tmp_mid2_29_reg_405_pp0_iter10 <= ap_reg_ppstg_tmp_mid2_29_reg_405_pp0_iter9;
        ap_reg_ppstg_tmp_mid2_29_reg_405_pp0_iter2 <= ap_reg_ppstg_tmp_mid2_29_reg_405_pp0_iter1;
        ap_reg_ppstg_tmp_mid2_29_reg_405_pp0_iter3 <= ap_reg_ppstg_tmp_mid2_29_reg_405_pp0_iter2;
        ap_reg_ppstg_tmp_mid2_29_reg_405_pp0_iter4 <= ap_reg_ppstg_tmp_mid2_29_reg_405_pp0_iter3;
        ap_reg_ppstg_tmp_mid2_29_reg_405_pp0_iter5 <= ap_reg_ppstg_tmp_mid2_29_reg_405_pp0_iter4;
        ap_reg_ppstg_tmp_mid2_29_reg_405_pp0_iter6 <= ap_reg_ppstg_tmp_mid2_29_reg_405_pp0_iter5;
        ap_reg_ppstg_tmp_mid2_29_reg_405_pp0_iter7 <= ap_reg_ppstg_tmp_mid2_29_reg_405_pp0_iter6;
        ap_reg_ppstg_tmp_mid2_29_reg_405_pp0_iter8 <= ap_reg_ppstg_tmp_mid2_29_reg_405_pp0_iter7;
        ap_reg_ppstg_tmp_mid2_29_reg_405_pp0_iter9 <= ap_reg_ppstg_tmp_mid2_29_reg_405_pp0_iter8;
        ap_reg_ppstg_tmp_mid2_reg_401_pp0_iter10 <= ap_reg_ppstg_tmp_mid2_reg_401_pp0_iter9;
        ap_reg_ppstg_tmp_mid2_reg_401_pp0_iter2 <= ap_reg_ppstg_tmp_mid2_reg_401_pp0_iter1;
        ap_reg_ppstg_tmp_mid2_reg_401_pp0_iter3 <= ap_reg_ppstg_tmp_mid2_reg_401_pp0_iter2;
        ap_reg_ppstg_tmp_mid2_reg_401_pp0_iter4 <= ap_reg_ppstg_tmp_mid2_reg_401_pp0_iter3;
        ap_reg_ppstg_tmp_mid2_reg_401_pp0_iter5 <= ap_reg_ppstg_tmp_mid2_reg_401_pp0_iter4;
        ap_reg_ppstg_tmp_mid2_reg_401_pp0_iter6 <= ap_reg_ppstg_tmp_mid2_reg_401_pp0_iter5;
        ap_reg_ppstg_tmp_mid2_reg_401_pp0_iter7 <= ap_reg_ppstg_tmp_mid2_reg_401_pp0_iter6;
        ap_reg_ppstg_tmp_mid2_reg_401_pp0_iter8 <= ap_reg_ppstg_tmp_mid2_reg_401_pp0_iter7;
        ap_reg_ppstg_tmp_mid2_reg_401_pp0_iter9 <= ap_reg_ppstg_tmp_mid2_reg_401_pp0_iter8;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_1)) begin
        ap_reg_ppstg_Col_assign_mid2_reg_416_pp0_iter1 <= Col_assign_mid2_reg_416;
        ap_reg_ppstg_exitcond_flatten4_reg_392_pp0_iter1 <= exitcond_flatten4_reg_392;
        ap_reg_ppstg_tmp_139_mid2_reg_422_pp0_iter1 <= tmp_139_mid2_reg_422;
        ap_reg_ppstg_tmp_mid2_29_reg_405_pp0_iter1 <= tmp_mid2_29_reg_405;
        ap_reg_ppstg_tmp_mid2_reg_401_pp0_iter1 <= tmp_mid2_reg_401;
        exitcond_flatten4_reg_392 <= exitcond_flatten4_fu_188_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_reg_ppstg_exitcond_flatten4_reg_392_pp0_iter4 == 1'b0)) begin
        mult_reg_470 <= grp_fu_182_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_reg_ppiten_pp0_it5) & (ap_reg_ppstg_exitcond_flatten4_reg_392_pp0_iter4 == 1'b0))) begin
        sum_mult_load_reg_476 <= sum_mult_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (1'b1 == ap_reg_ppiten_pp0_it0) & (exitcond_flatten4_fu_188_p2 == 1'b0))) begin
        tmp_139_mid2_reg_422 <= tmp_139_mid2_fu_306_p3;
        tmp_i_i_mid2_v_reg_409 <= tmp_i_i_mid2_v_fu_260_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_reg_ppstg_tmp_mid2_reg_401_pp0_iter9)) begin
        tmp_139_reg_481 <= grp_fu_178_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (1'b1 == ap_reg_ppiten_pp0_it1))) begin
        A_ce0 = 1'b1;
    end else begin
        A_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (1'b1 == ap_reg_ppiten_pp0_it1))) begin
        B_ce0 = 1'b1;
    end else begin
        B_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_reg_ppiten_pp0_it11)) begin
        C_ce0 = 1'b1;
    end else begin
        C_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_reg_ppiten_pp0_it11) & (1'b0 == ap_reg_ppstg_tmp_mid2_reg_401_pp0_iter10) & ~(1'b0 == ap_reg_ppstg_tmp_mid2_29_reg_405_pp0_iter10))) begin
        C_we0 = 1'b1;
    end else begin
        C_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (1'b1 == ap_reg_ppiten_pp0_it1) & (exitcond_flatten4_reg_392 == 1'b0))) begin
        Col_assign_3_phi_fu_138_p4 = tmp_i_i_mid2_v_reg_409;
    end else begin
        Col_assign_3_phi_fu_138_p4 = Col_assign_3_reg_134;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (1'b1 == ap_reg_ppiten_pp0_it1) & (exitcond_flatten4_reg_392 == 1'b0))) begin
        Row_assign_phi_fu_160_p4 = tmp_139_mid2_reg_422;
    end else begin
        Row_assign_phi_fu_160_p4 = Row_assign_reg_156;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_sig_cseq_ST_st1_fsm_0)) | (1'b1 == ap_sig_cseq_ST_st14_fsm_2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st14_fsm_2)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_61) begin
        ap_sig_cseq_ST_pp0_stg0_fsm_1 = 1'b1;
    end else begin
        ap_sig_cseq_ST_pp0_stg0_fsm_1 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_402) begin
        ap_sig_cseq_ST_st14_fsm_2 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st14_fsm_2 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_20) begin
        ap_sig_cseq_ST_st1_fsm_0 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_reg_ppiten_pp0_it4)) begin
        sum_mult_ce0 = 1'b1;
    end else begin
        sum_mult_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_reg_ppiten_pp0_it11) & (1'b0 == ap_reg_ppstg_tmp_mid2_reg_401_pp0_iter10) & (1'b0 == ap_reg_ppstg_tmp_mid2_29_reg_405_pp0_iter10)) | ((1'b1 == ap_reg_ppiten_pp0_it11) & ~(1'b0 == ap_reg_ppstg_tmp_mid2_reg_401_pp0_iter10)))) begin
        sum_mult_ce1 = 1'b1;
    end else begin
        sum_mult_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_reg_ppiten_pp0_it11)) begin
        if (~(1'b0 == ap_reg_ppstg_tmp_mid2_reg_401_pp0_iter10)) begin
            sum_mult_d1 = ap_reg_ppstg_mult_reg_470_pp0_iter10;
        end else if (ap_sig_239) begin
            sum_mult_d1 = tmp_139_reg_481;
        end else begin
            sum_mult_d1 = 'bx;
        end
    end else begin
        sum_mult_d1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_reg_ppiten_pp0_it11) & (1'b0 == ap_reg_ppstg_tmp_mid2_reg_401_pp0_iter10) & (1'b0 == ap_reg_ppstg_tmp_mid2_29_reg_405_pp0_iter10)) | ((1'b1 == ap_reg_ppiten_pp0_it11) & ~(1'b0 == ap_reg_ppstg_tmp_mid2_reg_401_pp0_iter10)))) begin
        sum_mult_we1 = 1'b1;
    end else begin
        sum_mult_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : begin
            if (~(ap_start == 1'b0)) begin
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_pp0_stg0_fsm_1 : begin
            if ((~((1'b1 == ap_reg_ppiten_pp0_it11) & ~(1'b1 == ap_reg_ppiten_pp0_it10)) & ~((1'b1 == ap_reg_ppiten_pp0_it0) & ~(exitcond_flatten4_fu_188_p2 == 1'b0) & ~(1'b1 == ap_reg_ppiten_pp0_it1)))) begin
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_1;
            end else if (((1'b1 == ap_reg_ppiten_pp0_it0) & ~(exitcond_flatten4_fu_188_p2 == 1'b0) & ~(1'b1 == ap_reg_ppiten_pp0_it1))) begin
                ap_NS_fsm = ap_ST_st14_fsm_2;
            end else begin
                ap_NS_fsm = ap_ST_st14_fsm_2;
            end
        end
        ap_ST_st14_fsm_2 : begin
            ap_NS_fsm = ap_ST_st1_fsm_0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign A_address0 = tmp_184_cast_fu_343_p1;

assign B_address0 = tmp_186_cast_fu_350_p1;

assign C_address0 = ap_reg_ppstg_C_addr_reg_459_pp0_iter10;

assign C_d0 = tmp_139_reg_481;

assign Col_assign_mid2_fu_298_p3 = ((tmp_165_fu_292_p2[0:0] === 1'b1) ? ap_const_lv8_0 : Col_assign_reg_167);

assign Row_assign_mid_fu_212_p3 = ((exitcond_flatten_fu_206_p2[0:0] === 1'b1) ? ap_const_lv5_0 : Row_assign_phi_fu_160_p4);

always @ (*) begin
    ap_sig_20 = (ap_CS_fsm[ap_const_lv32_0] == 1'b1);
end

always @ (*) begin
    ap_sig_239 = ((1'b0 == ap_reg_ppstg_tmp_mid2_reg_401_pp0_iter10) & (1'b0 == ap_reg_ppstg_tmp_mid2_29_reg_405_pp0_iter10));
end

always @ (*) begin
    ap_sig_402 = (1'b1 == ap_CS_fsm[ap_const_lv32_2]);
end

always @ (*) begin
    ap_sig_61 = (1'b1 == ap_CS_fsm[ap_const_lv32_1]);
end

assign c_fu_314_p2 = (Col_assign_mid2_fu_298_p3 + ap_const_lv8_1);

assign exitcond_flatten4_fu_188_p2 = ((indvar_flatten4_reg_123 == ap_const_lv22_2FDA00) ? 1'b1 : 1'b0);

assign exitcond_flatten_fu_206_p2 = ((indvar_flatten_reg_145 == ap_const_lv13_FA0) ? 1'b1 : 1'b0);

assign exitcond_fu_274_p2 = ((Col_assign_reg_167 == ap_const_lv8_C8) ? 1'b1 : 1'b0);

assign exitcond_mid_fu_280_p2 = (exitcond_fu_274_p2 & not_exitcond_flatten_fu_268_p2);

assign grp_fu_365_p0 = grp_fu_365_p00;

assign grp_fu_365_p00 = ap_reg_ppstg_tmp_139_mid2_reg_422_pp0_iter3;

assign grp_fu_365_p1 = ap_const_lv13_C8;

assign grp_fu_365_p2 = grp_fu_365_p20;

assign grp_fu_365_p20 = ap_reg_ppstg_Col_assign_mid2_reg_416_pp0_iter3;

assign grp_fu_374_p0 = grp_fu_374_p00;

assign grp_fu_374_p00 = tmp_i_i_mid2_v_reg_409;

assign grp_fu_374_p1 = ap_const_lv18_C8;

assign grp_fu_374_p2 = grp_fu_374_p20;

assign grp_fu_374_p20 = Col_assign_mid2_reg_416;

assign grp_fu_383_p0 = grp_fu_383_p00;

assign grp_fu_383_p00 = tmp_139_mid2_reg_422;

assign grp_fu_383_p1 = ap_const_lv15_310;

assign grp_fu_383_p2 = grp_fu_383_p20;

assign grp_fu_383_p20 = tmp_i_i_mid2_v_reg_409;

assign indvar_flatten_next4_fu_194_p2 = (indvar_flatten4_reg_123 + ap_const_lv22_1);

assign indvar_flatten_next_fu_326_p3 = ((exitcond_flatten_fu_206_p2[0:0] === 1'b1) ? ap_const_lv13_1 : indvar_flatten_op_fu_320_p2);

assign indvar_flatten_op_fu_320_p2 = (indvar_flatten_reg_145 + ap_const_lv13_1);

assign k_fu_200_p2 = (Col_assign_3_phi_fu_138_p4 + ap_const_lv10_1);

assign not_exitcond_flatten_fu_268_p2 = (exitcond_flatten_fu_206_p2 ^ 1'b1);

assign r_fu_286_p2 = (Row_assign_mid_fu_212_p3 + ap_const_lv5_1);

assign sum_mult_address0 = tmp_187_cast_fu_360_p1;

assign tmp2_fu_226_p2 = ((Col_assign_3_phi_fu_138_p4 == ap_const_lv10_0) ? 1'b1 : 1'b0);

assign tmp_139_mid2_fu_306_p3 = ((exitcond_mid_fu_280_p2[0:0] === 1'b1) ? r_fu_286_p2 : Row_assign_mid_fu_212_p3);

assign tmp_165_fu_292_p2 = (exitcond_mid_fu_280_p2 | exitcond_flatten_fu_206_p2);

assign tmp_184_cast_fu_343_p1 = $signed(grp_fu_383_p3);

assign tmp_186_cast_fu_350_p1 = grp_fu_374_p3;

assign tmp_187_cast_fu_360_p1 = $signed(grp_fu_365_p3);

assign tmp_1_fu_246_p2 = ((Col_assign_3_phi_fu_138_p4 == ap_const_lv10_30F) ? 1'b1 : 1'b0);

assign tmp_i_i_mid2_v_fu_260_p3 = ((exitcond_flatten_fu_206_p2[0:0] === 1'b1) ? k_fu_200_p2 : Col_assign_3_phi_fu_138_p4);

assign tmp_mid1_28_fu_240_p2 = ((k_fu_200_p2 == ap_const_lv10_30F) ? 1'b1 : 1'b0);

assign tmp_mid1_fu_220_p2 = ((k_fu_200_p2 == ap_const_lv10_0) ? 1'b1 : 1'b0);

assign tmp_mid2_29_fu_252_p3 = ((exitcond_flatten_fu_206_p2[0:0] === 1'b1) ? tmp_mid1_28_fu_240_p2 : tmp_1_fu_246_p2);

assign tmp_mid2_fu_232_p3 = ((exitcond_flatten_fu_206_p2[0:0] === 1'b1) ? tmp_mid1_fu_220_p2 : tmp2_fu_226_p2);

endmodule //dut_matrix_multiply_alt2
