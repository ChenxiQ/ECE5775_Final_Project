// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.2
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module dut_matrix_multiply_alt2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        A_address0,
        A_ce0,
        A_q0,
        B_address0,
        B_ce0,
        B_q0,
        C_address0,
        C_ce0,
        C_we0,
        C_d0
);

parameter    ap_ST_st1_fsm_0 = 15'b1;
parameter    ap_ST_st2_fsm_1 = 15'b10;
parameter    ap_ST_st3_fsm_2 = 15'b100;
parameter    ap_ST_st4_fsm_3 = 15'b1000;
parameter    ap_ST_st5_fsm_4 = 15'b10000;
parameter    ap_ST_st6_fsm_5 = 15'b100000;
parameter    ap_ST_st7_fsm_6 = 15'b1000000;
parameter    ap_ST_st8_fsm_7 = 15'b10000000;
parameter    ap_ST_st9_fsm_8 = 15'b100000000;
parameter    ap_ST_st10_fsm_9 = 15'b1000000000;
parameter    ap_ST_st11_fsm_10 = 15'b10000000000;
parameter    ap_ST_st12_fsm_11 = 15'b100000000000;
parameter    ap_ST_st13_fsm_12 = 15'b1000000000000;
parameter    ap_ST_st14_fsm_13 = 15'b10000000000000;
parameter    ap_ST_st15_fsm_14 = 15'b100000000000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv32_5 = 32'b101;
parameter    ap_const_lv32_7 = 32'b111;
parameter    ap_const_lv32_C = 32'b1100;
parameter    ap_const_lv32_D = 32'b1101;
parameter    ap_const_lv20_0 = 20'b00000000000000000000;
parameter    ap_const_lv10_0 = 10'b0000000000;
parameter    ap_const_lv11_0 = 11'b00000000000;
parameter    ap_const_lv4_0 = 4'b0000;
parameter    ap_const_lv7_0 = 7'b0000000;
parameter    ap_const_lv32_8 = 32'b1000;
parameter    ap_const_lv20_BF680 = 20'b10111111011010000000;
parameter    ap_const_lv20_1 = 20'b1;
parameter    ap_const_lv11_3E8 = 11'b1111101000;
parameter    ap_const_lv7_64 = 7'b1100100;
parameter    ap_const_lv4_1 = 4'b1;
parameter    ap_const_lv10_1 = 10'b1;
parameter    ap_const_lv10_30F = 10'b1100001111;
parameter    ap_const_lv7_1 = 7'b1;
parameter    ap_const_lv11_1 = 11'b1;
parameter    ap_const_lv11_64 = 11'b1100100;
parameter    ap_const_lv17_64 = 17'b1100100;
parameter    ap_const_lv14_310 = 14'b1100010000;
parameter    ap_const_lv32_E = 32'b1110;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [12:0] A_address0;
output   A_ce0;
input  [31:0] A_q0;
output  [16:0] B_address0;
output   B_ce0;
input  [31:0] B_q0;
output  [9:0] C_address0;
output   C_ce0;
output   C_we0;
output  [31:0] C_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg A_ce0;
reg B_ce0;
reg C_ce0;
reg C_we0;

(* fsm_encoding = "none" *) reg   [14:0] ap_CS_fsm;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_32;
wire   [0:0] exitcond_flatten2_fu_190_p2;
reg   [0:0] exitcond_flatten2_reg_389;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_63;
wire   [19:0] indvar_flatten_next2_fu_196_p2;
reg   [19:0] indvar_flatten_next2_reg_393;
wire   [0:0] exitcond_flatten_fu_202_p2;
reg   [0:0] exitcond_flatten_reg_398;
wire   [6:0] Col_assign_mid2_fu_246_p3;
reg   [6:0] Col_assign_mid2_reg_406;
wire   [3:0] tmp_40_mid2_fu_254_p3;
reg   [3:0] tmp_40_mid2_reg_413;
wire   [0:0] tmp_mid2_fu_280_p3;
reg   [0:0] tmp_mid2_reg_420;
reg    ap_sig_cseq_ST_st3_fsm_2;
reg    ap_sig_83;
wire   [0:0] tmp_mid2_24_fu_299_p3;
reg   [0:0] tmp_mid2_24_reg_424;
wire   [9:0] tmp_i_i_mid2_v_fu_306_p3;
reg   [9:0] tmp_i_i_mid2_v_reg_428;
wire   [13:0] grp_fu_381_p3;
reg   [13:0] tmp_55_reg_434;
reg    ap_sig_cseq_ST_st4_fsm_3;
reg    ap_sig_98;
reg    ap_sig_cseq_ST_st5_fsm_4;
reg    ap_sig_108;
reg   [9:0] C_addr_reg_454;
reg   [9:0] sum_mult_addr_reg_459;
wire   [31:0] sum_mult_q0;
reg   [31:0] sum_mult_load_reg_469;
reg    ap_sig_cseq_ST_st6_fsm_5;
reg    ap_sig_122;
wire   [31:0] grp_fu_183_p2;
reg   [31:0] mult_reg_474;
reg    ap_sig_cseq_ST_st8_fsm_7;
reg    ap_sig_131;
wire   [31:0] grp_fu_179_p2;
reg   [31:0] tmp_42_reg_479;
reg    ap_sig_cseq_ST_st13_fsm_12;
reg    ap_sig_140;
wire   [6:0] c_fu_345_p2;
reg    ap_sig_cseq_ST_st14_fsm_13;
reg    ap_sig_153;
wire   [10:0] indvar_flatten_next_fu_356_p3;
reg   [9:0] sum_mult_address0;
reg    sum_mult_ce0;
reg    sum_mult_we0;
reg   [31:0] sum_mult_d0;
reg   [19:0] indvar_flatten2_reg_122;
reg   [9:0] Col_assign_3_reg_133;
reg   [10:0] indvar_flatten_reg_145;
reg   [3:0] Row_assign_reg_157;
reg   [6:0] Col_assign_reg_168;
wire  signed [63:0] tmp_62_cast_fu_323_p1;
wire   [63:0] tmp_64_cast_fu_330_p1;
wire  signed [63:0] tmp_65_cast_fu_340_p1;
reg    ap_sig_cseq_ST_st9_fsm_8;
reg    ap_sig_208;
wire   [0:0] exitcond_fu_222_p2;
wire   [0:0] not_exitcond_flatten_fu_216_p2;
wire   [3:0] Row_assign_mid_fu_208_p3;
wire   [0:0] exitcond_mid_fu_228_p2;
wire   [0:0] tmp_53_fu_240_p2;
wire   [3:0] r_fu_234_p2;
wire   [9:0] k_fu_262_p2;
wire   [0:0] tmp_mid1_fu_268_p2;
wire   [0:0] tmp2_fu_274_p2;
wire   [0:0] tmp_mid1_23_fu_287_p2;
wire   [0:0] tmp_1_fu_293_p2;
wire   [16:0] grp_fu_372_p3;
wire   [10:0] grp_fu_363_p3;
wire   [10:0] indvar_flatten_op_fu_350_p2;
wire   [3:0] grp_fu_363_p0;
wire   [7:0] grp_fu_363_p1;
wire   [6:0] grp_fu_363_p2;
wire   [9:0] grp_fu_372_p0;
wire   [7:0] grp_fu_372_p1;
wire   [6:0] grp_fu_372_p2;
wire   [3:0] grp_fu_381_p0;
wire   [10:0] grp_fu_381_p1;
wire   [9:0] grp_fu_381_p2;
reg    ap_sig_cseq_ST_st15_fsm_14;
reg    ap_sig_365;
reg   [14:0] ap_NS_fsm;
wire   [10:0] grp_fu_363_p00;
wire   [10:0] grp_fu_363_p20;
wire   [16:0] grp_fu_372_p00;
wire   [16:0] grp_fu_372_p20;
wire   [13:0] grp_fu_381_p00;
wire   [13:0] grp_fu_381_p20;

// power-on initialization
initial begin
#0 ap_CS_fsm = 15'b1;
end

dut_matrix_multiply_alt2_sum_mult #(
    .DataWidth( 32 ),
    .AddressRange( 1000 ),
    .AddressWidth( 10 ))
sum_mult_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(sum_mult_address0),
    .ce0(sum_mult_ce0),
    .we0(sum_mult_we0),
    .d0(sum_mult_d0),
    .q0(sum_mult_q0)
);

dut_fadd_32ns_32ns_32_5_full_dsp #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dut_fadd_32ns_32ns_32_5_full_dsp_U47(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(sum_mult_load_reg_469),
    .din1(mult_reg_474),
    .ce(1'b1),
    .dout(grp_fu_179_p2)
);

dut_fmul_32ns_32ns_32_4_max_dsp #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dut_fmul_32ns_32ns_32_4_max_dsp_U48(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(A_q0),
    .din1(B_q0),
    .ce(1'b1),
    .dout(grp_fu_183_p2)
);

dut_mac_muladd_4ns_8ns_7ns_11_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 4 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 7 ),
    .dout_WIDTH( 11 ))
dut_mac_muladd_4ns_8ns_7ns_11_1_U49(
    .din0(grp_fu_363_p0),
    .din1(grp_fu_363_p1),
    .din2(grp_fu_363_p2),
    .dout(grp_fu_363_p3)
);

dut_mac_muladd_10ns_8ns_7ns_17_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 7 ),
    .dout_WIDTH( 17 ))
dut_mac_muladd_10ns_8ns_7ns_17_1_U50(
    .din0(grp_fu_372_p0),
    .din1(grp_fu_372_p1),
    .din2(grp_fu_372_p2),
    .dout(grp_fu_372_p3)
);

dut_mac_muladd_4ns_11ns_10ns_14_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 4 ),
    .din1_WIDTH( 11 ),
    .din2_WIDTH( 10 ),
    .dout_WIDTH( 14 ))
dut_mac_muladd_4ns_11ns_10ns_14_1_U51(
    .din0(grp_fu_381_p0),
    .din1(grp_fu_381_p1),
    .din2(grp_fu_381_p2),
    .dout(grp_fu_381_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten2_reg_389 == 1'b0) & (1'b1 == ap_sig_cseq_ST_st14_fsm_13))) begin
        Col_assign_3_reg_133 <= tmp_i_i_mid2_v_reg_428;
    end else if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == 1'b0))) begin
        Col_assign_3_reg_133 <= ap_const_lv10_0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten2_reg_389 == 1'b0) & (1'b1 == ap_sig_cseq_ST_st14_fsm_13))) begin
        Col_assign_reg_168 <= c_fu_345_p2;
    end else if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == 1'b0))) begin
        Col_assign_reg_168 <= ap_const_lv7_0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten2_reg_389 == 1'b0) & (1'b1 == ap_sig_cseq_ST_st14_fsm_13))) begin
        Row_assign_reg_157 <= tmp_40_mid2_reg_413;
    end else if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == 1'b0))) begin
        Row_assign_reg_157 <= ap_const_lv4_0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten2_reg_389 == 1'b0) & (1'b1 == ap_sig_cseq_ST_st14_fsm_13))) begin
        indvar_flatten2_reg_122 <= indvar_flatten_next2_reg_393;
    end else if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == 1'b0))) begin
        indvar_flatten2_reg_122 <= ap_const_lv20_0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten2_reg_389 == 1'b0) & (1'b1 == ap_sig_cseq_ST_st14_fsm_13))) begin
        indvar_flatten_reg_145 <= indvar_flatten_next_fu_356_p3;
    end else if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == 1'b0))) begin
        indvar_flatten_reg_145 <= ap_const_lv11_0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        C_addr_reg_454 <= tmp_65_cast_fu_340_p1;
        sum_mult_addr_reg_459 <= tmp_65_cast_fu_340_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond_flatten2_fu_190_p2 == 1'b0))) begin
        Col_assign_mid2_reg_406 <= Col_assign_mid2_fu_246_p3;
        exitcond_flatten_reg_398 <= exitcond_flatten_fu_202_p2;
        tmp_40_mid2_reg_413 <= tmp_40_mid2_fu_254_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        exitcond_flatten2_reg_389 <= exitcond_flatten2_fu_190_p2;
        indvar_flatten_next2_reg_393 <= indvar_flatten_next2_fu_196_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st8_fsm_7)) begin
        mult_reg_474 <= grp_fu_183_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st6_fsm_5)) begin
        sum_mult_load_reg_469 <= sum_mult_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st13_fsm_12) & (exitcond_flatten2_reg_389 == 1'b0) & (1'b0 == tmp_mid2_reg_420))) begin
        tmp_42_reg_479 <= grp_fu_179_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        tmp_55_reg_434 <= grp_fu_381_p3;
        tmp_i_i_mid2_v_reg_428 <= tmp_i_i_mid2_v_fu_306_p3;
        tmp_mid2_24_reg_424 <= tmp_mid2_24_fu_299_p3;
        tmp_mid2_reg_420 <= tmp_mid2_fu_280_p3;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        A_ce0 = 1'b1;
    end else begin
        A_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        B_ce0 = 1'b1;
    end else begin
        B_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st14_fsm_13)) begin
        C_ce0 = 1'b1;
    end else begin
        C_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_flatten2_reg_389 == 1'b0) & (1'b0 == tmp_mid2_reg_420) & (1'b1 == ap_sig_cseq_ST_st14_fsm_13) & ~(1'b0 == tmp_mid2_24_reg_424))) begin
        C_we0 = 1'b1;
    end else begin
        C_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_sig_cseq_ST_st1_fsm_0)) | (1'b1 == ap_sig_cseq_ST_st15_fsm_14))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st15_fsm_14)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_140) begin
        ap_sig_cseq_ST_st13_fsm_12 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st13_fsm_12 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_153) begin
        ap_sig_cseq_ST_st14_fsm_13 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st14_fsm_13 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_365) begin
        ap_sig_cseq_ST_st15_fsm_14 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st15_fsm_14 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_32) begin
        ap_sig_cseq_ST_st1_fsm_0 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_63) begin
        ap_sig_cseq_ST_st2_fsm_1 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_83) begin
        ap_sig_cseq_ST_st3_fsm_2 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st3_fsm_2 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_98) begin
        ap_sig_cseq_ST_st4_fsm_3 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st4_fsm_3 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_108) begin
        ap_sig_cseq_ST_st5_fsm_4 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st5_fsm_4 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_122) begin
        ap_sig_cseq_ST_st6_fsm_5 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st6_fsm_5 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_131) begin
        ap_sig_cseq_ST_st8_fsm_7 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st8_fsm_7 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_208) begin
        ap_sig_cseq_ST_st9_fsm_8 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st9_fsm_8 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st8_fsm_7) | (1'b1 == ap_sig_cseq_ST_st14_fsm_13))) begin
        sum_mult_address0 = sum_mult_addr_reg_459;
    end else if ((1'b1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        sum_mult_address0 = tmp_65_cast_fu_340_p1;
    end else begin
        sum_mult_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st5_fsm_4) | (1'b1 == ap_sig_cseq_ST_st8_fsm_7) | (1'b1 == ap_sig_cseq_ST_st14_fsm_13))) begin
        sum_mult_ce0 = 1'b1;
    end else begin
        sum_mult_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st14_fsm_13)) begin
        sum_mult_d0 = tmp_42_reg_479;
    end else if ((1'b1 == ap_sig_cseq_ST_st8_fsm_7)) begin
        sum_mult_d0 = grp_fu_183_p2;
    end else begin
        sum_mult_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_sig_cseq_ST_st8_fsm_7) & ~(1'b0 == tmp_mid2_reg_420)) | ((exitcond_flatten2_reg_389 == 1'b0) & (1'b0 == tmp_mid2_reg_420) & (1'b1 == ap_sig_cseq_ST_st14_fsm_13) & (1'b0 == tmp_mid2_24_reg_424)))) begin
        sum_mult_we0 = 1'b1;
    end else begin
        sum_mult_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : begin
            if (~(ap_start == 1'b0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : begin
            if ((exitcond_flatten2_fu_190_p2 == 1'b0)) begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end else begin
                ap_NS_fsm = ap_ST_st15_fsm_14;
            end
        end
        ap_ST_st3_fsm_2 : begin
            ap_NS_fsm = ap_ST_st4_fsm_3;
        end
        ap_ST_st4_fsm_3 : begin
            ap_NS_fsm = ap_ST_st5_fsm_4;
        end
        ap_ST_st5_fsm_4 : begin
            ap_NS_fsm = ap_ST_st6_fsm_5;
        end
        ap_ST_st6_fsm_5 : begin
            ap_NS_fsm = ap_ST_st7_fsm_6;
        end
        ap_ST_st7_fsm_6 : begin
            ap_NS_fsm = ap_ST_st8_fsm_7;
        end
        ap_ST_st8_fsm_7 : begin
            ap_NS_fsm = ap_ST_st9_fsm_8;
        end
        ap_ST_st9_fsm_8 : begin
            ap_NS_fsm = ap_ST_st10_fsm_9;
        end
        ap_ST_st10_fsm_9 : begin
            ap_NS_fsm = ap_ST_st11_fsm_10;
        end
        ap_ST_st11_fsm_10 : begin
            ap_NS_fsm = ap_ST_st12_fsm_11;
        end
        ap_ST_st12_fsm_11 : begin
            ap_NS_fsm = ap_ST_st13_fsm_12;
        end
        ap_ST_st13_fsm_12 : begin
            ap_NS_fsm = ap_ST_st14_fsm_13;
        end
        ap_ST_st14_fsm_13 : begin
            ap_NS_fsm = ap_ST_st2_fsm_1;
        end
        ap_ST_st15_fsm_14 : begin
            ap_NS_fsm = ap_ST_st1_fsm_0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign A_address0 = tmp_62_cast_fu_323_p1;

assign B_address0 = tmp_64_cast_fu_330_p1;

assign C_address0 = C_addr_reg_454;

assign C_d0 = tmp_42_reg_479;

assign Col_assign_mid2_fu_246_p3 = ((tmp_53_fu_240_p2[0:0] === 1'b1) ? ap_const_lv7_0 : Col_assign_reg_168);

assign Row_assign_mid_fu_208_p3 = ((exitcond_flatten_fu_202_p2[0:0] === 1'b1) ? ap_const_lv4_0 : Row_assign_reg_157);

always @ (*) begin
    ap_sig_108 = (1'b1 == ap_CS_fsm[ap_const_lv32_4]);
end

always @ (*) begin
    ap_sig_122 = (1'b1 == ap_CS_fsm[ap_const_lv32_5]);
end

always @ (*) begin
    ap_sig_131 = (1'b1 == ap_CS_fsm[ap_const_lv32_7]);
end

always @ (*) begin
    ap_sig_140 = (1'b1 == ap_CS_fsm[ap_const_lv32_C]);
end

always @ (*) begin
    ap_sig_153 = (1'b1 == ap_CS_fsm[ap_const_lv32_D]);
end

always @ (*) begin
    ap_sig_208 = (1'b1 == ap_CS_fsm[ap_const_lv32_8]);
end

always @ (*) begin
    ap_sig_32 = (ap_CS_fsm[ap_const_lv32_0] == 1'b1);
end

always @ (*) begin
    ap_sig_365 = (1'b1 == ap_CS_fsm[ap_const_lv32_E]);
end

always @ (*) begin
    ap_sig_63 = (1'b1 == ap_CS_fsm[ap_const_lv32_1]);
end

always @ (*) begin
    ap_sig_83 = (1'b1 == ap_CS_fsm[ap_const_lv32_2]);
end

always @ (*) begin
    ap_sig_98 = (1'b1 == ap_CS_fsm[ap_const_lv32_3]);
end

assign c_fu_345_p2 = (Col_assign_mid2_reg_406 + ap_const_lv7_1);

assign exitcond_flatten2_fu_190_p2 = ((indvar_flatten2_reg_122 == ap_const_lv20_BF680) ? 1'b1 : 1'b0);

assign exitcond_flatten_fu_202_p2 = ((indvar_flatten_reg_145 == ap_const_lv11_3E8) ? 1'b1 : 1'b0);

assign exitcond_fu_222_p2 = ((Col_assign_reg_168 == ap_const_lv7_64) ? 1'b1 : 1'b0);

assign exitcond_mid_fu_228_p2 = (exitcond_fu_222_p2 & not_exitcond_flatten_fu_216_p2);

assign grp_fu_363_p0 = grp_fu_363_p00;

assign grp_fu_363_p00 = tmp_40_mid2_reg_413;

assign grp_fu_363_p1 = ap_const_lv11_64;

assign grp_fu_363_p2 = grp_fu_363_p20;

assign grp_fu_363_p20 = Col_assign_mid2_reg_406;

assign grp_fu_372_p0 = grp_fu_372_p00;

assign grp_fu_372_p00 = tmp_i_i_mid2_v_reg_428;

assign grp_fu_372_p1 = ap_const_lv17_64;

assign grp_fu_372_p2 = grp_fu_372_p20;

assign grp_fu_372_p20 = Col_assign_mid2_reg_406;

assign grp_fu_381_p0 = grp_fu_381_p00;

assign grp_fu_381_p00 = tmp_40_mid2_reg_413;

assign grp_fu_381_p1 = ap_const_lv14_310;

assign grp_fu_381_p2 = grp_fu_381_p20;

assign grp_fu_381_p20 = tmp_i_i_mid2_v_fu_306_p3;

assign indvar_flatten_next2_fu_196_p2 = (indvar_flatten2_reg_122 + ap_const_lv20_1);

assign indvar_flatten_next_fu_356_p3 = ((exitcond_flatten_reg_398[0:0] === 1'b1) ? ap_const_lv11_1 : indvar_flatten_op_fu_350_p2);

assign indvar_flatten_op_fu_350_p2 = (indvar_flatten_reg_145 + ap_const_lv11_1);

assign k_fu_262_p2 = (Col_assign_3_reg_133 + ap_const_lv10_1);

assign not_exitcond_flatten_fu_216_p2 = (exitcond_flatten_fu_202_p2 ^ 1'b1);

assign r_fu_234_p2 = (Row_assign_mid_fu_208_p3 + ap_const_lv4_1);

assign tmp2_fu_274_p2 = ((Col_assign_3_reg_133 == ap_const_lv10_0) ? 1'b1 : 1'b0);

assign tmp_1_fu_293_p2 = ((Col_assign_3_reg_133 == ap_const_lv10_30F) ? 1'b1 : 1'b0);

assign tmp_40_mid2_fu_254_p3 = ((exitcond_mid_fu_228_p2[0:0] === 1'b1) ? r_fu_234_p2 : Row_assign_mid_fu_208_p3);

assign tmp_53_fu_240_p2 = (exitcond_mid_fu_228_p2 | exitcond_flatten_fu_202_p2);

assign tmp_62_cast_fu_323_p1 = $signed(tmp_55_reg_434);

assign tmp_64_cast_fu_330_p1 = grp_fu_372_p3;

assign tmp_65_cast_fu_340_p1 = $signed(grp_fu_363_p3);

assign tmp_i_i_mid2_v_fu_306_p3 = ((exitcond_flatten_reg_398[0:0] === 1'b1) ? k_fu_262_p2 : Col_assign_3_reg_133);

assign tmp_mid1_23_fu_287_p2 = ((k_fu_262_p2 == ap_const_lv10_30F) ? 1'b1 : 1'b0);

assign tmp_mid1_fu_268_p2 = ((k_fu_262_p2 == ap_const_lv10_0) ? 1'b1 : 1'b0);

assign tmp_mid2_24_fu_299_p3 = ((exitcond_flatten_reg_398[0:0] === 1'b1) ? tmp_mid1_23_fu_287_p2 : tmp_1_fu_293_p2);

assign tmp_mid2_fu_280_p3 = ((exitcond_flatten_reg_398[0:0] === 1'b1) ? tmp_mid1_fu_268_p2 : tmp2_fu_274_p2);

endmodule //dut_matrix_multiply_alt2
