-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.2
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dut_calc_angle_float_float_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    A_M_real : IN STD_LOGIC_VECTOR (31 downto 0);
    A_M_imag : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of dut_calc_angle_float_float_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_st10_fsm_9 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_st11_fsm_10 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_st12_fsm_11 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_st13_fsm_12 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_st14_fsm_13 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_st15_fsm_14 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_st16_fsm_15 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_st17_fsm_16 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_st18_fsm_17 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_st19_fsm_18 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_st20_fsm_19 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_st21_fsm_20 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_st22_fsm_21 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_st23_fsm_22 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_st24_fsm_23 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_st25_fsm_24 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_st26_fsm_25 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_st27_fsm_26 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_st28_fsm_27 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_st29_fsm_28 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_st30_fsm_29 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_st31_fsm_30 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_st32_fsm_31 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_st33_fsm_32 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_st34_fsm_33 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_st35_fsm_34 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_st36_fsm_35 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_st37_fsm_36 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_st38_fsm_37 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_st39_fsm_38 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_st40_fsm_39 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_st41_fsm_40 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_st42_fsm_41 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_st43_fsm_42 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_st44_fsm_43 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_st45_fsm_44 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_st46_fsm_45 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_st47_fsm_46 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_st48_fsm_47 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_st49_fsm_48 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_st50_fsm_49 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_st51_fsm_50 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_st52_fsm_51 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_st53_fsm_52 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_st54_fsm_53 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_st55_fsm_54 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st56_fsm_55 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st57_fsm_56 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st58_fsm_57 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st59_fsm_58 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st60_fsm_59 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st61_fsm_60 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st62_fsm_61 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st63_fsm_62 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st64_fsm_63 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st65_fsm_64 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st66_fsm_65 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st67_fsm_66 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st68_fsm_67 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st69_fsm_68 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st70_fsm_69 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st71_fsm_70 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st72_fsm_71 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st73_fsm_72 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st74_fsm_73 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st75_fsm_74 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st76_fsm_75 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st77_fsm_76 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st78_fsm_77 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st79_fsm_78 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st80_fsm_79 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st81_fsm_80 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st82_fsm_81 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st83_fsm_82 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st84_fsm_83 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st85_fsm_84 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st86_fsm_85 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st87_fsm_86 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st88_fsm_87 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st89_fsm_88 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st90_fsm_89 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st91_fsm_90 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st92_fsm_91 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st93_fsm_92 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st94_fsm_93 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st95_fsm_94 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st96_fsm_95 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st97_fsm_96 : STD_LOGIC_VECTOR (107 downto 0) := "000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st98_fsm_97 : STD_LOGIC_VECTOR (107 downto 0) := "000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st99_fsm_98 : STD_LOGIC_VECTOR (107 downto 0) := "000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st100_fsm_99 : STD_LOGIC_VECTOR (107 downto 0) := "000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st101_fsm_100 : STD_LOGIC_VECTOR (107 downto 0) := "000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st102_fsm_101 : STD_LOGIC_VECTOR (107 downto 0) := "000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st103_fsm_102 : STD_LOGIC_VECTOR (107 downto 0) := "000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st104_fsm_103 : STD_LOGIC_VECTOR (107 downto 0) := "000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st105_fsm_104 : STD_LOGIC_VECTOR (107 downto 0) := "000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st106_fsm_105 : STD_LOGIC_VECTOR (107 downto 0) := "001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st107_fsm_106 : STD_LOGIC_VECTOR (107 downto 0) := "010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st108_fsm_107 : STD_LOGIC_VECTOR (107 downto 0) := "100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_57 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_43 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000011";
    constant ap_const_lv32_5C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011100";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_67 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100111";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_53 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010011";
    constant ap_const_lv32_6B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101011";
    constant ap_const_lv32_3F3504F3 : STD_LOGIC_VECTOR (31 downto 0) := "00111111001101010000010011110011";
    constant ap_const_lv32_3F800000 : STD_LOGIC_VECTOR (31 downto 0) := "00111111100000000000000000000000";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_58 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_54 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010100";
    constant ap_const_lv32_68 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101000";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_44 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000100";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_5D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011101";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv9_18 : STD_LOGIC_VECTOR (8 downto 0) := "000011000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_BF3504F3 : STD_LOGIC_VECTOR (31 downto 0) := "10111111001101010000010011110011";
    constant ap_const_lv31_3F800000 : STD_LOGIC_VECTOR (30 downto 0) := "0111111100000000000000000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_125 : BOOLEAN;
    signal grp_fu_96_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_114 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st16_fsm_15 : STD_LOGIC;
    signal ap_sig_142 : BOOLEAN;
    signal ap_sig_cseq_ST_st64_fsm_63 : STD_LOGIC;
    signal ap_sig_149 : BOOLEAN;
    signal grp_fu_88_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_121 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st20_fsm_19 : STD_LOGIC;
    signal ap_sig_159 : BOOLEAN;
    signal ap_sig_cseq_ST_st40_fsm_39 : STD_LOGIC;
    signal ap_sig_166 : BOOLEAN;
    signal ap_sig_cseq_ST_st88_fsm_87 : STD_LOGIC;
    signal ap_sig_174 : BOOLEAN;
    signal grp_fu_82_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_128 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st25_fsm_24 : STD_LOGIC;
    signal ap_sig_184 : BOOLEAN;
    signal ap_sig_cseq_ST_st48_fsm_47 : STD_LOGIC;
    signal ap_sig_191 : BOOLEAN;
    signal ap_sig_cseq_ST_st68_fsm_67 : STD_LOGIC;
    signal ap_sig_199 : BOOLEAN;
    signal ap_sig_cseq_ST_st93_fsm_92 : STD_LOGIC;
    signal ap_sig_207 : BOOLEAN;
    signal grp_fu_102_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_135 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st36_fsm_35 : STD_LOGIC;
    signal ap_sig_217 : BOOLEAN;
    signal ap_sig_cseq_ST_st104_fsm_103 : STD_LOGIC;
    signal ap_sig_224 : BOOLEAN;
    signal demorgan_fu_197_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal demorgan_reg_305 : STD_LOGIC_VECTOR (0 downto 0);
    signal demorgan5_fu_221_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal demorgan5_reg_309 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_107_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_16_reg_313 : STD_LOGIC_VECTOR (0 downto 0);
    signal storemerge1_fu_235_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal cosThetaAdiv2_fu_243_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sinThetaAdiv2_fu_251_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ret_i_i_i_i_fu_266_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st37_fsm_36 : STD_LOGIC;
    signal ap_sig_264 : BOOLEAN;
    signal sinThetaA_int_reg_338 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st44_fsm_43 : STD_LOGIC;
    signal ap_sig_272 : BOOLEAN;
    signal ap_sig_cseq_ST_st84_fsm_83 : STD_LOGIC;
    signal ap_sig_280 : BOOLEAN;
    signal tanThetaAdiv_phi_fu_51_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tanThetaAdiv_reg_48 : STD_LOGIC_VECTOR (31 downto 0);
    signal cosThetaAdiv2_write_assign_phi_fu_61_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal cosThetaAdiv2_write_assign_reg_58 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st108_fsm_107 : STD_LOGIC;
    signal ap_sig_292 : BOOLEAN;
    signal sinThetaAdiv2_write_assign_phi_fu_73_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal sinThetaAdiv2_write_assign_reg_69 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_82_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_82_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st21_fsm_20 : STD_LOGIC;
    signal ap_sig_309 : BOOLEAN;
    signal p_Result_21_fu_275_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st89_fsm_88 : STD_LOGIC;
    signal ap_sig_322 : BOOLEAN;
    signal grp_fu_88_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_88_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st17_fsm_16 : STD_LOGIC;
    signal ap_sig_332 : BOOLEAN;
    signal ap_sig_cseq_ST_st41_fsm_40 : STD_LOGIC;
    signal ap_sig_339 : BOOLEAN;
    signal ap_sig_cseq_ST_st85_fsm_84 : STD_LOGIC;
    signal ap_sig_346 : BOOLEAN;
    signal ap_sig_cseq_ST_st105_fsm_104 : STD_LOGIC;
    signal ap_sig_353 : BOOLEAN;
    signal grp_fu_96_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_96_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st49_fsm_48 : STD_LOGIC;
    signal ap_sig_363 : BOOLEAN;
    signal ap_sig_cseq_ST_st69_fsm_68 : STD_LOGIC;
    signal ap_sig_370 : BOOLEAN;
    signal ap_sig_cseq_ST_st26_fsm_25 : STD_LOGIC;
    signal ap_sig_378 : BOOLEAN;
    signal ap_sig_cseq_ST_st94_fsm_93 : STD_LOGIC;
    signal ap_sig_385 : BOOLEAN;
    signal p_Val2_s_fu_142_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_33_fu_157_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal loc_V_10_fu_161_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal lhs_V_cast_fu_171_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal loc_V_fu_147_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_fu_175_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_i_cast_fu_181_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ult_fu_185_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notrhs_i_fu_191_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_1_fu_203_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ult3_fu_209_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notrhs_i1_fu_215_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_19_fu_227_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_20_fu_259_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_36_fu_271_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_82_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_return_0_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_1_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (107 downto 0);

    component dut_faddfsub_32ns_32ns_32_5_full_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dut_fmul_32ns_32ns_32_4_max_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dut_fdiv_32ns_32ns_32_16 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dut_frsqrt_32ns_32ns_32_11_full_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    dut_faddfsub_32ns_32ns_32_5_full_dsp_U21 : component dut_faddfsub_32ns_32ns_32_5_full_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_82_p0,
        din1 => grp_fu_82_p1,
        opcode => grp_fu_82_opcode,
        ce => ap_const_logic_1,
        dout => grp_fu_82_p2);

    dut_fmul_32ns_32ns_32_4_max_dsp_U22 : component dut_fmul_32ns_32ns_32_4_max_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_88_p0,
        din1 => grp_fu_88_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_88_p2);

    dut_fdiv_32ns_32ns_32_16_U23 : component dut_fdiv_32ns_32ns_32_16
    generic map (
        ID => 1,
        NUM_STAGE => 16,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_96_p0,
        din1 => grp_fu_96_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_96_p2);

    dut_frsqrt_32ns_32ns_32_11_full_dsp_U24 : component dut_frsqrt_32ns_32ns_32_11_full_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 11,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_const_lv32_0,
        din1 => reg_128,
        ce => ap_const_logic_1,
        dout => grp_fu_102_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_0_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_0_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_st108_fsm_107)) then 
                    ap_return_0_preg <= cosThetaAdiv2_write_assign_phi_fu_61_p6;
                end if; 
            end if;
        end if;
    end process;


    ap_return_1_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_1_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_st108_fsm_107)) then 
                    ap_return_1_preg <= sinThetaAdiv2_write_assign_phi_fu_73_p6;
                end if; 
            end if;
        end if;
    end process;


    cosThetaAdiv2_write_assign_reg_58_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)) and (demorgan_fu_197_p2 = ap_const_lv1_0) and not((demorgan5_fu_221_p2 = ap_const_lv1_0)))) then 
                cosThetaAdiv2_write_assign_reg_58 <= storemerge1_fu_235_p3;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st108_fsm_107) and (demorgan_reg_305 = ap_const_lv1_0) and (demorgan5_reg_309 = ap_const_lv1_0))) then 
                cosThetaAdiv2_write_assign_reg_58 <= reg_135;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)) and not((demorgan_fu_197_p2 = ap_const_lv1_0)))) then 
                cosThetaAdiv2_write_assign_reg_58 <= cosThetaAdiv2_fu_243_p3;
            end if; 
        end if;
    end process;

    sinThetaAdiv2_write_assign_reg_69_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)) and (demorgan_fu_197_p2 = ap_const_lv1_0) and not((demorgan5_fu_221_p2 = ap_const_lv1_0)))) then 
                sinThetaAdiv2_write_assign_reg_69 <= ap_const_lv32_3F3504F3;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st108_fsm_107) and (demorgan_reg_305 = ap_const_lv1_0) and (demorgan5_reg_309 = ap_const_lv1_0))) then 
                sinThetaAdiv2_write_assign_reg_69 <= grp_fu_88_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)) and not((demorgan_fu_197_p2 = ap_const_lv1_0)))) then 
                sinThetaAdiv2_write_assign_reg_69 <= sinThetaAdiv2_fu_251_p3;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)) and (demorgan_fu_197_p2 = ap_const_lv1_0))) then
                demorgan5_reg_309 <= demorgan5_fu_221_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then
                demorgan_reg_305 <= demorgan_fu_197_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)) and (demorgan_fu_197_p2 = ap_const_lv1_0) and (demorgan5_fu_221_p2 = ap_const_lv1_0))) then
                p_Result_16_reg_313 <= p_Val2_s_fu_142_p1(31 downto 31);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15) or (ap_const_logic_1 = ap_sig_cseq_ST_st64_fsm_63))) then
                reg_114 <= grp_fu_96_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19) or (ap_const_logic_1 = ap_sig_cseq_ST_st40_fsm_39) or (ap_const_logic_1 = ap_sig_cseq_ST_st88_fsm_87))) then
                reg_121 <= grp_fu_88_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st25_fsm_24) or (ap_const_logic_1 = ap_sig_cseq_ST_st48_fsm_47) or (ap_const_logic_1 = ap_sig_cseq_ST_st68_fsm_67) or (ap_const_logic_1 = ap_sig_cseq_ST_st93_fsm_92))) then
                reg_128 <= grp_fu_82_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st36_fsm_35) or (ap_const_logic_1 = ap_sig_cseq_ST_st104_fsm_103))) then
                reg_135 <= grp_fu_102_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st44_fsm_43)) then
                sinThetaA_int_reg_338 <= grp_fu_88_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st64_fsm_63) or (ap_const_logic_1 = ap_sig_cseq_ST_st84_fsm_83))) then
                tanThetaAdiv_reg_48 <= grp_fu_96_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, demorgan_fu_197_p2, demorgan5_fu_221_p2, p_Result_21_fu_275_p3)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if ((not((ap_start = ap_const_logic_0)) and (not((demorgan5_fu_221_p2 = ap_const_lv1_0)) or not((demorgan_fu_197_p2 = ap_const_lv1_0))))) then
                    ap_NS_fsm <= ap_ST_st108_fsm_107;
                elsif ((not((ap_start = ap_const_logic_0)) and (demorgan_fu_197_p2 = ap_const_lv1_0) and (demorgan5_fu_221_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                ap_NS_fsm <= ap_ST_st3_fsm_2;
            when ap_ST_st3_fsm_2 => 
                ap_NS_fsm <= ap_ST_st4_fsm_3;
            when ap_ST_st4_fsm_3 => 
                ap_NS_fsm <= ap_ST_st5_fsm_4;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when ap_ST_st6_fsm_5 => 
                ap_NS_fsm <= ap_ST_st7_fsm_6;
            when ap_ST_st7_fsm_6 => 
                ap_NS_fsm <= ap_ST_st8_fsm_7;
            when ap_ST_st8_fsm_7 => 
                ap_NS_fsm <= ap_ST_st9_fsm_8;
            when ap_ST_st9_fsm_8 => 
                ap_NS_fsm <= ap_ST_st10_fsm_9;
            when ap_ST_st10_fsm_9 => 
                ap_NS_fsm <= ap_ST_st11_fsm_10;
            when ap_ST_st11_fsm_10 => 
                ap_NS_fsm <= ap_ST_st12_fsm_11;
            when ap_ST_st12_fsm_11 => 
                ap_NS_fsm <= ap_ST_st13_fsm_12;
            when ap_ST_st13_fsm_12 => 
                ap_NS_fsm <= ap_ST_st14_fsm_13;
            when ap_ST_st14_fsm_13 => 
                ap_NS_fsm <= ap_ST_st15_fsm_14;
            when ap_ST_st15_fsm_14 => 
                ap_NS_fsm <= ap_ST_st16_fsm_15;
            when ap_ST_st16_fsm_15 => 
                ap_NS_fsm <= ap_ST_st17_fsm_16;
            when ap_ST_st17_fsm_16 => 
                ap_NS_fsm <= ap_ST_st18_fsm_17;
            when ap_ST_st18_fsm_17 => 
                ap_NS_fsm <= ap_ST_st19_fsm_18;
            when ap_ST_st19_fsm_18 => 
                ap_NS_fsm <= ap_ST_st20_fsm_19;
            when ap_ST_st20_fsm_19 => 
                ap_NS_fsm <= ap_ST_st21_fsm_20;
            when ap_ST_st21_fsm_20 => 
                ap_NS_fsm <= ap_ST_st22_fsm_21;
            when ap_ST_st22_fsm_21 => 
                ap_NS_fsm <= ap_ST_st23_fsm_22;
            when ap_ST_st23_fsm_22 => 
                ap_NS_fsm <= ap_ST_st24_fsm_23;
            when ap_ST_st24_fsm_23 => 
                ap_NS_fsm <= ap_ST_st25_fsm_24;
            when ap_ST_st25_fsm_24 => 
                ap_NS_fsm <= ap_ST_st26_fsm_25;
            when ap_ST_st26_fsm_25 => 
                ap_NS_fsm <= ap_ST_st27_fsm_26;
            when ap_ST_st27_fsm_26 => 
                ap_NS_fsm <= ap_ST_st28_fsm_27;
            when ap_ST_st28_fsm_27 => 
                ap_NS_fsm <= ap_ST_st29_fsm_28;
            when ap_ST_st29_fsm_28 => 
                ap_NS_fsm <= ap_ST_st30_fsm_29;
            when ap_ST_st30_fsm_29 => 
                ap_NS_fsm <= ap_ST_st31_fsm_30;
            when ap_ST_st31_fsm_30 => 
                ap_NS_fsm <= ap_ST_st32_fsm_31;
            when ap_ST_st32_fsm_31 => 
                ap_NS_fsm <= ap_ST_st33_fsm_32;
            when ap_ST_st33_fsm_32 => 
                ap_NS_fsm <= ap_ST_st34_fsm_33;
            when ap_ST_st34_fsm_33 => 
                ap_NS_fsm <= ap_ST_st35_fsm_34;
            when ap_ST_st35_fsm_34 => 
                ap_NS_fsm <= ap_ST_st36_fsm_35;
            when ap_ST_st36_fsm_35 => 
                ap_NS_fsm <= ap_ST_st37_fsm_36;
            when ap_ST_st37_fsm_36 => 
                ap_NS_fsm <= ap_ST_st38_fsm_37;
            when ap_ST_st38_fsm_37 => 
                ap_NS_fsm <= ap_ST_st39_fsm_38;
            when ap_ST_st39_fsm_38 => 
                ap_NS_fsm <= ap_ST_st40_fsm_39;
            when ap_ST_st40_fsm_39 => 
                ap_NS_fsm <= ap_ST_st41_fsm_40;
            when ap_ST_st41_fsm_40 => 
                ap_NS_fsm <= ap_ST_st42_fsm_41;
            when ap_ST_st42_fsm_41 => 
                ap_NS_fsm <= ap_ST_st43_fsm_42;
            when ap_ST_st43_fsm_42 => 
                ap_NS_fsm <= ap_ST_st44_fsm_43;
            when ap_ST_st44_fsm_43 => 
                if (not((ap_const_lv1_0 = p_Result_21_fu_275_p3))) then
                    ap_NS_fsm <= ap_ST_st65_fsm_64;
                else
                    ap_NS_fsm <= ap_ST_st45_fsm_44;
                end if;
            when ap_ST_st45_fsm_44 => 
                ap_NS_fsm <= ap_ST_st46_fsm_45;
            when ap_ST_st46_fsm_45 => 
                ap_NS_fsm <= ap_ST_st47_fsm_46;
            when ap_ST_st47_fsm_46 => 
                ap_NS_fsm <= ap_ST_st48_fsm_47;
            when ap_ST_st48_fsm_47 => 
                ap_NS_fsm <= ap_ST_st49_fsm_48;
            when ap_ST_st49_fsm_48 => 
                ap_NS_fsm <= ap_ST_st50_fsm_49;
            when ap_ST_st50_fsm_49 => 
                ap_NS_fsm <= ap_ST_st51_fsm_50;
            when ap_ST_st51_fsm_50 => 
                ap_NS_fsm <= ap_ST_st52_fsm_51;
            when ap_ST_st52_fsm_51 => 
                ap_NS_fsm <= ap_ST_st53_fsm_52;
            when ap_ST_st53_fsm_52 => 
                ap_NS_fsm <= ap_ST_st54_fsm_53;
            when ap_ST_st54_fsm_53 => 
                ap_NS_fsm <= ap_ST_st55_fsm_54;
            when ap_ST_st55_fsm_54 => 
                ap_NS_fsm <= ap_ST_st56_fsm_55;
            when ap_ST_st56_fsm_55 => 
                ap_NS_fsm <= ap_ST_st57_fsm_56;
            when ap_ST_st57_fsm_56 => 
                ap_NS_fsm <= ap_ST_st58_fsm_57;
            when ap_ST_st58_fsm_57 => 
                ap_NS_fsm <= ap_ST_st59_fsm_58;
            when ap_ST_st59_fsm_58 => 
                ap_NS_fsm <= ap_ST_st60_fsm_59;
            when ap_ST_st60_fsm_59 => 
                ap_NS_fsm <= ap_ST_st61_fsm_60;
            when ap_ST_st61_fsm_60 => 
                ap_NS_fsm <= ap_ST_st62_fsm_61;
            when ap_ST_st62_fsm_61 => 
                ap_NS_fsm <= ap_ST_st63_fsm_62;
            when ap_ST_st63_fsm_62 => 
                ap_NS_fsm <= ap_ST_st64_fsm_63;
            when ap_ST_st64_fsm_63 => 
                ap_NS_fsm <= ap_ST_st85_fsm_84;
            when ap_ST_st65_fsm_64 => 
                ap_NS_fsm <= ap_ST_st66_fsm_65;
            when ap_ST_st66_fsm_65 => 
                ap_NS_fsm <= ap_ST_st67_fsm_66;
            when ap_ST_st67_fsm_66 => 
                ap_NS_fsm <= ap_ST_st68_fsm_67;
            when ap_ST_st68_fsm_67 => 
                ap_NS_fsm <= ap_ST_st69_fsm_68;
            when ap_ST_st69_fsm_68 => 
                ap_NS_fsm <= ap_ST_st70_fsm_69;
            when ap_ST_st70_fsm_69 => 
                ap_NS_fsm <= ap_ST_st71_fsm_70;
            when ap_ST_st71_fsm_70 => 
                ap_NS_fsm <= ap_ST_st72_fsm_71;
            when ap_ST_st72_fsm_71 => 
                ap_NS_fsm <= ap_ST_st73_fsm_72;
            when ap_ST_st73_fsm_72 => 
                ap_NS_fsm <= ap_ST_st74_fsm_73;
            when ap_ST_st74_fsm_73 => 
                ap_NS_fsm <= ap_ST_st75_fsm_74;
            when ap_ST_st75_fsm_74 => 
                ap_NS_fsm <= ap_ST_st76_fsm_75;
            when ap_ST_st76_fsm_75 => 
                ap_NS_fsm <= ap_ST_st77_fsm_76;
            when ap_ST_st77_fsm_76 => 
                ap_NS_fsm <= ap_ST_st78_fsm_77;
            when ap_ST_st78_fsm_77 => 
                ap_NS_fsm <= ap_ST_st79_fsm_78;
            when ap_ST_st79_fsm_78 => 
                ap_NS_fsm <= ap_ST_st80_fsm_79;
            when ap_ST_st80_fsm_79 => 
                ap_NS_fsm <= ap_ST_st81_fsm_80;
            when ap_ST_st81_fsm_80 => 
                ap_NS_fsm <= ap_ST_st82_fsm_81;
            when ap_ST_st82_fsm_81 => 
                ap_NS_fsm <= ap_ST_st83_fsm_82;
            when ap_ST_st83_fsm_82 => 
                ap_NS_fsm <= ap_ST_st84_fsm_83;
            when ap_ST_st84_fsm_83 => 
                ap_NS_fsm <= ap_ST_st85_fsm_84;
            when ap_ST_st85_fsm_84 => 
                ap_NS_fsm <= ap_ST_st86_fsm_85;
            when ap_ST_st86_fsm_85 => 
                ap_NS_fsm <= ap_ST_st87_fsm_86;
            when ap_ST_st87_fsm_86 => 
                ap_NS_fsm <= ap_ST_st88_fsm_87;
            when ap_ST_st88_fsm_87 => 
                ap_NS_fsm <= ap_ST_st89_fsm_88;
            when ap_ST_st89_fsm_88 => 
                ap_NS_fsm <= ap_ST_st90_fsm_89;
            when ap_ST_st90_fsm_89 => 
                ap_NS_fsm <= ap_ST_st91_fsm_90;
            when ap_ST_st91_fsm_90 => 
                ap_NS_fsm <= ap_ST_st92_fsm_91;
            when ap_ST_st92_fsm_91 => 
                ap_NS_fsm <= ap_ST_st93_fsm_92;
            when ap_ST_st93_fsm_92 => 
                ap_NS_fsm <= ap_ST_st94_fsm_93;
            when ap_ST_st94_fsm_93 => 
                ap_NS_fsm <= ap_ST_st95_fsm_94;
            when ap_ST_st95_fsm_94 => 
                ap_NS_fsm <= ap_ST_st96_fsm_95;
            when ap_ST_st96_fsm_95 => 
                ap_NS_fsm <= ap_ST_st97_fsm_96;
            when ap_ST_st97_fsm_96 => 
                ap_NS_fsm <= ap_ST_st98_fsm_97;
            when ap_ST_st98_fsm_97 => 
                ap_NS_fsm <= ap_ST_st99_fsm_98;
            when ap_ST_st99_fsm_98 => 
                ap_NS_fsm <= ap_ST_st100_fsm_99;
            when ap_ST_st100_fsm_99 => 
                ap_NS_fsm <= ap_ST_st101_fsm_100;
            when ap_ST_st101_fsm_100 => 
                ap_NS_fsm <= ap_ST_st102_fsm_101;
            when ap_ST_st102_fsm_101 => 
                ap_NS_fsm <= ap_ST_st103_fsm_102;
            when ap_ST_st103_fsm_102 => 
                ap_NS_fsm <= ap_ST_st104_fsm_103;
            when ap_ST_st104_fsm_103 => 
                ap_NS_fsm <= ap_ST_st105_fsm_104;
            when ap_ST_st105_fsm_104 => 
                ap_NS_fsm <= ap_ST_st106_fsm_105;
            when ap_ST_st106_fsm_105 => 
                ap_NS_fsm <= ap_ST_st107_fsm_106;
            when ap_ST_st107_fsm_106 => 
                ap_NS_fsm <= ap_ST_st108_fsm_107;
            when ap_ST_st108_fsm_107 => 
                ap_NS_fsm <= ap_ST_st1_fsm_0;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    ap_done_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, ap_sig_cseq_ST_st108_fsm_107)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) or (ap_const_logic_1 = ap_sig_cseq_ST_st108_fsm_107))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_sig_cseq_ST_st108_fsm_107)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st108_fsm_107)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_0_assign_proc : process(cosThetaAdiv2_write_assign_phi_fu_61_p6, ap_sig_cseq_ST_st108_fsm_107, ap_return_0_preg)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st108_fsm_107)) then 
            ap_return_0 <= cosThetaAdiv2_write_assign_phi_fu_61_p6;
        else 
            ap_return_0 <= ap_return_0_preg;
        end if; 
    end process;


    ap_return_1_assign_proc : process(ap_sig_cseq_ST_st108_fsm_107, sinThetaAdiv2_write_assign_phi_fu_73_p6, ap_return_1_preg)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st108_fsm_107)) then 
            ap_return_1 <= sinThetaAdiv2_write_assign_phi_fu_73_p6;
        else 
            ap_return_1 <= ap_return_1_preg;
        end if; 
    end process;


    ap_sig_125_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_125 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    ap_sig_142_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_142 <= (ap_const_lv1_1 = ap_CS_fsm(15 downto 15));
    end process;


    ap_sig_149_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_149 <= (ap_const_lv1_1 = ap_CS_fsm(63 downto 63));
    end process;


    ap_sig_159_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_159 <= (ap_const_lv1_1 = ap_CS_fsm(19 downto 19));
    end process;


    ap_sig_166_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_166 <= (ap_const_lv1_1 = ap_CS_fsm(39 downto 39));
    end process;


    ap_sig_174_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_174 <= (ap_const_lv1_1 = ap_CS_fsm(87 downto 87));
    end process;


    ap_sig_184_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_184 <= (ap_const_lv1_1 = ap_CS_fsm(24 downto 24));
    end process;


    ap_sig_191_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_191 <= (ap_const_lv1_1 = ap_CS_fsm(47 downto 47));
    end process;


    ap_sig_199_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_199 <= (ap_const_lv1_1 = ap_CS_fsm(67 downto 67));
    end process;


    ap_sig_207_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_207 <= (ap_const_lv1_1 = ap_CS_fsm(92 downto 92));
    end process;


    ap_sig_217_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_217 <= (ap_const_lv1_1 = ap_CS_fsm(35 downto 35));
    end process;


    ap_sig_224_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_224 <= (ap_const_lv1_1 = ap_CS_fsm(103 downto 103));
    end process;


    ap_sig_264_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_264 <= (ap_const_lv1_1 = ap_CS_fsm(36 downto 36));
    end process;


    ap_sig_272_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_272 <= (ap_const_lv1_1 = ap_CS_fsm(43 downto 43));
    end process;


    ap_sig_280_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_280 <= (ap_const_lv1_1 = ap_CS_fsm(83 downto 83));
    end process;


    ap_sig_292_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_292 <= (ap_const_lv1_1 = ap_CS_fsm(107 downto 107));
    end process;


    ap_sig_309_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_309 <= (ap_const_lv1_1 = ap_CS_fsm(20 downto 20));
    end process;


    ap_sig_322_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_322 <= (ap_const_lv1_1 = ap_CS_fsm(88 downto 88));
    end process;


    ap_sig_332_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_332 <= (ap_const_lv1_1 = ap_CS_fsm(16 downto 16));
    end process;


    ap_sig_339_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_339 <= (ap_const_lv1_1 = ap_CS_fsm(40 downto 40));
    end process;


    ap_sig_346_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_346 <= (ap_const_lv1_1 = ap_CS_fsm(84 downto 84));
    end process;


    ap_sig_353_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_353 <= (ap_const_lv1_1 = ap_CS_fsm(104 downto 104));
    end process;


    ap_sig_363_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_363 <= (ap_const_lv1_1 = ap_CS_fsm(48 downto 48));
    end process;


    ap_sig_370_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_370 <= (ap_const_lv1_1 = ap_CS_fsm(68 downto 68));
    end process;


    ap_sig_378_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_378 <= (ap_const_lv1_1 = ap_CS_fsm(25 downto 25));
    end process;


    ap_sig_385_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_385 <= (ap_const_lv1_1 = ap_CS_fsm(93 downto 93));
    end process;


    ap_sig_cseq_ST_st104_fsm_103_assign_proc : process(ap_sig_224)
    begin
        if (ap_sig_224) then 
            ap_sig_cseq_ST_st104_fsm_103 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st104_fsm_103 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st105_fsm_104_assign_proc : process(ap_sig_353)
    begin
        if (ap_sig_353) then 
            ap_sig_cseq_ST_st105_fsm_104 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st105_fsm_104 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st108_fsm_107_assign_proc : process(ap_sig_292)
    begin
        if (ap_sig_292) then 
            ap_sig_cseq_ST_st108_fsm_107 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st108_fsm_107 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st16_fsm_15_assign_proc : process(ap_sig_142)
    begin
        if (ap_sig_142) then 
            ap_sig_cseq_ST_st16_fsm_15 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st16_fsm_15 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st17_fsm_16_assign_proc : process(ap_sig_332)
    begin
        if (ap_sig_332) then 
            ap_sig_cseq_ST_st17_fsm_16 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st17_fsm_16 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_125)
    begin
        if (ap_sig_125) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st20_fsm_19_assign_proc : process(ap_sig_159)
    begin
        if (ap_sig_159) then 
            ap_sig_cseq_ST_st20_fsm_19 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st20_fsm_19 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st21_fsm_20_assign_proc : process(ap_sig_309)
    begin
        if (ap_sig_309) then 
            ap_sig_cseq_ST_st21_fsm_20 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st21_fsm_20 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st25_fsm_24_assign_proc : process(ap_sig_184)
    begin
        if (ap_sig_184) then 
            ap_sig_cseq_ST_st25_fsm_24 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st25_fsm_24 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st26_fsm_25_assign_proc : process(ap_sig_378)
    begin
        if (ap_sig_378) then 
            ap_sig_cseq_ST_st26_fsm_25 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st26_fsm_25 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st36_fsm_35_assign_proc : process(ap_sig_217)
    begin
        if (ap_sig_217) then 
            ap_sig_cseq_ST_st36_fsm_35 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st36_fsm_35 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st37_fsm_36_assign_proc : process(ap_sig_264)
    begin
        if (ap_sig_264) then 
            ap_sig_cseq_ST_st37_fsm_36 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st37_fsm_36 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st40_fsm_39_assign_proc : process(ap_sig_166)
    begin
        if (ap_sig_166) then 
            ap_sig_cseq_ST_st40_fsm_39 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st40_fsm_39 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st41_fsm_40_assign_proc : process(ap_sig_339)
    begin
        if (ap_sig_339) then 
            ap_sig_cseq_ST_st41_fsm_40 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st41_fsm_40 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st44_fsm_43_assign_proc : process(ap_sig_272)
    begin
        if (ap_sig_272) then 
            ap_sig_cseq_ST_st44_fsm_43 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st44_fsm_43 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st48_fsm_47_assign_proc : process(ap_sig_191)
    begin
        if (ap_sig_191) then 
            ap_sig_cseq_ST_st48_fsm_47 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st48_fsm_47 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st49_fsm_48_assign_proc : process(ap_sig_363)
    begin
        if (ap_sig_363) then 
            ap_sig_cseq_ST_st49_fsm_48 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st49_fsm_48 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st64_fsm_63_assign_proc : process(ap_sig_149)
    begin
        if (ap_sig_149) then 
            ap_sig_cseq_ST_st64_fsm_63 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st64_fsm_63 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st68_fsm_67_assign_proc : process(ap_sig_199)
    begin
        if (ap_sig_199) then 
            ap_sig_cseq_ST_st68_fsm_67 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st68_fsm_67 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st69_fsm_68_assign_proc : process(ap_sig_370)
    begin
        if (ap_sig_370) then 
            ap_sig_cseq_ST_st69_fsm_68 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st69_fsm_68 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st84_fsm_83_assign_proc : process(ap_sig_280)
    begin
        if (ap_sig_280) then 
            ap_sig_cseq_ST_st84_fsm_83 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st84_fsm_83 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st85_fsm_84_assign_proc : process(ap_sig_346)
    begin
        if (ap_sig_346) then 
            ap_sig_cseq_ST_st85_fsm_84 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st85_fsm_84 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st88_fsm_87_assign_proc : process(ap_sig_174)
    begin
        if (ap_sig_174) then 
            ap_sig_cseq_ST_st88_fsm_87 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st88_fsm_87 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st89_fsm_88_assign_proc : process(ap_sig_322)
    begin
        if (ap_sig_322) then 
            ap_sig_cseq_ST_st89_fsm_88 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st89_fsm_88 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st93_fsm_92_assign_proc : process(ap_sig_207)
    begin
        if (ap_sig_207) then 
            ap_sig_cseq_ST_st93_fsm_92 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st93_fsm_92 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st94_fsm_93_assign_proc : process(ap_sig_385)
    begin
        if (ap_sig_385) then 
            ap_sig_cseq_ST_st94_fsm_93 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st94_fsm_93 <= ap_const_logic_0;
        end if; 
    end process;

    cosThetaAdiv2_fu_243_p3 <= 
        ap_const_lv32_0 when (grp_fu_107_p3(0) = '1') else 
        ap_const_lv32_3F800000;

    cosThetaAdiv2_write_assign_phi_fu_61_p6_assign_proc : process(reg_135, demorgan_reg_305, demorgan5_reg_309, cosThetaAdiv2_write_assign_reg_58, ap_sig_cseq_ST_st108_fsm_107)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st108_fsm_107) and (demorgan_reg_305 = ap_const_lv1_0) and (demorgan5_reg_309 = ap_const_lv1_0))) then 
            cosThetaAdiv2_write_assign_phi_fu_61_p6 <= reg_135;
        else 
            cosThetaAdiv2_write_assign_phi_fu_61_p6 <= cosThetaAdiv2_write_assign_reg_58;
        end if; 
    end process;

    demorgan5_fu_221_p2 <= (ult3_fu_209_p2 or notrhs_i1_fu_215_p2);
    demorgan_fu_197_p2 <= (ult_fu_185_p2 or notrhs_i_fu_191_p2);
    grp_fu_107_p3 <= p_Val2_s_fu_142_p1(31 downto 31);

    grp_fu_82_opcode_assign_proc : process(ap_sig_cseq_ST_st44_fsm_43, ap_sig_cseq_ST_st21_fsm_20, p_Result_21_fu_275_p3, ap_sig_cseq_ST_st89_fsm_88)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st44_fsm_43) and not((ap_const_lv1_0 = p_Result_21_fu_275_p3)))) then 
            grp_fu_82_opcode <= ap_const_lv2_1;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20) or ((ap_const_logic_1 = ap_sig_cseq_ST_st44_fsm_43) and (ap_const_lv1_0 = p_Result_21_fu_275_p3)) or (ap_const_logic_1 = ap_sig_cseq_ST_st89_fsm_88))) then 
            grp_fu_82_opcode <= ap_const_lv2_0;
        else 
            grp_fu_82_opcode <= "XX";
        end if; 
    end process;


    grp_fu_82_p0_assign_proc : process(reg_121, ap_sig_cseq_ST_st44_fsm_43, ap_sig_cseq_ST_st21_fsm_20, p_Result_21_fu_275_p3, ap_sig_cseq_ST_st89_fsm_88)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st44_fsm_43) and not((ap_const_lv1_0 = p_Result_21_fu_275_p3)))) then 
            grp_fu_82_p0 <= ap_const_lv32_3F800000;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20) or ((ap_const_logic_1 = ap_sig_cseq_ST_st44_fsm_43) and (ap_const_lv1_0 = p_Result_21_fu_275_p3)) or (ap_const_logic_1 = ap_sig_cseq_ST_st89_fsm_88))) then 
            grp_fu_82_p0 <= reg_121;
        else 
            grp_fu_82_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_82_p1_assign_proc : process(reg_121, ap_sig_cseq_ST_st44_fsm_43, ap_sig_cseq_ST_st21_fsm_20, p_Result_21_fu_275_p3, ap_sig_cseq_ST_st89_fsm_88)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st44_fsm_43) and not((ap_const_lv1_0 = p_Result_21_fu_275_p3)))) then 
            grp_fu_82_p1 <= reg_121;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20) or ((ap_const_logic_1 = ap_sig_cseq_ST_st44_fsm_43) and (ap_const_lv1_0 = p_Result_21_fu_275_p3)) or (ap_const_logic_1 = ap_sig_cseq_ST_st89_fsm_88))) then 
            grp_fu_82_p1 <= ap_const_lv32_3F800000;
        else 
            grp_fu_82_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_88_p0_assign_proc : process(reg_114, reg_121, reg_135, ret_i_i_i_i_fu_266_p1, ap_sig_cseq_ST_st37_fsm_36, tanThetaAdiv_reg_48, ap_sig_cseq_ST_st17_fsm_16, ap_sig_cseq_ST_st41_fsm_40, ap_sig_cseq_ST_st85_fsm_84, ap_sig_cseq_ST_st105_fsm_104)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st105_fsm_104)) then 
            grp_fu_88_p0 <= reg_135;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st85_fsm_84)) then 
            grp_fu_88_p0 <= tanThetaAdiv_reg_48;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st41_fsm_40)) then 
            grp_fu_88_p0 <= reg_121;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st37_fsm_36)) then 
            grp_fu_88_p0 <= ret_i_i_i_i_fu_266_p1;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st17_fsm_16)) then 
            grp_fu_88_p0 <= reg_114;
        else 
            grp_fu_88_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_88_p1_assign_proc : process(reg_114, reg_135, ap_sig_cseq_ST_st37_fsm_36, tanThetaAdiv_phi_fu_51_p4, tanThetaAdiv_reg_48, ap_sig_cseq_ST_st17_fsm_16, ap_sig_cseq_ST_st41_fsm_40, ap_sig_cseq_ST_st85_fsm_84, ap_sig_cseq_ST_st105_fsm_104)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st105_fsm_104)) then 
            grp_fu_88_p1 <= tanThetaAdiv_reg_48;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st85_fsm_84)) then 
            grp_fu_88_p1 <= tanThetaAdiv_phi_fu_51_p4;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st37_fsm_36)) then 
            grp_fu_88_p1 <= reg_135;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st17_fsm_16) or (ap_const_logic_1 = ap_sig_cseq_ST_st41_fsm_40))) then 
            grp_fu_88_p1 <= reg_114;
        else 
            grp_fu_88_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_96_p0_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, A_M_imag, reg_128, sinThetaA_int_reg_338, ap_sig_cseq_ST_st49_fsm_48, ap_sig_cseq_ST_st69_fsm_68)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st69_fsm_68)) then 
            grp_fu_96_p0 <= reg_128;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st49_fsm_48)) then 
            grp_fu_96_p0 <= sinThetaA_int_reg_338;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) then 
            grp_fu_96_p0 <= A_M_imag;
        else 
            grp_fu_96_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_96_p1_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, A_M_real, reg_128, sinThetaA_int_reg_338, ap_sig_cseq_ST_st49_fsm_48, ap_sig_cseq_ST_st69_fsm_68)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st69_fsm_68)) then 
            grp_fu_96_p1 <= sinThetaA_int_reg_338;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st49_fsm_48)) then 
            grp_fu_96_p1 <= reg_128;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) then 
            grp_fu_96_p1 <= A_M_real;
        else 
            grp_fu_96_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    lhs_V_cast_fu_171_p1 <= std_logic_vector(resize(unsigned(loc_V_10_fu_161_p4),9));
    loc_V_10_fu_161_p4 <= p_Val2_33_fu_157_p1(30 downto 23);
    loc_V_fu_147_p4 <= p_Val2_s_fu_142_p1(30 downto 23);
    notrhs_i1_fu_215_p2 <= "1" when (loc_V_fu_147_p4 = ap_const_lv8_0) else "0";
    notrhs_i_fu_191_p2 <= "1" when (loc_V_10_fu_161_p4 = ap_const_lv8_0) else "0";
    p_Result_19_fu_227_p3 <= p_Val2_33_fu_157_p1(31 downto 31);
    p_Result_20_fu_259_p3 <= (p_Result_16_reg_313 & ap_const_lv31_3F800000);
    p_Result_21_fu_275_p3 <= p_Val2_36_fu_271_p1(31 downto 31);
    p_Val2_33_fu_157_p1 <= A_M_imag;
    p_Val2_36_fu_271_p1 <= reg_121;
    p_Val2_s_fu_142_p1 <= A_M_real;
    r_V_1_fu_203_p2 <= std_logic_vector(unsigned(tmp_i_cast_fu_181_p1) + unsigned(ap_const_lv9_18));
    r_V_fu_175_p2 <= std_logic_vector(unsigned(lhs_V_cast_fu_171_p1) + unsigned(ap_const_lv9_18));
    ret_i_i_i_i_fu_266_p1 <= p_Result_20_fu_259_p3;
    sinThetaAdiv2_fu_251_p3 <= 
        ap_const_lv32_3F800000 when (grp_fu_107_p3(0) = '1') else 
        ap_const_lv32_0;

    sinThetaAdiv2_write_assign_phi_fu_73_p6_assign_proc : process(grp_fu_88_p2, demorgan_reg_305, demorgan5_reg_309, ap_sig_cseq_ST_st108_fsm_107, sinThetaAdiv2_write_assign_reg_69)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st108_fsm_107) and (demorgan_reg_305 = ap_const_lv1_0) and (demorgan5_reg_309 = ap_const_lv1_0))) then 
            sinThetaAdiv2_write_assign_phi_fu_73_p6 <= grp_fu_88_p2;
        else 
            sinThetaAdiv2_write_assign_phi_fu_73_p6 <= sinThetaAdiv2_write_assign_reg_69;
        end if; 
    end process;

    storemerge1_fu_235_p3 <= 
        ap_const_lv32_BF3504F3 when (p_Result_19_fu_227_p3(0) = '1') else 
        ap_const_lv32_3F3504F3;
    tanThetaAdiv_phi_fu_51_p4 <= tanThetaAdiv_reg_48;
    tmp_i_cast_fu_181_p1 <= std_logic_vector(resize(unsigned(loc_V_fu_147_p4),9));
    ult3_fu_209_p2 <= "1" when (unsigned(r_V_1_fu_203_p2) < unsigned(lhs_V_cast_fu_171_p1)) else "0";
    ult_fu_185_p2 <= "1" when (unsigned(r_V_fu_175_p2) < unsigned(tmp_i_cast_fu_181_p1)) else "0";
end behav;
