-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.2
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dut_rank is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    PCA_sorted_idx_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    PCA_sorted_idx_ce0 : OUT STD_LOGIC;
    PCA_sorted_idx_we0 : OUT STD_LOGIC;
    PCA_sorted_idx_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    PCA_sorted_idx_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    PCA_sorted_idx_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    PCA_sorted_idx_ce1 : OUT STD_LOGIC;
    PCA_sorted_idx_we1 : OUT STD_LOGIC;
    PCA_sorted_idx_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    PCA_sorted_idx_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    tsf_mat_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    tsf_mat_ce0 : OUT STD_LOGIC;
    tsf_mat_we0 : OUT STD_LOGIC;
    tsf_mat_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    S_address0 : OUT STD_LOGIC_VECTOR (19 downto 0);
    S_ce0 : OUT STD_LOGIC;
    S_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    S_address1 : OUT STD_LOGIC_VECTOR (19 downto 0);
    S_ce1 : OUT STD_LOGIC;
    S_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    U_address0 : OUT STD_LOGIC_VECTOR (19 downto 0);
    U_ce0 : OUT STD_LOGIC;
    U_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of dut_rank is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000100000";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (15 downto 0) := "0000000001000000";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (15 downto 0) := "0000000010000000";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (15 downto 0) := "0000000100000000";
    constant ap_ST_st10_fsm_9 : STD_LOGIC_VECTOR (15 downto 0) := "0000001000000000";
    constant ap_ST_st11_fsm_10 : STD_LOGIC_VECTOR (15 downto 0) := "0000010000000000";
    constant ap_ST_st12_fsm_11 : STD_LOGIC_VECTOR (15 downto 0) := "0000100000000000";
    constant ap_ST_st13_fsm_12 : STD_LOGIC_VECTOR (15 downto 0) := "0001000000000000";
    constant ap_ST_st14_fsm_13 : STD_LOGIC_VECTOR (15 downto 0) := "0010000000000000";
    constant ap_ST_st15_fsm_14 : STD_LOGIC_VECTOR (15 downto 0) := "0100000000000000";
    constant ap_ST_st16_fsm_15 : STD_LOGIC_VECTOR (15 downto 0) := "1000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv20_0 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv10_30F : STD_LOGIC_VECTOR (9 downto 0) := "1100001111";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv13_310 : STD_LOGIC_VECTOR (12 downto 0) := "0001100010000";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv10_310 : STD_LOGIC_VECTOR (9 downto 0) := "1100010000";
    constant ap_const_lv20_310 : STD_LOGIC_VECTOR (19 downto 0) := "00000000001100010000";
    constant ap_const_lv21_311 : STD_LOGIC_VECTOR (20 downto 0) := "000000000001100010001";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_33 : BOOLEAN;
    signal i_1_fu_219_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_1_reg_419 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_80 : BOOLEAN;
    signal PCA_sorted_idx_addr_1_reg_425 : STD_LOGIC_VECTOR (9 downto 0);
    signal exitcond_i_fu_213_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal PCA_sorted_idx_addr_2_reg_430 : STD_LOGIC_VECTOR (9 downto 0);
    signal temp_reg_435 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_96 : BOOLEAN;
    signal tmp_29_fu_235_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_29_reg_440 : STD_LOGIC_VECTOR (20 downto 0);
    signal PCA_sorted_idx_load_2_reg_445 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_30_fu_239_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_30_reg_450 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_34_fu_411_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_34_reg_455 : STD_LOGIC_VECTOR (20 downto 0);
    signal ap_sig_cseq_ST_st5_fsm_4 : STD_LOGIC;
    signal ap_sig_110 : BOOLEAN;
    signal tmp_40_fu_406_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_40_reg_460 : STD_LOGIC_VECTOR (20 downto 0);
    signal ap_sig_cseq_ST_st6_fsm_5 : STD_LOGIC;
    signal ap_sig_121 : BOOLEAN;
    signal S_load_reg_475 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st9_fsm_8 : STD_LOGIC;
    signal ap_sig_131 : BOOLEAN;
    signal S_load_1_reg_481 : STD_LOGIC_VECTOR (31 downto 0);
    signal next_mul2_fu_333_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal next_mul2_reg_490 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_sig_cseq_ST_st11_fsm_10 : STD_LOGIC;
    signal ap_sig_141 : BOOLEAN;
    signal i_2_fu_345_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_2_reg_498 : STD_LOGIC_VECTOR (3 downto 0);
    signal PCA_sorted_idx_addr_reg_503 : STD_LOGIC_VECTOR (9 downto 0);
    signal exitcond1_fu_339_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal phi_mul_cast_fu_356_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal phi_mul_cast_reg_508 : STD_LOGIC_VECTOR (20 downto 0);
    signal ap_sig_cseq_ST_st12_fsm_11 : STD_LOGIC;
    signal ap_sig_157 : BOOLEAN;
    signal j_1_fu_366_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal j_1_reg_516 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_42_fu_376_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_42_reg_521 : STD_LOGIC_VECTOR (12 downto 0);
    signal exitcond_fu_360_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal next_mul_fu_382_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal next_mul_reg_526 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_sig_cseq_ST_st13_fsm_12 : STD_LOGIC;
    signal ap_sig_175 : BOOLEAN;
    signal swap_i_phi_fu_139_p6 : STD_LOGIC_VECTOR (0 downto 0);
    signal swap_i_reg_134 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_184 : BOOLEAN;
    signal ap_sig_cseq_ST_st10_fsm_9 : STD_LOGIC;
    signal ap_sig_191 : BOOLEAN;
    signal tmp_39_fu_327_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_i_reg_151 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_reg_164 : STD_LOGIC_VECTOR (3 downto 0);
    signal phi_mul1_reg_175 : STD_LOGIC_VECTOR (12 downto 0);
    signal j_reg_187 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_sig_cseq_ST_st16_fsm_15 : STD_LOGIC;
    signal ap_sig_221 : BOOLEAN;
    signal phi_mul_reg_198 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_i_fu_225_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_81_i_fu_230_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_44_cast_fu_243_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_45_cast_fu_247_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_351_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_49_cast_fu_397_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_47_cast_fu_402_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st7_fsm_6 : STD_LOGIC;
    signal ap_sig_243 : BOOLEAN;
    signal ap_sig_cseq_ST_st8_fsm_7 : STD_LOGIC;
    signal ap_sig_251 : BOOLEAN;
    signal ap_sig_cseq_ST_st14_fsm_13 : STD_LOGIC;
    signal ap_sig_260 : BOOLEAN;
    signal ap_sig_cseq_ST_st15_fsm_14 : STD_LOGIC;
    signal ap_sig_268 : BOOLEAN;
    signal S_load_to_int_fu_251_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal S_load_1_to_int_fu_268_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_254_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_31_fu_264_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs_fu_291_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs_fu_285_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_33_fu_271_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_32_fu_281_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs4_fu_309_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs3_fu_303_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_35_fu_297_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_36_fu_315_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_37_fu_321_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_38_fu_209_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_41_cast_fu_372_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_41_fu_388_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_43_fu_392_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_40_fu_406_p0 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_34_fu_411_p0 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (15 downto 0);

    component dut_fcmp_32ns_32ns_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component dut_mul_mul_11ns_21s_21_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (10 downto 0);
        din1 : IN STD_LOGIC_VECTOR (20 downto 0);
        dout : OUT STD_LOGIC_VECTOR (20 downto 0) );
    end component;



begin
    dut_fcmp_32ns_32ns_1_1_U40 : component dut_fcmp_32ns_32ns_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => S_load_reg_475,
        din1 => S_load_1_reg_481,
        opcode => ap_const_lv5_4,
        dout => tmp_38_fu_209_p2);

    dut_mul_mul_11ns_21s_21_1_U41 : component dut_mul_mul_11ns_21s_21_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 11,
        din1_WIDTH => 21,
        dout_WIDTH => 21)
    port map (
        din0 => tmp_40_fu_406_p0,
        din1 => tmp_30_reg_450,
        dout => tmp_40_fu_406_p2);

    dut_mul_mul_11ns_21s_21_1_U42 : component dut_mul_mul_11ns_21s_21_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 11,
        din1_WIDTH => 21,
        dout_WIDTH => 21)
    port map (
        din0 => tmp_34_fu_411_p0,
        din1 => tmp_29_reg_440,
        dout => tmp_34_fu_411_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_i_reg_151_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9) and not((ap_const_lv1_0 = tmp_39_fu_327_p2))) or ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9) and (ap_const_lv1_0 = tmp_39_fu_327_p2)))) then 
                i_i_reg_151 <= i_1_reg_419;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
                i_i_reg_151 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    i_reg_164_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11) and not((ap_const_lv1_0 = exitcond_fu_360_p2)))) then 
                i_reg_164 <= i_2_reg_498;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (ap_const_lv1_0 = swap_i_phi_fu_139_p6) and not((exitcond_i_fu_213_p2 = ap_const_lv1_0)))) then 
                i_reg_164 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    j_reg_187_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10) and (ap_const_lv1_0 = exitcond1_fu_339_p2))) then 
                j_reg_187 <= ap_const_lv10_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15)) then 
                j_reg_187 <= j_1_reg_516;
            end if; 
        end if;
    end process;

    phi_mul1_reg_175_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11) and not((ap_const_lv1_0 = exitcond_fu_360_p2)))) then 
                phi_mul1_reg_175 <= next_mul2_reg_490;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (ap_const_lv1_0 = swap_i_phi_fu_139_p6) and not((exitcond_i_fu_213_p2 = ap_const_lv1_0)))) then 
                phi_mul1_reg_175 <= ap_const_lv13_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_198_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10) and (ap_const_lv1_0 = exitcond1_fu_339_p2))) then 
                phi_mul_reg_198 <= ap_const_lv20_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15)) then 
                phi_mul_reg_198 <= next_mul_reg_526;
            end if; 
        end if;
    end process;

    swap_i_reg_134_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9) and (ap_const_lv1_0 = tmp_39_fu_327_p2))) then 
                swap_i_reg_134 <= swap_i_reg_134;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9) and not((ap_const_lv1_0 = tmp_39_fu_327_p2)))) then 
                swap_i_reg_134 <= ap_const_lv1_1;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
                swap_i_reg_134 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (exitcond_i_fu_213_p2 = ap_const_lv1_0))) then
                PCA_sorted_idx_addr_1_reg_425 <= tmp_i_fu_225_p1(10 - 1 downto 0);
                PCA_sorted_idx_addr_2_reg_430 <= tmp_81_i_fu_230_p1(10 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10) and (ap_const_lv1_0 = exitcond1_fu_339_p2))) then
                    PCA_sorted_idx_addr_reg_503(3 downto 0) <= tmp_s_fu_351_p1(10 - 1 downto 0)(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then
                PCA_sorted_idx_load_2_reg_445 <= PCA_sorted_idx_q1;
                temp_reg_435 <= PCA_sorted_idx_q0;
                tmp_29_reg_440 <= tmp_29_fu_235_p1;
                tmp_30_reg_450 <= tmp_30_fu_239_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8)) then
                S_load_1_reg_481 <= S_q1;
                S_load_reg_475 <= S_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then
                i_1_reg_419 <= i_1_fu_219_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10)) then
                i_2_reg_498 <= i_2_fu_345_p2;
                next_mul2_reg_490 <= next_mul2_fu_333_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11)) then
                j_1_reg_516 <= j_1_fu_366_p2;
                    phi_mul_cast_reg_508(19 downto 0) <= phi_mul_cast_fu_356_p1(19 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11) and (ap_const_lv1_0 = exitcond_fu_360_p2))) then
                next_mul_reg_526 <= next_mul_fu_382_p2;
                tmp_42_reg_521 <= tmp_42_fu_376_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then
                tmp_34_reg_455 <= tmp_34_fu_411_p2;
                tmp_40_reg_460 <= tmp_40_fu_406_p2;
            end if;
        end if;
    end process;
    PCA_sorted_idx_addr_reg_503(9 downto 4) <= "000000";
    phi_mul_cast_reg_508(20) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, exitcond_i_fu_213_p2, exitcond1_fu_339_p2, exitcond_fu_360_p2, swap_i_phi_fu_139_p6)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                ap_NS_fsm <= ap_ST_st3_fsm_2;
            when ap_ST_st3_fsm_2 => 
                if (((ap_const_lv1_0 = swap_i_phi_fu_139_p6) and not((exitcond_i_fu_213_p2 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_st11_fsm_10;
                elsif ((not((exitcond_i_fu_213_p2 = ap_const_lv1_0)) and not((ap_const_lv1_0 = swap_i_phi_fu_139_p6)))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                end if;
            when ap_ST_st4_fsm_3 => 
                ap_NS_fsm <= ap_ST_st5_fsm_4;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when ap_ST_st6_fsm_5 => 
                ap_NS_fsm <= ap_ST_st7_fsm_6;
            when ap_ST_st7_fsm_6 => 
                ap_NS_fsm <= ap_ST_st8_fsm_7;
            when ap_ST_st8_fsm_7 => 
                ap_NS_fsm <= ap_ST_st9_fsm_8;
            when ap_ST_st9_fsm_8 => 
                ap_NS_fsm <= ap_ST_st10_fsm_9;
            when ap_ST_st10_fsm_9 => 
                ap_NS_fsm <= ap_ST_st3_fsm_2;
            when ap_ST_st11_fsm_10 => 
                if (not((ap_const_lv1_0 = exitcond1_fu_339_p2))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st12_fsm_11;
                end if;
            when ap_ST_st12_fsm_11 => 
                if ((ap_const_lv1_0 = exitcond_fu_360_p2)) then
                    ap_NS_fsm <= ap_ST_st13_fsm_12;
                else
                    ap_NS_fsm <= ap_ST_st11_fsm_10;
                end if;
            when ap_ST_st13_fsm_12 => 
                ap_NS_fsm <= ap_ST_st14_fsm_13;
            when ap_ST_st14_fsm_13 => 
                ap_NS_fsm <= ap_ST_st15_fsm_14;
            when ap_ST_st15_fsm_14 => 
                ap_NS_fsm <= ap_ST_st16_fsm_15;
            when ap_ST_st16_fsm_15 => 
                ap_NS_fsm <= ap_ST_st12_fsm_11;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXX";
        end case;
    end process;

    PCA_sorted_idx_address0_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2, PCA_sorted_idx_addr_1_reg_425, PCA_sorted_idx_addr_reg_503, ap_sig_cseq_ST_st12_fsm_11, ap_sig_cseq_ST_st10_fsm_9, tmp_i_fu_225_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9)) then 
            PCA_sorted_idx_address0 <= PCA_sorted_idx_addr_1_reg_425;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11)) then 
            PCA_sorted_idx_address0 <= PCA_sorted_idx_addr_reg_503;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            PCA_sorted_idx_address0 <= tmp_i_fu_225_p1(10 - 1 downto 0);
        else 
            PCA_sorted_idx_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    PCA_sorted_idx_address1_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2, PCA_sorted_idx_addr_2_reg_430, ap_sig_cseq_ST_st10_fsm_9, tmp_81_i_fu_230_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9)) then 
            PCA_sorted_idx_address1 <= PCA_sorted_idx_addr_2_reg_430;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            PCA_sorted_idx_address1 <= tmp_81_i_fu_230_p1(10 - 1 downto 0);
        else 
            PCA_sorted_idx_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    PCA_sorted_idx_ce0_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st12_fsm_11, ap_sig_cseq_ST_st10_fsm_9)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) or (ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11) or (ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9))) then 
            PCA_sorted_idx_ce0 <= ap_const_logic_1;
        else 
            PCA_sorted_idx_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    PCA_sorted_idx_ce1_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st10_fsm_9)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) or (ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9))) then 
            PCA_sorted_idx_ce1 <= ap_const_logic_1;
        else 
            PCA_sorted_idx_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    PCA_sorted_idx_d0 <= PCA_sorted_idx_load_2_reg_445;
    PCA_sorted_idx_d1 <= temp_reg_435;

    PCA_sorted_idx_we0_assign_proc : process(ap_sig_cseq_ST_st10_fsm_9, tmp_39_fu_327_p2)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9) and not((ap_const_lv1_0 = tmp_39_fu_327_p2))))) then 
            PCA_sorted_idx_we0 <= ap_const_logic_1;
        else 
            PCA_sorted_idx_we0 <= ap_const_logic_0;
        end if; 
    end process;


    PCA_sorted_idx_we1_assign_proc : process(ap_sig_cseq_ST_st10_fsm_9, tmp_39_fu_327_p2)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9) and not((ap_const_lv1_0 = tmp_39_fu_327_p2))))) then 
            PCA_sorted_idx_we1 <= ap_const_logic_1;
        else 
            PCA_sorted_idx_we1 <= ap_const_logic_0;
        end if; 
    end process;

    S_address0 <= tmp_44_cast_fu_243_p1(20 - 1 downto 0);
    S_address1 <= tmp_45_cast_fu_247_p1(20 - 1 downto 0);

    S_ce0_assign_proc : process(ap_sig_cseq_ST_st6_fsm_5, ap_sig_cseq_ST_st9_fsm_8, ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st8_fsm_7)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) or (ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8) or (ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) or (ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7))) then 
            S_ce0 <= ap_const_logic_1;
        else 
            S_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    S_ce1_assign_proc : process(ap_sig_cseq_ST_st6_fsm_5, ap_sig_cseq_ST_st9_fsm_8, ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st8_fsm_7)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) or (ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8) or (ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) or (ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7))) then 
            S_ce1 <= ap_const_logic_1;
        else 
            S_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    S_load_1_to_int_fu_268_p1 <= S_load_1_reg_481;
    S_load_to_int_fu_251_p1 <= S_load_reg_475;
    U_address0 <= tmp_49_cast_fu_397_p1(20 - 1 downto 0);

    U_ce0_assign_proc : process(ap_sig_cseq_ST_st13_fsm_12, ap_sig_cseq_ST_st16_fsm_15, ap_sig_cseq_ST_st14_fsm_13, ap_sig_cseq_ST_st15_fsm_14)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12) or (ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15) or (ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13) or (ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14))) then 
            U_ce0 <= ap_const_logic_1;
        else 
            U_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, ap_sig_cseq_ST_st11_fsm_10, exitcond1_fu_339_p2)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10) and not((ap_const_lv1_0 = exitcond1_fu_339_p2))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_sig_cseq_ST_st11_fsm_10, exitcond1_fu_339_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10) and not((ap_const_lv1_0 = exitcond1_fu_339_p2)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_110_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_110 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    ap_sig_121_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_121 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    ap_sig_131_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_131 <= (ap_const_lv1_1 = ap_CS_fsm(8 downto 8));
    end process;


    ap_sig_141_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_141 <= (ap_const_lv1_1 = ap_CS_fsm(10 downto 10));
    end process;


    ap_sig_157_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_157 <= (ap_const_lv1_1 = ap_CS_fsm(11 downto 11));
    end process;


    ap_sig_175_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_175 <= (ap_const_lv1_1 = ap_CS_fsm(12 downto 12));
    end process;


    ap_sig_184_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_184 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    ap_sig_191_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_191 <= (ap_const_lv1_1 = ap_CS_fsm(9 downto 9));
    end process;


    ap_sig_221_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_221 <= (ap_const_lv1_1 = ap_CS_fsm(15 downto 15));
    end process;


    ap_sig_243_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_243 <= (ap_const_lv1_1 = ap_CS_fsm(6 downto 6));
    end process;


    ap_sig_251_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_251 <= (ap_const_lv1_1 = ap_CS_fsm(7 downto 7));
    end process;


    ap_sig_260_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_260 <= (ap_const_lv1_1 = ap_CS_fsm(13 downto 13));
    end process;


    ap_sig_268_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_268 <= (ap_const_lv1_1 = ap_CS_fsm(14 downto 14));
    end process;


    ap_sig_33_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_33 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    ap_sig_80_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_80 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    ap_sig_96_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_96 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    ap_sig_cseq_ST_st10_fsm_9_assign_proc : process(ap_sig_191)
    begin
        if (ap_sig_191) then 
            ap_sig_cseq_ST_st10_fsm_9 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st10_fsm_9 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st11_fsm_10_assign_proc : process(ap_sig_141)
    begin
        if (ap_sig_141) then 
            ap_sig_cseq_ST_st11_fsm_10 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st11_fsm_10 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st12_fsm_11_assign_proc : process(ap_sig_157)
    begin
        if (ap_sig_157) then 
            ap_sig_cseq_ST_st12_fsm_11 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st12_fsm_11 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st13_fsm_12_assign_proc : process(ap_sig_175)
    begin
        if (ap_sig_175) then 
            ap_sig_cseq_ST_st13_fsm_12 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st13_fsm_12 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st14_fsm_13_assign_proc : process(ap_sig_260)
    begin
        if (ap_sig_260) then 
            ap_sig_cseq_ST_st14_fsm_13 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st14_fsm_13 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st15_fsm_14_assign_proc : process(ap_sig_268)
    begin
        if (ap_sig_268) then 
            ap_sig_cseq_ST_st15_fsm_14 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st15_fsm_14 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st16_fsm_15_assign_proc : process(ap_sig_221)
    begin
        if (ap_sig_221) then 
            ap_sig_cseq_ST_st16_fsm_15 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st16_fsm_15 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_33)
    begin
        if (ap_sig_33) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_184)
    begin
        if (ap_sig_184) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_80)
    begin
        if (ap_sig_80) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_96)
    begin
        if (ap_sig_96) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st5_fsm_4_assign_proc : process(ap_sig_110)
    begin
        if (ap_sig_110) then 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st6_fsm_5_assign_proc : process(ap_sig_121)
    begin
        if (ap_sig_121) then 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st7_fsm_6_assign_proc : process(ap_sig_243)
    begin
        if (ap_sig_243) then 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st8_fsm_7_assign_proc : process(ap_sig_251)
    begin
        if (ap_sig_251) then 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st9_fsm_8_assign_proc : process(ap_sig_131)
    begin
        if (ap_sig_131) then 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_339_p2 <= "1" when (i_reg_164 = ap_const_lv4_A) else "0";
    exitcond_fu_360_p2 <= "1" when (j_reg_187 = ap_const_lv10_310) else "0";
    exitcond_i_fu_213_p2 <= "1" when (i_i_reg_151 = ap_const_lv10_30F) else "0";
    i_1_fu_219_p2 <= std_logic_vector(unsigned(i_i_reg_151) + unsigned(ap_const_lv10_1));
    i_2_fu_345_p2 <= std_logic_vector(unsigned(i_reg_164) + unsigned(ap_const_lv4_1));
    j_1_fu_366_p2 <= std_logic_vector(unsigned(j_reg_187) + unsigned(ap_const_lv10_1));
    next_mul2_fu_333_p2 <= std_logic_vector(unsigned(phi_mul1_reg_175) + unsigned(ap_const_lv13_310));
    next_mul_fu_382_p2 <= std_logic_vector(unsigned(ap_const_lv20_310) + unsigned(phi_mul_reg_198));
    notlhs3_fu_303_p2 <= "0" when (tmp_33_fu_271_p4 = ap_const_lv8_FF) else "1";
    notlhs_fu_285_p2 <= "0" when (tmp_fu_254_p4 = ap_const_lv8_FF) else "1";
    notrhs4_fu_309_p2 <= "1" when (tmp_32_fu_281_p1 = ap_const_lv23_0) else "0";
    notrhs_fu_291_p2 <= "1" when (tmp_31_fu_264_p1 = ap_const_lv23_0) else "0";
    phi_mul_cast_fu_356_p1 <= std_logic_vector(resize(unsigned(phi_mul_reg_198),21));
    swap_i_phi_fu_139_p6 <= swap_i_reg_134;
    tmp_29_fu_235_p1 <= PCA_sorted_idx_q0(21 - 1 downto 0);
    tmp_30_fu_239_p1 <= PCA_sorted_idx_q1(21 - 1 downto 0);
    tmp_31_fu_264_p1 <= S_load_to_int_fu_251_p1(23 - 1 downto 0);
    tmp_32_fu_281_p1 <= S_load_1_to_int_fu_268_p1(23 - 1 downto 0);
    tmp_33_fu_271_p4 <= S_load_1_to_int_fu_268_p1(30 downto 23);
    tmp_34_fu_411_p0 <= ap_const_lv21_311(11 - 1 downto 0);
    tmp_35_fu_297_p2 <= (notrhs_fu_291_p2 or notlhs_fu_285_p2);
    tmp_36_fu_315_p2 <= (notrhs4_fu_309_p2 or notlhs3_fu_303_p2);
    tmp_37_fu_321_p2 <= (tmp_35_fu_297_p2 and tmp_36_fu_315_p2);
    tmp_39_fu_327_p2 <= (tmp_37_fu_321_p2 and tmp_38_fu_209_p2);
    tmp_40_fu_406_p0 <= ap_const_lv21_311(11 - 1 downto 0);
    tmp_41_cast_fu_372_p1 <= std_logic_vector(resize(unsigned(j_reg_187),13));
    tmp_41_fu_388_p1 <= PCA_sorted_idx_q0(21 - 1 downto 0);
    tmp_42_fu_376_p2 <= std_logic_vector(unsigned(tmp_41_cast_fu_372_p1) + unsigned(phi_mul1_reg_175));
    tmp_43_fu_392_p2 <= std_logic_vector(unsigned(tmp_41_fu_388_p1) + unsigned(phi_mul_cast_reg_508));
        tmp_44_cast_fu_243_p1 <= std_logic_vector(resize(signed(tmp_34_reg_455),64));

        tmp_45_cast_fu_247_p1 <= std_logic_vector(resize(signed(tmp_40_reg_460),64));

    tmp_47_cast_fu_402_p1 <= std_logic_vector(resize(unsigned(tmp_42_reg_521),64));
    tmp_49_cast_fu_397_p1 <= std_logic_vector(resize(unsigned(tmp_43_fu_392_p2),64));
    tmp_81_i_fu_230_p1 <= std_logic_vector(resize(unsigned(i_1_fu_219_p2),64));
    tmp_fu_254_p4 <= S_load_to_int_fu_251_p1(30 downto 23);
    tmp_i_fu_225_p1 <= std_logic_vector(resize(unsigned(i_i_reg_151),64));
    tmp_s_fu_351_p1 <= std_logic_vector(resize(unsigned(i_reg_164),64));
    tsf_mat_address0 <= tmp_47_cast_fu_402_p1(13 - 1 downto 0);

    tsf_mat_ce0_assign_proc : process(ap_sig_cseq_ST_st16_fsm_15)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15)) then 
            tsf_mat_ce0 <= ap_const_logic_1;
        else 
            tsf_mat_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    tsf_mat_d0 <= U_q0;

    tsf_mat_we0_assign_proc : process(ap_sig_cseq_ST_st16_fsm_15)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15))) then 
            tsf_mat_we0 <= ap_const_logic_1;
        else 
            tsf_mat_we0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
