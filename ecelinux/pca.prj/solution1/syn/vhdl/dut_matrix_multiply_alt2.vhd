-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.2
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dut_matrix_multiply_alt2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    A_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    A_ce0 : OUT STD_LOGIC;
    A_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    B_address0 : OUT STD_LOGIC_VECTOR (16 downto 0);
    B_ce0 : OUT STD_LOGIC;
    B_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    C_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    C_ce0 : OUT STD_LOGIC;
    C_we0 : OUT STD_LOGIC;
    C_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of dut_matrix_multiply_alt2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (14 downto 0) := "000000000001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (14 downto 0) := "000000000010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (14 downto 0) := "000000000100000";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (14 downto 0) := "000000001000000";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (14 downto 0) := "000000010000000";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (14 downto 0) := "000000100000000";
    constant ap_ST_st10_fsm_9 : STD_LOGIC_VECTOR (14 downto 0) := "000001000000000";
    constant ap_ST_st11_fsm_10 : STD_LOGIC_VECTOR (14 downto 0) := "000010000000000";
    constant ap_ST_st12_fsm_11 : STD_LOGIC_VECTOR (14 downto 0) := "000100000000000";
    constant ap_ST_st13_fsm_12 : STD_LOGIC_VECTOR (14 downto 0) := "001000000000000";
    constant ap_ST_st14_fsm_13 : STD_LOGIC_VECTOR (14 downto 0) := "010000000000000";
    constant ap_ST_st15_fsm_14 : STD_LOGIC_VECTOR (14 downto 0) := "100000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv20_0 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv20_BF680 : STD_LOGIC_VECTOR (19 downto 0) := "10111111011010000000";
    constant ap_const_lv20_1 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000001";
    constant ap_const_lv11_3E8 : STD_LOGIC_VECTOR (10 downto 0) := "01111101000";
    constant ap_const_lv7_64 : STD_LOGIC_VECTOR (6 downto 0) := "1100100";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv10_30F : STD_LOGIC_VECTOR (9 downto 0) := "1100001111";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv11_64 : STD_LOGIC_VECTOR (10 downto 0) := "00001100100";
    constant ap_const_lv17_64 : STD_LOGIC_VECTOR (16 downto 0) := "00000000001100100";
    constant ap_const_lv14_310 : STD_LOGIC_VECTOR (13 downto 0) := "00001100010000";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_32 : BOOLEAN;
    signal exitcond_flatten2_fu_190_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten2_reg_389 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_63 : BOOLEAN;
    signal indvar_flatten_next2_fu_196_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal indvar_flatten_next2_reg_393 : STD_LOGIC_VECTOR (19 downto 0);
    signal exitcond_flatten_fu_202_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_398 : STD_LOGIC_VECTOR (0 downto 0);
    signal Col_assign_mid2_fu_246_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal Col_assign_mid2_reg_406 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_40_mid2_fu_254_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_40_mid2_reg_413 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_mid2_fu_280_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_mid2_reg_420 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_83 : BOOLEAN;
    signal tmp_mid2_24_fu_299_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_mid2_24_reg_424 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_i_mid2_v_fu_306_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_i_i_mid2_v_reg_428 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_381_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_55_reg_434 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_98 : BOOLEAN;
    signal ap_sig_cseq_ST_st5_fsm_4 : STD_LOGIC;
    signal ap_sig_108 : BOOLEAN;
    signal C_addr_reg_454 : STD_LOGIC_VECTOR (9 downto 0);
    signal sum_mult_addr_reg_459 : STD_LOGIC_VECTOR (9 downto 0);
    signal sum_mult_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_mult_load_reg_469 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st6_fsm_5 : STD_LOGIC;
    signal ap_sig_122 : BOOLEAN;
    signal grp_fu_183_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mult_reg_474 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st8_fsm_7 : STD_LOGIC;
    signal ap_sig_131 : BOOLEAN;
    signal grp_fu_179_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_42_reg_479 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st13_fsm_12 : STD_LOGIC;
    signal ap_sig_140 : BOOLEAN;
    signal c_fu_345_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_sig_cseq_ST_st14_fsm_13 : STD_LOGIC;
    signal ap_sig_153 : BOOLEAN;
    signal indvar_flatten_next_fu_356_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal sum_mult_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal sum_mult_ce0 : STD_LOGIC;
    signal sum_mult_we0 : STD_LOGIC;
    signal sum_mult_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvar_flatten2_reg_122 : STD_LOGIC_VECTOR (19 downto 0);
    signal Col_assign_3_reg_133 : STD_LOGIC_VECTOR (9 downto 0);
    signal indvar_flatten_reg_145 : STD_LOGIC_VECTOR (10 downto 0);
    signal Row_assign_reg_157 : STD_LOGIC_VECTOR (3 downto 0);
    signal Col_assign_reg_168 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_62_cast_fu_323_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_64_cast_fu_330_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_65_cast_fu_340_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st9_fsm_8 : STD_LOGIC;
    signal ap_sig_208 : BOOLEAN;
    signal exitcond_fu_222_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_exitcond_flatten_fu_216_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Row_assign_mid_fu_208_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond_mid_fu_228_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_53_fu_240_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_fu_234_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal k_fu_262_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_mid1_fu_268_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp2_fu_274_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_mid1_23_fu_287_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_293_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_372_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_363_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal indvar_flatten_op_fu_350_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_363_p0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_363_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_363_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_372_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_372_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_372_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_381_p0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_381_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_381_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_sig_cseq_ST_st15_fsm_14 : STD_LOGIC;
    signal ap_sig_365 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_363_p00 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_363_p20 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_372_p00 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_372_p20 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_381_p00 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_381_p20 : STD_LOGIC_VECTOR (13 downto 0);

    component dut_fadd_32ns_32ns_32_5_full_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dut_fmul_32ns_32ns_32_4_max_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dut_mac_muladd_4ns_8ns_7ns_11_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (3 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (6 downto 0);
        dout : OUT STD_LOGIC_VECTOR (10 downto 0) );
    end component;


    component dut_mac_muladd_10ns_8ns_7ns_17_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (9 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (6 downto 0);
        dout : OUT STD_LOGIC_VECTOR (16 downto 0) );
    end component;


    component dut_mac_muladd_4ns_11ns_10ns_14_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (3 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        din2 : IN STD_LOGIC_VECTOR (9 downto 0);
        dout : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component dut_matrix_multiply_alt2_sum_mult IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    sum_mult_U : component dut_matrix_multiply_alt2_sum_mult
    generic map (
        DataWidth => 32,
        AddressRange => 1000,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sum_mult_address0,
        ce0 => sum_mult_ce0,
        we0 => sum_mult_we0,
        d0 => sum_mult_d0,
        q0 => sum_mult_q0);

    dut_fadd_32ns_32ns_32_5_full_dsp_U47 : component dut_fadd_32ns_32ns_32_5_full_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sum_mult_load_reg_469,
        din1 => mult_reg_474,
        ce => ap_const_logic_1,
        dout => grp_fu_179_p2);

    dut_fmul_32ns_32ns_32_4_max_dsp_U48 : component dut_fmul_32ns_32ns_32_4_max_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => A_q0,
        din1 => B_q0,
        ce => ap_const_logic_1,
        dout => grp_fu_183_p2);

    dut_mac_muladd_4ns_8ns_7ns_11_1_U49 : component dut_mac_muladd_4ns_8ns_7ns_11_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 4,
        din1_WIDTH => 8,
        din2_WIDTH => 7,
        dout_WIDTH => 11)
    port map (
        din0 => grp_fu_363_p0,
        din1 => grp_fu_363_p1,
        din2 => grp_fu_363_p2,
        dout => grp_fu_363_p3);

    dut_mac_muladd_10ns_8ns_7ns_17_1_U50 : component dut_mac_muladd_10ns_8ns_7ns_17_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 8,
        din2_WIDTH => 7,
        dout_WIDTH => 17)
    port map (
        din0 => grp_fu_372_p0,
        din1 => grp_fu_372_p1,
        din2 => grp_fu_372_p2,
        dout => grp_fu_372_p3);

    dut_mac_muladd_4ns_11ns_10ns_14_1_U51 : component dut_mac_muladd_4ns_11ns_10ns_14_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 4,
        din1_WIDTH => 11,
        din2_WIDTH => 10,
        dout_WIDTH => 14)
    port map (
        din0 => grp_fu_381_p0,
        din1 => grp_fu_381_p1,
        din2 => grp_fu_381_p2,
        dout => grp_fu_381_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    Col_assign_3_reg_133_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten2_reg_389 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13))) then 
                Col_assign_3_reg_133 <= tmp_i_i_mid2_v_reg_428;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                Col_assign_3_reg_133 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    Col_assign_reg_168_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten2_reg_389 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13))) then 
                Col_assign_reg_168 <= c_fu_345_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                Col_assign_reg_168 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    Row_assign_reg_157_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten2_reg_389 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13))) then 
                Row_assign_reg_157 <= tmp_40_mid2_reg_413;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                Row_assign_reg_157 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    indvar_flatten2_reg_122_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten2_reg_389 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13))) then 
                indvar_flatten2_reg_122 <= indvar_flatten_next2_reg_393;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                indvar_flatten2_reg_122 <= ap_const_lv20_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_145_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten2_reg_389 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13))) then 
                indvar_flatten_reg_145 <= indvar_flatten_next_fu_356_p3;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                indvar_flatten_reg_145 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then
                C_addr_reg_454 <= tmp_65_cast_fu_340_p1(10 - 1 downto 0);
                sum_mult_addr_reg_459 <= tmp_65_cast_fu_340_p1(10 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond_flatten2_fu_190_p2 = ap_const_lv1_0))) then
                Col_assign_mid2_reg_406 <= Col_assign_mid2_fu_246_p3;
                exitcond_flatten_reg_398 <= exitcond_flatten_fu_202_p2;
                tmp_40_mid2_reg_413 <= tmp_40_mid2_fu_254_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then
                exitcond_flatten2_reg_389 <= exitcond_flatten2_fu_190_p2;
                indvar_flatten_next2_reg_393 <= indvar_flatten_next2_fu_196_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then
                mult_reg_474 <= grp_fu_183_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then
                sum_mult_load_reg_469 <= sum_mult_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12) and (exitcond_flatten2_reg_389 = ap_const_lv1_0) and (ap_const_lv1_0 = tmp_mid2_reg_420))) then
                tmp_42_reg_479 <= grp_fu_179_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then
                tmp_55_reg_434 <= grp_fu_381_p3;
                tmp_i_i_mid2_v_reg_428 <= tmp_i_i_mid2_v_fu_306_p3;
                tmp_mid2_24_reg_424 <= tmp_mid2_24_fu_299_p3;
                tmp_mid2_reg_420 <= tmp_mid2_fu_280_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, exitcond_flatten2_fu_190_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if ((exitcond_flatten2_fu_190_p2 = ap_const_lv1_0)) then
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_st15_fsm_14;
                end if;
            when ap_ST_st3_fsm_2 => 
                ap_NS_fsm <= ap_ST_st4_fsm_3;
            when ap_ST_st4_fsm_3 => 
                ap_NS_fsm <= ap_ST_st5_fsm_4;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when ap_ST_st6_fsm_5 => 
                ap_NS_fsm <= ap_ST_st7_fsm_6;
            when ap_ST_st7_fsm_6 => 
                ap_NS_fsm <= ap_ST_st8_fsm_7;
            when ap_ST_st8_fsm_7 => 
                ap_NS_fsm <= ap_ST_st9_fsm_8;
            when ap_ST_st9_fsm_8 => 
                ap_NS_fsm <= ap_ST_st10_fsm_9;
            when ap_ST_st10_fsm_9 => 
                ap_NS_fsm <= ap_ST_st11_fsm_10;
            when ap_ST_st11_fsm_10 => 
                ap_NS_fsm <= ap_ST_st12_fsm_11;
            when ap_ST_st12_fsm_11 => 
                ap_NS_fsm <= ap_ST_st13_fsm_12;
            when ap_ST_st13_fsm_12 => 
                ap_NS_fsm <= ap_ST_st14_fsm_13;
            when ap_ST_st14_fsm_13 => 
                ap_NS_fsm <= ap_ST_st2_fsm_1;
            when ap_ST_st15_fsm_14 => 
                ap_NS_fsm <= ap_ST_st1_fsm_0;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXX";
        end case;
    end process;
    A_address0 <= tmp_62_cast_fu_323_p1(13 - 1 downto 0);

    A_ce0_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            A_ce0 <= ap_const_logic_1;
        else 
            A_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    B_address0 <= tmp_64_cast_fu_330_p1(17 - 1 downto 0);

    B_ce0_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            B_ce0 <= ap_const_logic_1;
        else 
            B_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    C_address0 <= C_addr_reg_454;

    C_ce0_assign_proc : process(ap_sig_cseq_ST_st14_fsm_13)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13)) then 
            C_ce0 <= ap_const_logic_1;
        else 
            C_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    C_d0 <= tmp_42_reg_479;

    C_we0_assign_proc : process(exitcond_flatten2_reg_389, tmp_mid2_reg_420, tmp_mid2_24_reg_424, ap_sig_cseq_ST_st14_fsm_13)
    begin
        if ((((exitcond_flatten2_reg_389 = ap_const_lv1_0) and (ap_const_lv1_0 = tmp_mid2_reg_420) and (ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13) and not((ap_const_lv1_0 = tmp_mid2_24_reg_424))))) then 
            C_we0 <= ap_const_logic_1;
        else 
            C_we0 <= ap_const_logic_0;
        end if; 
    end process;

    Col_assign_mid2_fu_246_p3 <= 
        ap_const_lv7_0 when (tmp_53_fu_240_p2(0) = '1') else 
        Col_assign_reg_168;
    Row_assign_mid_fu_208_p3 <= 
        ap_const_lv4_0 when (exitcond_flatten_fu_202_p2(0) = '1') else 
        Row_assign_reg_157;

    ap_done_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, ap_sig_cseq_ST_st15_fsm_14)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) or (ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_sig_cseq_ST_st15_fsm_14)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_108_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_108 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    ap_sig_122_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_122 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    ap_sig_131_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_131 <= (ap_const_lv1_1 = ap_CS_fsm(7 downto 7));
    end process;


    ap_sig_140_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_140 <= (ap_const_lv1_1 = ap_CS_fsm(12 downto 12));
    end process;


    ap_sig_153_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_153 <= (ap_const_lv1_1 = ap_CS_fsm(13 downto 13));
    end process;


    ap_sig_208_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_208 <= (ap_const_lv1_1 = ap_CS_fsm(8 downto 8));
    end process;


    ap_sig_32_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_32 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    ap_sig_365_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_365 <= (ap_const_lv1_1 = ap_CS_fsm(14 downto 14));
    end process;


    ap_sig_63_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_63 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    ap_sig_83_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_83 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    ap_sig_98_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_98 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    ap_sig_cseq_ST_st13_fsm_12_assign_proc : process(ap_sig_140)
    begin
        if (ap_sig_140) then 
            ap_sig_cseq_ST_st13_fsm_12 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st13_fsm_12 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st14_fsm_13_assign_proc : process(ap_sig_153)
    begin
        if (ap_sig_153) then 
            ap_sig_cseq_ST_st14_fsm_13 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st14_fsm_13 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st15_fsm_14_assign_proc : process(ap_sig_365)
    begin
        if (ap_sig_365) then 
            ap_sig_cseq_ST_st15_fsm_14 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st15_fsm_14 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_32)
    begin
        if (ap_sig_32) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_63)
    begin
        if (ap_sig_63) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_83)
    begin
        if (ap_sig_83) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_98)
    begin
        if (ap_sig_98) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st5_fsm_4_assign_proc : process(ap_sig_108)
    begin
        if (ap_sig_108) then 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st6_fsm_5_assign_proc : process(ap_sig_122)
    begin
        if (ap_sig_122) then 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st8_fsm_7_assign_proc : process(ap_sig_131)
    begin
        if (ap_sig_131) then 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st9_fsm_8_assign_proc : process(ap_sig_208)
    begin
        if (ap_sig_208) then 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_0;
        end if; 
    end process;

    c_fu_345_p2 <= std_logic_vector(unsigned(Col_assign_mid2_reg_406) + unsigned(ap_const_lv7_1));
    exitcond_flatten2_fu_190_p2 <= "1" when (indvar_flatten2_reg_122 = ap_const_lv20_BF680) else "0";
    exitcond_flatten_fu_202_p2 <= "1" when (indvar_flatten_reg_145 = ap_const_lv11_3E8) else "0";
    exitcond_fu_222_p2 <= "1" when (Col_assign_reg_168 = ap_const_lv7_64) else "0";
    exitcond_mid_fu_228_p2 <= (exitcond_fu_222_p2 and not_exitcond_flatten_fu_216_p2);
    grp_fu_363_p0 <= grp_fu_363_p00(4 - 1 downto 0);
    grp_fu_363_p00 <= std_logic_vector(resize(unsigned(tmp_40_mid2_reg_413),11));
    grp_fu_363_p1 <= ap_const_lv11_64(8 - 1 downto 0);
    grp_fu_363_p2 <= grp_fu_363_p20(7 - 1 downto 0);
    grp_fu_363_p20 <= std_logic_vector(resize(unsigned(Col_assign_mid2_reg_406),11));
    grp_fu_372_p0 <= grp_fu_372_p00(10 - 1 downto 0);
    grp_fu_372_p00 <= std_logic_vector(resize(unsigned(tmp_i_i_mid2_v_reg_428),17));
    grp_fu_372_p1 <= ap_const_lv17_64(8 - 1 downto 0);
    grp_fu_372_p2 <= grp_fu_372_p20(7 - 1 downto 0);
    grp_fu_372_p20 <= std_logic_vector(resize(unsigned(Col_assign_mid2_reg_406),17));
    grp_fu_381_p0 <= grp_fu_381_p00(4 - 1 downto 0);
    grp_fu_381_p00 <= std_logic_vector(resize(unsigned(tmp_40_mid2_reg_413),14));
    grp_fu_381_p1 <= ap_const_lv14_310(11 - 1 downto 0);
    grp_fu_381_p2 <= grp_fu_381_p20(10 - 1 downto 0);
    grp_fu_381_p20 <= std_logic_vector(resize(unsigned(tmp_i_i_mid2_v_fu_306_p3),14));
    indvar_flatten_next2_fu_196_p2 <= std_logic_vector(unsigned(indvar_flatten2_reg_122) + unsigned(ap_const_lv20_1));
    indvar_flatten_next_fu_356_p3 <= 
        ap_const_lv11_1 when (exitcond_flatten_reg_398(0) = '1') else 
        indvar_flatten_op_fu_350_p2;
    indvar_flatten_op_fu_350_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_145) + unsigned(ap_const_lv11_1));
    k_fu_262_p2 <= std_logic_vector(unsigned(Col_assign_3_reg_133) + unsigned(ap_const_lv10_1));
    not_exitcond_flatten_fu_216_p2 <= (exitcond_flatten_fu_202_p2 xor ap_const_lv1_1);
    r_fu_234_p2 <= std_logic_vector(unsigned(Row_assign_mid_fu_208_p3) + unsigned(ap_const_lv4_1));

    sum_mult_address0_assign_proc : process(ap_sig_cseq_ST_st5_fsm_4, sum_mult_addr_reg_459, ap_sig_cseq_ST_st8_fsm_7, ap_sig_cseq_ST_st14_fsm_13, tmp_65_cast_fu_340_p1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) or (ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13))) then 
            sum_mult_address0 <= sum_mult_addr_reg_459;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            sum_mult_address0 <= tmp_65_cast_fu_340_p1(10 - 1 downto 0);
        else 
            sum_mult_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    sum_mult_ce0_assign_proc : process(ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st8_fsm_7, ap_sig_cseq_ST_st14_fsm_13)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or (ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) or (ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13))) then 
            sum_mult_ce0 <= ap_const_logic_1;
        else 
            sum_mult_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sum_mult_d0_assign_proc : process(grp_fu_183_p2, ap_sig_cseq_ST_st8_fsm_7, tmp_42_reg_479, ap_sig_cseq_ST_st14_fsm_13)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13)) then 
            sum_mult_d0 <= tmp_42_reg_479;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then 
            sum_mult_d0 <= grp_fu_183_p2;
        else 
            sum_mult_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    sum_mult_we0_assign_proc : process(exitcond_flatten2_reg_389, tmp_mid2_reg_420, tmp_mid2_24_reg_424, ap_sig_cseq_ST_st8_fsm_7, ap_sig_cseq_ST_st14_fsm_13)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) and not((ap_const_lv1_0 = tmp_mid2_reg_420))) or ((exitcond_flatten2_reg_389 = ap_const_lv1_0) and (ap_const_lv1_0 = tmp_mid2_reg_420) and (ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13) and (ap_const_lv1_0 = tmp_mid2_24_reg_424)))) then 
            sum_mult_we0 <= ap_const_logic_1;
        else 
            sum_mult_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp2_fu_274_p2 <= "1" when (Col_assign_3_reg_133 = ap_const_lv10_0) else "0";
    tmp_1_fu_293_p2 <= "1" when (Col_assign_3_reg_133 = ap_const_lv10_30F) else "0";
    tmp_40_mid2_fu_254_p3 <= 
        r_fu_234_p2 when (exitcond_mid_fu_228_p2(0) = '1') else 
        Row_assign_mid_fu_208_p3;
    tmp_53_fu_240_p2 <= (exitcond_mid_fu_228_p2 or exitcond_flatten_fu_202_p2);
        tmp_62_cast_fu_323_p1 <= std_logic_vector(resize(signed(tmp_55_reg_434),64));

    tmp_64_cast_fu_330_p1 <= std_logic_vector(resize(unsigned(grp_fu_372_p3),64));
        tmp_65_cast_fu_340_p1 <= std_logic_vector(resize(signed(grp_fu_363_p3),64));

    tmp_i_i_mid2_v_fu_306_p3 <= 
        k_fu_262_p2 when (exitcond_flatten_reg_398(0) = '1') else 
        Col_assign_3_reg_133;
    tmp_mid1_23_fu_287_p2 <= "1" when (k_fu_262_p2 = ap_const_lv10_30F) else "0";
    tmp_mid1_fu_268_p2 <= "1" when (k_fu_262_p2 = ap_const_lv10_0) else "0";
    tmp_mid2_24_fu_299_p3 <= 
        tmp_mid1_23_fu_287_p2 when (exitcond_flatten_reg_398(0) = '1') else 
        tmp_1_fu_293_p2;
    tmp_mid2_fu_280_p3 <= 
        tmp_mid1_fu_268_p2 when (exitcond_flatten_reg_398(0) = '1') else 
        tmp2_fu_274_p2;
end behav;
