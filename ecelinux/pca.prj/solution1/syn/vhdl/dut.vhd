-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.2
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dut is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    strm_in_V_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    strm_in_V_V_empty_n : IN STD_LOGIC;
    strm_in_V_V_read : OUT STD_LOGIC;
    strm_out_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    strm_out_V_full_n : IN STD_LOGIC;
    strm_out_V_write : OUT STD_LOGIC );
end;


architecture behav of dut is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "dut,hls_ip_2016_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.090000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=16920,HLS_SYN_DSP=99,HLS_SYN_FF=16219,HLS_SYN_LUT=24123}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100000000";
    constant ap_ST_st10_fsm_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000000000";
    constant ap_ST_st11_fsm_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000010000000000";
    constant ap_ST_st12_fsm_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000100000000000";
    constant ap_ST_st13_fsm_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001000000000000";
    constant ap_ST_st14_fsm_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000010000000000000";
    constant ap_ST_st15_fsm_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000100000000000000";
    constant ap_ST_st16_fsm_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000001000000000000000";
    constant ap_ST_st17_fsm_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000010000000000000000";
    constant ap_ST_st18_fsm_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000100000000000000000";
    constant ap_ST_st19_fsm_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000001000000000000000000";
    constant ap_ST_st20_fsm_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000010000000000000000000";
    constant ap_ST_st21_fsm_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000100000000000000000000";
    constant ap_ST_st22_fsm_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000001000000000000000000000";
    constant ap_ST_st23_fsm_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000010000000000000000000000";
    constant ap_ST_st24_fsm_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000100000000000000000000000";
    constant ap_ST_st25_fsm_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000001000000000000000000000000";
    constant ap_ST_st26_fsm_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000010000000000000000000000000";
    constant ap_ST_st27_fsm_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000100000000000000000000000000";
    constant ap_ST_st28_fsm_27 : STD_LOGIC_VECTOR (31 downto 0) := "00001000000000000000000000000000";
    constant ap_ST_st29_fsm_28 : STD_LOGIC_VECTOR (31 downto 0) := "00010000000000000000000000000000";
    constant ap_ST_st30_fsm_29 : STD_LOGIC_VECTOR (31 downto 0) := "00100000000000000000000000000000";
    constant ap_ST_st31_fsm_30 : STD_LOGIC_VECTOR (31 downto 0) := "01000000000000000000000000000000";
    constant ap_ST_st32_fsm_31 : STD_LOGIC_VECTOR (31 downto 0) := "10000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv20_0 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000000";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv7_64 : STD_LOGIC_VECTOR (6 downto 0) := "1100100";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv8_C4 : STD_LOGIC_VECTOR (7 downto 0) := "11000100";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv5_7 : STD_LOGIC_VECTOR (4 downto 0) := "00111";
    constant ap_const_lv6_1F : STD_LOGIC_VECTOR (5 downto 0) := "011111";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv17_64 : STD_LOGIC_VECTOR (16 downto 0) := "00000000001100100";
    constant ap_const_lv10_310 : STD_LOGIC_VECTOR (9 downto 0) := "1100010000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv20_310 : STD_LOGIC_VECTOR (19 downto 0) := "00000000001100010000";
    constant ap_const_lv10_64 : STD_LOGIC_VECTOR (9 downto 0) := "0001100100";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv13_310 : STD_LOGIC_VECTOR (12 downto 0) := "0001100010000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_47 : BOOLEAN;
    signal strm_in_V_V_blk_n : STD_LOGIC;
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_68 : BOOLEAN;
    signal exitcond2_fu_478_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal strm_out_V_blk_n : STD_LOGIC;
    signal ap_sig_cseq_ST_st27_fsm_26 : STD_LOGIC;
    signal ap_sig_80 : BOOLEAN;
    signal ap_sig_cseq_ST_st30_fsm_29 : STD_LOGIC;
    signal ap_sig_87 : BOOLEAN;
    signal ap_sig_cseq_ST_st32_fsm_31 : STD_LOGIC;
    signal ap_sig_95 : BOOLEAN;
    signal test_1_fu_468_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal test_1_reg_831 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_105 : BOOLEAN;
    signal tmp_cast_fu_474_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_cast_reg_836 : STD_LOGIC_VECTOR (16 downto 0);
    signal exitcond1_fu_462_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_2_fu_484_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_2_reg_844 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_116 : BOOLEAN;
    signal tmp_V_reg_849 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_46_fu_490_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_46_reg_855 : STD_LOGIC_VECTOR (9 downto 0);
    signal j_1_fu_508_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_1_reg_863 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_131 : BOOLEAN;
    signal p_Result_s_fu_622_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_s_reg_868 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond4_fu_502_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_49_fu_628_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_49_reg_873 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_63_fu_642_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_63_reg_878 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_sig_cseq_ST_st5_fsm_4 : STD_LOGIC;
    signal ap_sig_147 : BOOLEAN;
    signal grp_fu_459_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_48_reg_883 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st10_fsm_9 : STD_LOGIC;
    signal ap_sig_156 : BOOLEAN;
    signal i_1_fu_662_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_sig_cseq_ST_st12_fsm_11 : STD_LOGIC;
    signal ap_sig_165 : BOOLEAN;
    signal next_mul_fu_673_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal next_mul_reg_896 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_sig_cseq_ST_st13_fsm_12 : STD_LOGIC;
    signal ap_sig_174 : BOOLEAN;
    signal i_3_fu_685_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_3_reg_904 : STD_LOGIC_VECTOR (9 downto 0);
    signal j_2_fu_697_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal j_2_reg_912 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_sig_cseq_ST_st14_fsm_13 : STD_LOGIC;
    signal ap_sig_185 : BOOLEAN;
    signal exitcond6_fu_691_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal next_mul2_fu_721_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal next_mul2_reg_937 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_sig_cseq_ST_st25_fsm_24 : STD_LOGIC;
    signal ap_sig_205 : BOOLEAN;
    signal i_4_fu_733_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_4_reg_945 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_3_fu_745_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal j_3_reg_953 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_sig_cseq_ST_st26_fsm_25 : STD_LOGIC;
    signal ap_sig_216 : BOOLEAN;
    signal exitcond8_fu_739_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal next_mul4_fu_766_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal next_mul4_reg_963 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_sig_cseq_ST_st28_fsm_27 : STD_LOGIC;
    signal ap_sig_230 : BOOLEAN;
    signal i_6_fu_778_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_6_reg_971 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_4_fu_790_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal j_4_reg_979 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_sig_cseq_ST_st29_fsm_28 : STD_LOGIC;
    signal ap_sig_241 : BOOLEAN;
    signal exitcond9_fu_784_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_5_fu_817_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_5_reg_992 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_sig_cseq_ST_st31_fsm_30 : STD_LOGIC;
    signal ap_sig_255 : BOOLEAN;
    signal exitcond_fu_811_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal X_address0 : STD_LOGIC_VECTOR (16 downto 0);
    signal X_ce0 : STD_LOGIC;
    signal X_we0 : STD_LOGIC;
    signal X_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal X_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Y_assign_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal Y_assign_ce0 : STD_LOGIC;
    signal Y_assign_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tsf_mat_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal tsf_mat_ce0 : STD_LOGIC;
    signal tsf_mat_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal pca_sorted_idx_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal pca_sorted_idx_ce0 : STD_LOGIC;
    signal pca_sorted_idx_we0 : STD_LOGIC;
    signal pca_sorted_idx_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal pca_sorted_idx_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal pca_sorted_idx_ce1 : STD_LOGIC;
    signal pca_sorted_idx_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal S_address0 : STD_LOGIC_VECTOR (19 downto 0);
    signal S_ce0 : STD_LOGIC;
    signal S_we0 : STD_LOGIC;
    signal S_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal S_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal S_address1 : STD_LOGIC_VECTOR (19 downto 0);
    signal S_ce1 : STD_LOGIC;
    signal S_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal U_address0 : STD_LOGIC_VECTOR (19 downto 0);
    signal U_ce0 : STD_LOGIC;
    signal U_we0 : STD_LOGIC;
    signal U_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal U_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal U_ce1 : STD_LOGIC;
    signal V_address0 : STD_LOGIC_VECTOR (19 downto 0);
    signal V_ce0 : STD_LOGIC;
    signal V_we0 : STD_LOGIC;
    signal V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal V_ce1 : STD_LOGIC;
    signal XXT_address0 : STD_LOGIC_VECTOR (19 downto 0);
    signal XXT_ce0 : STD_LOGIC;
    signal XXT_we0 : STD_LOGIC;
    signal XXT_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal XXT_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal XXT_ce1 : STD_LOGIC;
    signal XXT_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mean_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal mean_ce0 : STD_LOGIC;
    signal mean_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_dut_svd_basic_fu_424_ap_start : STD_LOGIC;
    signal grp_dut_svd_basic_fu_424_ap_done : STD_LOGIC;
    signal grp_dut_svd_basic_fu_424_ap_idle : STD_LOGIC;
    signal grp_dut_svd_basic_fu_424_ap_ready : STD_LOGIC;
    signal grp_dut_svd_basic_fu_424_A_address0 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_dut_svd_basic_fu_424_A_ce0 : STD_LOGIC;
    signal grp_dut_svd_basic_fu_424_A_address1 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_dut_svd_basic_fu_424_A_ce1 : STD_LOGIC;
    signal grp_dut_svd_basic_fu_424_S_address0 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_dut_svd_basic_fu_424_S_ce0 : STD_LOGIC;
    signal grp_dut_svd_basic_fu_424_S_we0 : STD_LOGIC;
    signal grp_dut_svd_basic_fu_424_S_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_dut_svd_basic_fu_424_S_address1 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_dut_svd_basic_fu_424_S_ce1 : STD_LOGIC;
    signal grp_dut_svd_basic_fu_424_S_we1 : STD_LOGIC;
    signal grp_dut_svd_basic_fu_424_S_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_dut_svd_basic_fu_424_U_address0 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_dut_svd_basic_fu_424_U_ce0 : STD_LOGIC;
    signal grp_dut_svd_basic_fu_424_U_we0 : STD_LOGIC;
    signal grp_dut_svd_basic_fu_424_U_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_dut_svd_basic_fu_424_U_address1 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_dut_svd_basic_fu_424_U_ce1 : STD_LOGIC;
    signal grp_dut_svd_basic_fu_424_U_we1 : STD_LOGIC;
    signal grp_dut_svd_basic_fu_424_U_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_dut_svd_basic_fu_424_V_address0 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_dut_svd_basic_fu_424_V_ce0 : STD_LOGIC;
    signal grp_dut_svd_basic_fu_424_V_we0 : STD_LOGIC;
    signal grp_dut_svd_basic_fu_424_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_dut_svd_basic_fu_424_V_address1 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_dut_svd_basic_fu_424_V_ce1 : STD_LOGIC;
    signal grp_dut_svd_basic_fu_424_V_we1 : STD_LOGIC;
    signal grp_dut_svd_basic_fu_424_V_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_dut_cov_fu_432_ap_start : STD_LOGIC;
    signal grp_dut_cov_fu_432_ap_done : STD_LOGIC;
    signal grp_dut_cov_fu_432_ap_idle : STD_LOGIC;
    signal grp_dut_cov_fu_432_ap_ready : STD_LOGIC;
    signal grp_dut_cov_fu_432_X_address0 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_dut_cov_fu_432_X_ce0 : STD_LOGIC;
    signal grp_dut_cov_fu_432_XXT_address0 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_dut_cov_fu_432_XXT_ce0 : STD_LOGIC;
    signal grp_dut_cov_fu_432_XXT_we0 : STD_LOGIC;
    signal grp_dut_cov_fu_432_XXT_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_dut_normalize_fu_438_ap_start : STD_LOGIC;
    signal grp_dut_normalize_fu_438_ap_done : STD_LOGIC;
    signal grp_dut_normalize_fu_438_ap_idle : STD_LOGIC;
    signal grp_dut_normalize_fu_438_ap_ready : STD_LOGIC;
    signal grp_dut_normalize_fu_438_X_address0 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_dut_normalize_fu_438_X_ce0 : STD_LOGIC;
    signal grp_dut_normalize_fu_438_X_we0 : STD_LOGIC;
    signal grp_dut_normalize_fu_438_X_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_dut_normalize_fu_438_mean_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_dut_normalize_fu_438_mean_ce0 : STD_LOGIC;
    signal grp_dut_normalize_fu_438_mean_we0 : STD_LOGIC;
    signal grp_dut_normalize_fu_438_mean_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_dut_matrix_multiply_alt2_fu_444_ap_start : STD_LOGIC;
    signal grp_dut_matrix_multiply_alt2_fu_444_ap_done : STD_LOGIC;
    signal grp_dut_matrix_multiply_alt2_fu_444_ap_idle : STD_LOGIC;
    signal grp_dut_matrix_multiply_alt2_fu_444_ap_ready : STD_LOGIC;
    signal grp_dut_matrix_multiply_alt2_fu_444_A_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_dut_matrix_multiply_alt2_fu_444_A_ce0 : STD_LOGIC;
    signal grp_dut_matrix_multiply_alt2_fu_444_B_address0 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_dut_matrix_multiply_alt2_fu_444_B_ce0 : STD_LOGIC;
    signal grp_dut_matrix_multiply_alt2_fu_444_C_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_dut_matrix_multiply_alt2_fu_444_C_ce0 : STD_LOGIC;
    signal grp_dut_matrix_multiply_alt2_fu_444_C_we0 : STD_LOGIC;
    signal grp_dut_matrix_multiply_alt2_fu_444_C_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_dut_rank_fu_451_ap_start : STD_LOGIC;
    signal grp_dut_rank_fu_451_ap_done : STD_LOGIC;
    signal grp_dut_rank_fu_451_ap_idle : STD_LOGIC;
    signal grp_dut_rank_fu_451_ap_ready : STD_LOGIC;
    signal grp_dut_rank_fu_451_PCA_sorted_idx_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_dut_rank_fu_451_PCA_sorted_idx_ce0 : STD_LOGIC;
    signal grp_dut_rank_fu_451_PCA_sorted_idx_we0 : STD_LOGIC;
    signal grp_dut_rank_fu_451_PCA_sorted_idx_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_dut_rank_fu_451_PCA_sorted_idx_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_dut_rank_fu_451_PCA_sorted_idx_ce1 : STD_LOGIC;
    signal grp_dut_rank_fu_451_PCA_sorted_idx_we1 : STD_LOGIC;
    signal grp_dut_rank_fu_451_PCA_sorted_idx_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_dut_rank_fu_451_tsf_mat_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_dut_rank_fu_451_tsf_mat_ce0 : STD_LOGIC;
    signal grp_dut_rank_fu_451_tsf_mat_we0 : STD_LOGIC;
    signal grp_dut_rank_fu_451_tsf_mat_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_dut_rank_fu_451_S_address0 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_dut_rank_fu_451_S_ce0 : STD_LOGIC;
    signal grp_dut_rank_fu_451_S_address1 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_dut_rank_fu_451_S_ce1 : STD_LOGIC;
    signal grp_dut_rank_fu_451_U_address0 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_dut_rank_fu_451_U_ce0 : STD_LOGIC;
    signal test_reg_267 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_reg_278 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_reg_289 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_cseq_ST_st11_fsm_10 : STD_LOGIC;
    signal ap_sig_503 : BOOLEAN;
    signal i_0_i_reg_300 : STD_LOGIC_VECTOR (9 downto 0);
    signal exitcond10_fu_656_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i1_reg_311 : STD_LOGIC_VECTOR (9 downto 0);
    signal phi_mul_reg_322 : STD_LOGIC_VECTOR (19 downto 0);
    signal j2_reg_334 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_sig_cseq_ST_st15_fsm_14 : STD_LOGIC;
    signal ap_sig_529 : BOOLEAN;
    signal exitcond3_fu_679_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i3_reg_345 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_cseq_ST_st24_fsm_23 : STD_LOGIC;
    signal ap_sig_542 : BOOLEAN;
    signal phi_mul1_reg_356 : STD_LOGIC_VECTOR (9 downto 0);
    signal j4_reg_368 : STD_LOGIC_VECTOR (6 downto 0);
    signal exitcond5_fu_727_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i5_reg_379 : STD_LOGIC_VECTOR (3 downto 0);
    signal phi_mul3_reg_390 : STD_LOGIC_VECTOR (12 downto 0);
    signal j6_reg_402 : STD_LOGIC_VECTOR (9 downto 0);
    signal exitcond7_fu_772_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i7_reg_413 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_reg_grp_dut_svd_basic_fu_424_ap_start : STD_LOGIC := '0';
    signal ap_sig_cseq_ST_st19_fsm_18 : STD_LOGIC;
    signal ap_sig_586 : BOOLEAN;
    signal ap_sig_cseq_ST_st20_fsm_19 : STD_LOGIC;
    signal ap_sig_593 : BOOLEAN;
    signal ap_reg_grp_dut_cov_fu_432_ap_start : STD_LOGIC := '0';
    signal ap_sig_cseq_ST_st17_fsm_16 : STD_LOGIC;
    signal ap_sig_602 : BOOLEAN;
    signal ap_sig_cseq_ST_st18_fsm_17 : STD_LOGIC;
    signal ap_sig_609 : BOOLEAN;
    signal ap_reg_grp_dut_normalize_fu_438_ap_start : STD_LOGIC := '0';
    signal ap_sig_cseq_ST_st16_fsm_15 : STD_LOGIC;
    signal ap_sig_620 : BOOLEAN;
    signal ap_reg_grp_dut_matrix_multiply_alt2_fu_444_ap_start : STD_LOGIC := '0';
    signal ap_sig_cseq_ST_st23_fsm_22 : STD_LOGIC;
    signal ap_sig_629 : BOOLEAN;
    signal ap_reg_grp_dut_rank_fu_451_ap_start : STD_LOGIC := '0';
    signal ap_sig_cseq_ST_st21_fsm_20 : STD_LOGIC;
    signal ap_sig_638 : BOOLEAN;
    signal ap_sig_cseq_ST_st22_fsm_21 : STD_LOGIC;
    signal ap_sig_645 : BOOLEAN;
    signal tmp_69_cast_fu_647_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_668_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_71_cast_fu_713_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_73_cast_fu_761_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_76_cast_fu_806_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_55_fu_823_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_0_i_cast8_fu_651_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_514_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal Lo_assign_fu_518_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal Hi_assign_fu_526_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_43_fu_538_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_44_fu_542_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_42_fu_532_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_47_fu_555_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_51_fu_567_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_45_fu_546_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_50_fu_561_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_52_fu_573_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_54_fu_588_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_56_fu_596_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_53_fu_581_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_57_fu_602_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_58_fu_606_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_60_fu_610_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_61_fu_616_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_cast_fu_498_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_62_fu_636_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_62_fu_636_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_52_cast_fu_703_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_59_fu_707_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_54_cast_fu_751_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_64_fu_755_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_56_cast_fu_796_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_67_fu_800_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_62_fu_636_p10 : STD_LOGIC_VECTOR (16 downto 0);

    component dut_svd_basic IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        A_address0 : OUT STD_LOGIC_VECTOR (19 downto 0);
        A_ce0 : OUT STD_LOGIC;
        A_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        A_address1 : OUT STD_LOGIC_VECTOR (19 downto 0);
        A_ce1 : OUT STD_LOGIC;
        A_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        S_address0 : OUT STD_LOGIC_VECTOR (19 downto 0);
        S_ce0 : OUT STD_LOGIC;
        S_we0 : OUT STD_LOGIC;
        S_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        S_address1 : OUT STD_LOGIC_VECTOR (19 downto 0);
        S_ce1 : OUT STD_LOGIC;
        S_we1 : OUT STD_LOGIC;
        S_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        U_address0 : OUT STD_LOGIC_VECTOR (19 downto 0);
        U_ce0 : OUT STD_LOGIC;
        U_we0 : OUT STD_LOGIC;
        U_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        U_address1 : OUT STD_LOGIC_VECTOR (19 downto 0);
        U_ce1 : OUT STD_LOGIC;
        U_we1 : OUT STD_LOGIC;
        U_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        V_address0 : OUT STD_LOGIC_VECTOR (19 downto 0);
        V_ce0 : OUT STD_LOGIC;
        V_we0 : OUT STD_LOGIC;
        V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        V_address1 : OUT STD_LOGIC_VECTOR (19 downto 0);
        V_ce1 : OUT STD_LOGIC;
        V_we1 : OUT STD_LOGIC;
        V_d1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dut_cov IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        X_address0 : OUT STD_LOGIC_VECTOR (16 downto 0);
        X_ce0 : OUT STD_LOGIC;
        X_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        XXT_address0 : OUT STD_LOGIC_VECTOR (19 downto 0);
        XXT_ce0 : OUT STD_LOGIC;
        XXT_we0 : OUT STD_LOGIC;
        XXT_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        XXT_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dut_normalize IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        X_address0 : OUT STD_LOGIC_VECTOR (16 downto 0);
        X_ce0 : OUT STD_LOGIC;
        X_we0 : OUT STD_LOGIC;
        X_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        X_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        mean_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        mean_ce0 : OUT STD_LOGIC;
        mean_we0 : OUT STD_LOGIC;
        mean_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dut_matrix_multiply_alt2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        A_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        A_ce0 : OUT STD_LOGIC;
        A_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        B_address0 : OUT STD_LOGIC_VECTOR (16 downto 0);
        B_ce0 : OUT STD_LOGIC;
        B_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        C_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        C_ce0 : OUT STD_LOGIC;
        C_we0 : OUT STD_LOGIC;
        C_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dut_rank IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        PCA_sorted_idx_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        PCA_sorted_idx_ce0 : OUT STD_LOGIC;
        PCA_sorted_idx_we0 : OUT STD_LOGIC;
        PCA_sorted_idx_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        PCA_sorted_idx_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        PCA_sorted_idx_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        PCA_sorted_idx_ce1 : OUT STD_LOGIC;
        PCA_sorted_idx_we1 : OUT STD_LOGIC;
        PCA_sorted_idx_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        PCA_sorted_idx_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        tsf_mat_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        tsf_mat_ce0 : OUT STD_LOGIC;
        tsf_mat_we0 : OUT STD_LOGIC;
        tsf_mat_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        S_address0 : OUT STD_LOGIC_VECTOR (19 downto 0);
        S_ce0 : OUT STD_LOGIC;
        S_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        S_address1 : OUT STD_LOGIC_VECTOR (19 downto 0);
        S_ce1 : OUT STD_LOGIC;
        S_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        U_address0 : OUT STD_LOGIC_VECTOR (19 downto 0);
        U_ce0 : OUT STD_LOGIC;
        U_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dut_uitofp_32ns_32_6 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dut_cov_XT IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (16 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dut_matrix_multiply_alt2_sum_mult IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dut_tsf_mat IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dut_pca_sorted_idx IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dut_svd_basic_s_in IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (19 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (19 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dut_U IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (19 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (19 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dut_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (19 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (19 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dut_XXT IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (19 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (19 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dut_mean IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    X_U : component dut_cov_XT
    generic map (
        DataWidth => 32,
        AddressRange => 78400,
        AddressWidth => 17)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => X_address0,
        ce0 => X_ce0,
        we0 => X_we0,
        d0 => X_d0,
        q0 => X_q0);

    Y_assign_U : component dut_matrix_multiply_alt2_sum_mult
    generic map (
        DataWidth => 32,
        AddressRange => 1000,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => Y_assign_address0,
        ce0 => Y_assign_ce0,
        we0 => grp_dut_matrix_multiply_alt2_fu_444_C_we0,
        d0 => grp_dut_matrix_multiply_alt2_fu_444_C_d0,
        q0 => Y_assign_q0);

    tsf_mat_U : component dut_tsf_mat
    generic map (
        DataWidth => 32,
        AddressRange => 7840,
        AddressWidth => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => tsf_mat_address0,
        ce0 => tsf_mat_ce0,
        we0 => grp_dut_rank_fu_451_tsf_mat_we0,
        d0 => grp_dut_rank_fu_451_tsf_mat_d0,
        q0 => tsf_mat_q0);

    pca_sorted_idx_U : component dut_pca_sorted_idx
    generic map (
        DataWidth => 32,
        AddressRange => 784,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => pca_sorted_idx_address0,
        ce0 => pca_sorted_idx_ce0,
        we0 => pca_sorted_idx_we0,
        d0 => pca_sorted_idx_d0,
        q0 => pca_sorted_idx_q0,
        address1 => grp_dut_rank_fu_451_PCA_sorted_idx_address1,
        ce1 => pca_sorted_idx_ce1,
        we1 => grp_dut_rank_fu_451_PCA_sorted_idx_we1,
        d1 => grp_dut_rank_fu_451_PCA_sorted_idx_d1,
        q1 => pca_sorted_idx_q1);

    S_U : component dut_svd_basic_s_in
    generic map (
        DataWidth => 32,
        AddressRange => 614656,
        AddressWidth => 20)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => S_address0,
        ce0 => S_ce0,
        we0 => S_we0,
        d0 => S_d0,
        q0 => S_q0,
        address1 => S_address1,
        ce1 => S_ce1,
        we1 => grp_dut_svd_basic_fu_424_S_we1,
        d1 => grp_dut_svd_basic_fu_424_S_d1,
        q1 => S_q1);

    U_U : component dut_U
    generic map (
        DataWidth => 32,
        AddressRange => 614656,
        AddressWidth => 20)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => U_address0,
        ce0 => U_ce0,
        we0 => U_we0,
        d0 => U_d0,
        q0 => U_q0,
        address1 => grp_dut_svd_basic_fu_424_U_address1,
        ce1 => U_ce1,
        we1 => grp_dut_svd_basic_fu_424_U_we1,
        d1 => grp_dut_svd_basic_fu_424_U_d1);

    V_U : component dut_V
    generic map (
        DataWidth => 32,
        AddressRange => 614656,
        AddressWidth => 20)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => V_address0,
        ce0 => V_ce0,
        we0 => V_we0,
        d0 => V_d0,
        address1 => grp_dut_svd_basic_fu_424_V_address1,
        ce1 => V_ce1,
        we1 => grp_dut_svd_basic_fu_424_V_we1,
        d1 => grp_dut_svd_basic_fu_424_V_d1);

    XXT_U : component dut_XXT
    generic map (
        DataWidth => 32,
        AddressRange => 614656,
        AddressWidth => 20)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => XXT_address0,
        ce0 => XXT_ce0,
        we0 => XXT_we0,
        d0 => XXT_d0,
        q0 => XXT_q0,
        address1 => grp_dut_svd_basic_fu_424_A_address1,
        ce1 => XXT_ce1,
        q1 => XXT_q1);

    mean_U : component dut_mean
    generic map (
        DataWidth => 32,
        AddressRange => 784,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => mean_address0,
        ce0 => mean_ce0,
        we0 => grp_dut_normalize_fu_438_mean_we0,
        d0 => grp_dut_normalize_fu_438_mean_d0,
        q0 => mean_q0);

    grp_dut_svd_basic_fu_424 : component dut_svd_basic
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_dut_svd_basic_fu_424_ap_start,
        ap_done => grp_dut_svd_basic_fu_424_ap_done,
        ap_idle => grp_dut_svd_basic_fu_424_ap_idle,
        ap_ready => grp_dut_svd_basic_fu_424_ap_ready,
        A_address0 => grp_dut_svd_basic_fu_424_A_address0,
        A_ce0 => grp_dut_svd_basic_fu_424_A_ce0,
        A_q0 => XXT_q0,
        A_address1 => grp_dut_svd_basic_fu_424_A_address1,
        A_ce1 => grp_dut_svd_basic_fu_424_A_ce1,
        A_q1 => XXT_q1,
        S_address0 => grp_dut_svd_basic_fu_424_S_address0,
        S_ce0 => grp_dut_svd_basic_fu_424_S_ce0,
        S_we0 => grp_dut_svd_basic_fu_424_S_we0,
        S_d0 => grp_dut_svd_basic_fu_424_S_d0,
        S_address1 => grp_dut_svd_basic_fu_424_S_address1,
        S_ce1 => grp_dut_svd_basic_fu_424_S_ce1,
        S_we1 => grp_dut_svd_basic_fu_424_S_we1,
        S_d1 => grp_dut_svd_basic_fu_424_S_d1,
        U_address0 => grp_dut_svd_basic_fu_424_U_address0,
        U_ce0 => grp_dut_svd_basic_fu_424_U_ce0,
        U_we0 => grp_dut_svd_basic_fu_424_U_we0,
        U_d0 => grp_dut_svd_basic_fu_424_U_d0,
        U_address1 => grp_dut_svd_basic_fu_424_U_address1,
        U_ce1 => grp_dut_svd_basic_fu_424_U_ce1,
        U_we1 => grp_dut_svd_basic_fu_424_U_we1,
        U_d1 => grp_dut_svd_basic_fu_424_U_d1,
        V_address0 => grp_dut_svd_basic_fu_424_V_address0,
        V_ce0 => grp_dut_svd_basic_fu_424_V_ce0,
        V_we0 => grp_dut_svd_basic_fu_424_V_we0,
        V_d0 => grp_dut_svd_basic_fu_424_V_d0,
        V_address1 => grp_dut_svd_basic_fu_424_V_address1,
        V_ce1 => grp_dut_svd_basic_fu_424_V_ce1,
        V_we1 => grp_dut_svd_basic_fu_424_V_we1,
        V_d1 => grp_dut_svd_basic_fu_424_V_d1);

    grp_dut_cov_fu_432 : component dut_cov
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_dut_cov_fu_432_ap_start,
        ap_done => grp_dut_cov_fu_432_ap_done,
        ap_idle => grp_dut_cov_fu_432_ap_idle,
        ap_ready => grp_dut_cov_fu_432_ap_ready,
        X_address0 => grp_dut_cov_fu_432_X_address0,
        X_ce0 => grp_dut_cov_fu_432_X_ce0,
        X_q0 => X_q0,
        XXT_address0 => grp_dut_cov_fu_432_XXT_address0,
        XXT_ce0 => grp_dut_cov_fu_432_XXT_ce0,
        XXT_we0 => grp_dut_cov_fu_432_XXT_we0,
        XXT_d0 => grp_dut_cov_fu_432_XXT_d0,
        XXT_q0 => XXT_q0);

    grp_dut_normalize_fu_438 : component dut_normalize
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_dut_normalize_fu_438_ap_start,
        ap_done => grp_dut_normalize_fu_438_ap_done,
        ap_idle => grp_dut_normalize_fu_438_ap_idle,
        ap_ready => grp_dut_normalize_fu_438_ap_ready,
        X_address0 => grp_dut_normalize_fu_438_X_address0,
        X_ce0 => grp_dut_normalize_fu_438_X_ce0,
        X_we0 => grp_dut_normalize_fu_438_X_we0,
        X_d0 => grp_dut_normalize_fu_438_X_d0,
        X_q0 => X_q0,
        mean_address0 => grp_dut_normalize_fu_438_mean_address0,
        mean_ce0 => grp_dut_normalize_fu_438_mean_ce0,
        mean_we0 => grp_dut_normalize_fu_438_mean_we0,
        mean_d0 => grp_dut_normalize_fu_438_mean_d0);

    grp_dut_matrix_multiply_alt2_fu_444 : component dut_matrix_multiply_alt2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_dut_matrix_multiply_alt2_fu_444_ap_start,
        ap_done => grp_dut_matrix_multiply_alt2_fu_444_ap_done,
        ap_idle => grp_dut_matrix_multiply_alt2_fu_444_ap_idle,
        ap_ready => grp_dut_matrix_multiply_alt2_fu_444_ap_ready,
        A_address0 => grp_dut_matrix_multiply_alt2_fu_444_A_address0,
        A_ce0 => grp_dut_matrix_multiply_alt2_fu_444_A_ce0,
        A_q0 => tsf_mat_q0,
        B_address0 => grp_dut_matrix_multiply_alt2_fu_444_B_address0,
        B_ce0 => grp_dut_matrix_multiply_alt2_fu_444_B_ce0,
        B_q0 => X_q0,
        C_address0 => grp_dut_matrix_multiply_alt2_fu_444_C_address0,
        C_ce0 => grp_dut_matrix_multiply_alt2_fu_444_C_ce0,
        C_we0 => grp_dut_matrix_multiply_alt2_fu_444_C_we0,
        C_d0 => grp_dut_matrix_multiply_alt2_fu_444_C_d0);

    grp_dut_rank_fu_451 : component dut_rank
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_dut_rank_fu_451_ap_start,
        ap_done => grp_dut_rank_fu_451_ap_done,
        ap_idle => grp_dut_rank_fu_451_ap_idle,
        ap_ready => grp_dut_rank_fu_451_ap_ready,
        PCA_sorted_idx_address0 => grp_dut_rank_fu_451_PCA_sorted_idx_address0,
        PCA_sorted_idx_ce0 => grp_dut_rank_fu_451_PCA_sorted_idx_ce0,
        PCA_sorted_idx_we0 => grp_dut_rank_fu_451_PCA_sorted_idx_we0,
        PCA_sorted_idx_d0 => grp_dut_rank_fu_451_PCA_sorted_idx_d0,
        PCA_sorted_idx_q0 => pca_sorted_idx_q0,
        PCA_sorted_idx_address1 => grp_dut_rank_fu_451_PCA_sorted_idx_address1,
        PCA_sorted_idx_ce1 => grp_dut_rank_fu_451_PCA_sorted_idx_ce1,
        PCA_sorted_idx_we1 => grp_dut_rank_fu_451_PCA_sorted_idx_we1,
        PCA_sorted_idx_d1 => grp_dut_rank_fu_451_PCA_sorted_idx_d1,
        PCA_sorted_idx_q1 => pca_sorted_idx_q1,
        tsf_mat_address0 => grp_dut_rank_fu_451_tsf_mat_address0,
        tsf_mat_ce0 => grp_dut_rank_fu_451_tsf_mat_ce0,
        tsf_mat_we0 => grp_dut_rank_fu_451_tsf_mat_we0,
        tsf_mat_d0 => grp_dut_rank_fu_451_tsf_mat_d0,
        S_address0 => grp_dut_rank_fu_451_S_address0,
        S_ce0 => grp_dut_rank_fu_451_S_ce0,
        S_q0 => S_q0,
        S_address1 => grp_dut_rank_fu_451_S_address1,
        S_ce1 => grp_dut_rank_fu_451_S_ce1,
        S_q1 => S_q1,
        U_address0 => grp_dut_rank_fu_451_U_address0,
        U_ce0 => grp_dut_rank_fu_451_U_ce0,
        U_q0 => U_q0);

    dut_uitofp_32ns_32_6_U56 : component dut_uitofp_32ns_32_6
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_Result_s_reg_868,
        ce => ap_const_logic_1,
        dout => grp_fu_459_p1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_grp_dut_cov_fu_432_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_grp_dut_cov_fu_432_ap_start <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_st17_fsm_16)) then 
                    ap_reg_grp_dut_cov_fu_432_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_dut_cov_fu_432_ap_ready)) then 
                    ap_reg_grp_dut_cov_fu_432_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_dut_matrix_multiply_alt2_fu_444_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_grp_dut_matrix_multiply_alt2_fu_444_ap_start <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_22)) then 
                    ap_reg_grp_dut_matrix_multiply_alt2_fu_444_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_dut_matrix_multiply_alt2_fu_444_ap_ready)) then 
                    ap_reg_grp_dut_matrix_multiply_alt2_fu_444_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_dut_normalize_fu_438_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_grp_dut_normalize_fu_438_ap_start <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12) and not((ap_const_lv1_0 = exitcond3_fu_679_p2)))) then 
                    ap_reg_grp_dut_normalize_fu_438_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_dut_normalize_fu_438_ap_ready)) then 
                    ap_reg_grp_dut_normalize_fu_438_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_dut_rank_fu_451_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_grp_dut_rank_fu_451_ap_start <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20)) then 
                    ap_reg_grp_dut_rank_fu_451_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_dut_rank_fu_451_ap_ready)) then 
                    ap_reg_grp_dut_rank_fu_451_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_dut_svd_basic_fu_424_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_grp_dut_svd_basic_fu_424_ap_start <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_st19_fsm_18)) then 
                    ap_reg_grp_dut_svd_basic_fu_424_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_dut_svd_basic_fu_424_ap_ready)) then 
                    ap_reg_grp_dut_svd_basic_fu_424_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i1_reg_311_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13) and not((ap_const_lv1_0 = exitcond6_fu_691_p2)))) then 
                i1_reg_311 <= i_3_reg_904;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11) and not((ap_const_lv1_0 = exitcond10_fu_656_p2)))) then 
                i1_reg_311 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    i3_reg_345_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st26_fsm_25) and not((ap_const_lv1_0 = exitcond8_fu_739_p2)))) then 
                i3_reg_345 <= i_4_reg_945;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st24_fsm_23) and not((ap_const_logic_0 = grp_dut_matrix_multiply_alt2_fu_444_ap_done)))) then 
                i3_reg_345 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    i5_reg_379_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st29_fsm_28) and not((ap_const_lv1_0 = exitcond9_fu_784_p2)))) then 
                i5_reg_379 <= i_6_reg_971;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st25_fsm_24) and not((ap_const_lv1_0 = exitcond5_fu_727_p2)))) then 
                i5_reg_379 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    i7_reg_413_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st28_fsm_27) and not((ap_const_lv1_0 = exitcond7_fu_772_p2)))) then 
                i7_reg_413 <= ap_const_lv10_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st32_fsm_31) and not((strm_out_V_full_n = ap_const_logic_0)))) then 
                i7_reg_413 <= i_5_reg_992;
            end if; 
        end if;
    end process;

    i_0_i_reg_300_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((ap_const_lv1_0 = exitcond1_fu_462_p2)))) then 
                i_0_i_reg_300 <= ap_const_lv10_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11) and (ap_const_lv1_0 = exitcond10_fu_656_p2))) then 
                i_0_i_reg_300 <= i_1_fu_662_p2;
            end if; 
        end if;
    end process;

    i_reg_278_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((ap_const_lv1_0 = exitcond4_fu_502_p2)))) then 
                i_reg_278 <= i_2_reg_844;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (ap_const_lv1_0 = exitcond1_fu_462_p2))) then 
                i_reg_278 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    j2_reg_334_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12) and (ap_const_lv1_0 = exitcond3_fu_679_p2))) then 
                j2_reg_334 <= ap_const_lv10_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14)) then 
                j2_reg_334 <= j_2_reg_912;
            end if; 
        end if;
    end process;

    j4_reg_368_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st25_fsm_24) and (ap_const_lv1_0 = exitcond5_fu_727_p2))) then 
                j4_reg_368 <= ap_const_lv7_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st27_fsm_26) and not((strm_out_V_full_n = ap_const_logic_0)))) then 
                j4_reg_368 <= j_3_reg_953;
            end if; 
        end if;
    end process;

    j6_reg_402_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st28_fsm_27) and (ap_const_lv1_0 = exitcond7_fu_772_p2))) then 
                j6_reg_402 <= ap_const_lv10_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st30_fsm_29) and not((strm_out_V_full_n = ap_const_logic_0)))) then 
                j6_reg_402 <= j_4_reg_979;
            end if; 
        end if;
    end process;

    j_reg_289_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10)) then 
                j_reg_289 <= j_1_reg_863;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (exitcond2_fu_478_p2 = ap_const_lv1_0) and not(ap_sig_116))) then 
                j_reg_289 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    phi_mul1_reg_356_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st26_fsm_25) and not((ap_const_lv1_0 = exitcond8_fu_739_p2)))) then 
                phi_mul1_reg_356 <= next_mul2_reg_937;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st24_fsm_23) and not((ap_const_logic_0 = grp_dut_matrix_multiply_alt2_fu_444_ap_done)))) then 
                phi_mul1_reg_356 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    phi_mul3_reg_390_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st29_fsm_28) and not((ap_const_lv1_0 = exitcond9_fu_784_p2)))) then 
                phi_mul3_reg_390 <= next_mul4_reg_963;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st25_fsm_24) and not((ap_const_lv1_0 = exitcond5_fu_727_p2)))) then 
                phi_mul3_reg_390 <= ap_const_lv13_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_322_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13) and not((ap_const_lv1_0 = exitcond6_fu_691_p2)))) then 
                phi_mul_reg_322 <= next_mul_reg_896;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11) and not((ap_const_lv1_0 = exitcond10_fu_656_p2)))) then 
                phi_mul_reg_322 <= ap_const_lv20_0;
            end if; 
        end if;
    end process;

    test_reg_267_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not(ap_sig_116) and not((exitcond2_fu_478_p2 = ap_const_lv1_0)))) then 
                test_reg_267 <= test_1_reg_831;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                test_reg_267 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not(ap_sig_116))) then
                i_2_reg_844 <= i_2_fu_484_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12)) then
                i_3_reg_904 <= i_3_fu_685_p2;
                next_mul_reg_896 <= next_mul_fu_673_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st25_fsm_24)) then
                i_4_reg_945 <= i_4_fu_733_p2;
                next_mul2_reg_937 <= next_mul2_fu_721_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st31_fsm_30)) then
                i_5_reg_992 <= i_5_fu_817_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st28_fsm_27)) then
                i_6_reg_971 <= i_6_fu_778_p2;
                next_mul4_reg_963 <= next_mul4_fu_766_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then
                j_1_reg_863 <= j_1_fu_508_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13)) then
                j_2_reg_912 <= j_2_fu_697_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st26_fsm_25)) then
                j_3_reg_953 <= j_3_fu_745_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st29_fsm_28)) then
                j_4_reg_979 <= j_4_fu_790_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (ap_const_lv1_0 = exitcond4_fu_502_p2))) then
                p_Result_s_reg_868 <= p_Result_s_fu_622_p2;
                tmp_49_reg_873 <= tmp_49_fu_628_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then
                test_1_reg_831 <= test_1_fu_468_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (exitcond2_fu_478_p2 = ap_const_lv1_0) and not(ap_sig_116))) then
                    tmp_46_reg_855(9 downto 2) <= tmp_46_fu_490_p3(9 downto 2);
                tmp_V_reg_849 <= strm_in_V_V_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9)) then
                tmp_48_reg_883 <= grp_fu_459_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then
                tmp_63_reg_878 <= tmp_63_fu_642_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (ap_const_lv1_0 = exitcond1_fu_462_p2))) then
                    tmp_cast_reg_836(6 downto 0) <= tmp_cast_fu_474_p1(6 downto 0);
            end if;
        end if;
    end process;
    tmp_cast_reg_836(16 downto 7) <= "0000000000";
    tmp_46_reg_855(1 downto 0) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, strm_out_V_full_n, exitcond2_fu_478_p2, exitcond1_fu_462_p2, ap_sig_116, exitcond4_fu_502_p2, exitcond6_fu_691_p2, exitcond8_fu_739_p2, exitcond9_fu_784_p2, exitcond_fu_811_p2, grp_dut_svd_basic_fu_424_ap_done, grp_dut_cov_fu_432_ap_done, grp_dut_normalize_fu_438_ap_done, grp_dut_matrix_multiply_alt2_fu_444_ap_done, grp_dut_rank_fu_451_ap_done, exitcond10_fu_656_p2, exitcond3_fu_679_p2, exitcond5_fu_727_p2, exitcond7_fu_772_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if ((ap_const_lv1_0 = exitcond1_fu_462_p2)) then
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_st12_fsm_11;
                end if;
            when ap_ST_st3_fsm_2 => 
                if (((exitcond2_fu_478_p2 = ap_const_lv1_0) and not(ap_sig_116))) then
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                elsif ((not(ap_sig_116) and not((exitcond2_fu_478_p2 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st4_fsm_3 => 
                if ((ap_const_lv1_0 = exitcond4_fu_502_p2)) then
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when ap_ST_st6_fsm_5 => 
                ap_NS_fsm <= ap_ST_st7_fsm_6;
            when ap_ST_st7_fsm_6 => 
                ap_NS_fsm <= ap_ST_st8_fsm_7;
            when ap_ST_st8_fsm_7 => 
                ap_NS_fsm <= ap_ST_st9_fsm_8;
            when ap_ST_st9_fsm_8 => 
                ap_NS_fsm <= ap_ST_st10_fsm_9;
            when ap_ST_st10_fsm_9 => 
                ap_NS_fsm <= ap_ST_st11_fsm_10;
            when ap_ST_st11_fsm_10 => 
                ap_NS_fsm <= ap_ST_st4_fsm_3;
            when ap_ST_st12_fsm_11 => 
                if ((ap_const_lv1_0 = exitcond10_fu_656_p2)) then
                    ap_NS_fsm <= ap_ST_st12_fsm_11;
                else
                    ap_NS_fsm <= ap_ST_st13_fsm_12;
                end if;
            when ap_ST_st13_fsm_12 => 
                if (not((ap_const_lv1_0 = exitcond3_fu_679_p2))) then
                    ap_NS_fsm <= ap_ST_st16_fsm_15;
                else
                    ap_NS_fsm <= ap_ST_st14_fsm_13;
                end if;
            when ap_ST_st14_fsm_13 => 
                if ((ap_const_lv1_0 = exitcond6_fu_691_p2)) then
                    ap_NS_fsm <= ap_ST_st15_fsm_14;
                else
                    ap_NS_fsm <= ap_ST_st13_fsm_12;
                end if;
            when ap_ST_st15_fsm_14 => 
                ap_NS_fsm <= ap_ST_st14_fsm_13;
            when ap_ST_st16_fsm_15 => 
                if (not((ap_const_logic_0 = grp_dut_normalize_fu_438_ap_done))) then
                    ap_NS_fsm <= ap_ST_st17_fsm_16;
                else
                    ap_NS_fsm <= ap_ST_st16_fsm_15;
                end if;
            when ap_ST_st17_fsm_16 => 
                ap_NS_fsm <= ap_ST_st18_fsm_17;
            when ap_ST_st18_fsm_17 => 
                if (not((ap_const_logic_0 = grp_dut_cov_fu_432_ap_done))) then
                    ap_NS_fsm <= ap_ST_st19_fsm_18;
                else
                    ap_NS_fsm <= ap_ST_st18_fsm_17;
                end if;
            when ap_ST_st19_fsm_18 => 
                ap_NS_fsm <= ap_ST_st20_fsm_19;
            when ap_ST_st20_fsm_19 => 
                if (not((ap_const_logic_0 = grp_dut_svd_basic_fu_424_ap_done))) then
                    ap_NS_fsm <= ap_ST_st21_fsm_20;
                else
                    ap_NS_fsm <= ap_ST_st20_fsm_19;
                end if;
            when ap_ST_st21_fsm_20 => 
                ap_NS_fsm <= ap_ST_st22_fsm_21;
            when ap_ST_st22_fsm_21 => 
                if (not((ap_const_logic_0 = grp_dut_rank_fu_451_ap_done))) then
                    ap_NS_fsm <= ap_ST_st23_fsm_22;
                else
                    ap_NS_fsm <= ap_ST_st22_fsm_21;
                end if;
            when ap_ST_st23_fsm_22 => 
                ap_NS_fsm <= ap_ST_st24_fsm_23;
            when ap_ST_st24_fsm_23 => 
                if (not((ap_const_logic_0 = grp_dut_matrix_multiply_alt2_fu_444_ap_done))) then
                    ap_NS_fsm <= ap_ST_st25_fsm_24;
                else
                    ap_NS_fsm <= ap_ST_st24_fsm_23;
                end if;
            when ap_ST_st25_fsm_24 => 
                if (not((ap_const_lv1_0 = exitcond5_fu_727_p2))) then
                    ap_NS_fsm <= ap_ST_st28_fsm_27;
                else
                    ap_NS_fsm <= ap_ST_st26_fsm_25;
                end if;
            when ap_ST_st26_fsm_25 => 
                if ((ap_const_lv1_0 = exitcond8_fu_739_p2)) then
                    ap_NS_fsm <= ap_ST_st27_fsm_26;
                else
                    ap_NS_fsm <= ap_ST_st25_fsm_24;
                end if;
            when ap_ST_st27_fsm_26 => 
                if (not((strm_out_V_full_n = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st26_fsm_25;
                else
                    ap_NS_fsm <= ap_ST_st27_fsm_26;
                end if;
            when ap_ST_st28_fsm_27 => 
                if (not((ap_const_lv1_0 = exitcond7_fu_772_p2))) then
                    ap_NS_fsm <= ap_ST_st31_fsm_30;
                else
                    ap_NS_fsm <= ap_ST_st29_fsm_28;
                end if;
            when ap_ST_st29_fsm_28 => 
                if ((ap_const_lv1_0 = exitcond9_fu_784_p2)) then
                    ap_NS_fsm <= ap_ST_st30_fsm_29;
                else
                    ap_NS_fsm <= ap_ST_st28_fsm_27;
                end if;
            when ap_ST_st30_fsm_29 => 
                if (not((strm_out_V_full_n = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st29_fsm_28;
                else
                    ap_NS_fsm <= ap_ST_st30_fsm_29;
                end if;
            when ap_ST_st31_fsm_30 => 
                if (not((ap_const_lv1_0 = exitcond_fu_811_p2))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st32_fsm_31;
                end if;
            when ap_ST_st32_fsm_31 => 
                if (not((strm_out_V_full_n = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st31_fsm_30;
                else
                    ap_NS_fsm <= ap_ST_st32_fsm_31;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    Hi_assign_fu_526_p2 <= (Lo_assign_fu_518_p3 or ap_const_lv5_7);
    Lo_assign_fu_518_p3 <= (tmp_fu_514_p1 & ap_const_lv3_0);

    S_address0_assign_proc : process(ap_sig_cseq_ST_st14_fsm_13, grp_dut_svd_basic_fu_424_S_address0, grp_dut_rank_fu_451_S_address0, ap_sig_cseq_ST_st20_fsm_19, ap_sig_cseq_ST_st22_fsm_21, tmp_71_cast_fu_713_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13)) then 
            S_address0 <= tmp_71_cast_fu_713_p1(20 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st22_fsm_21)) then 
            S_address0 <= grp_dut_rank_fu_451_S_address0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19)) then 
            S_address0 <= grp_dut_svd_basic_fu_424_S_address0;
        else 
            S_address0 <= "XXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    S_address1_assign_proc : process(grp_dut_svd_basic_fu_424_S_address1, grp_dut_rank_fu_451_S_address1, ap_sig_cseq_ST_st20_fsm_19, ap_sig_cseq_ST_st22_fsm_21)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st22_fsm_21)) then 
            S_address1 <= grp_dut_rank_fu_451_S_address1;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19)) then 
            S_address1 <= grp_dut_svd_basic_fu_424_S_address1;
        else 
            S_address1 <= "XXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    S_ce0_assign_proc : process(ap_sig_cseq_ST_st14_fsm_13, grp_dut_svd_basic_fu_424_S_ce0, grp_dut_rank_fu_451_S_ce0, ap_sig_cseq_ST_st15_fsm_14, ap_sig_cseq_ST_st20_fsm_19, ap_sig_cseq_ST_st22_fsm_21)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13) or (ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14))) then 
            S_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st22_fsm_21)) then 
            S_ce0 <= grp_dut_rank_fu_451_S_ce0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19)) then 
            S_ce0 <= grp_dut_svd_basic_fu_424_S_ce0;
        else 
            S_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    S_ce1_assign_proc : process(grp_dut_svd_basic_fu_424_S_ce1, grp_dut_rank_fu_451_S_ce1, ap_sig_cseq_ST_st20_fsm_19, ap_sig_cseq_ST_st22_fsm_21)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st22_fsm_21)) then 
            S_ce1 <= grp_dut_rank_fu_451_S_ce1;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19)) then 
            S_ce1 <= grp_dut_svd_basic_fu_424_S_ce1;
        else 
            S_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    S_d0_assign_proc : process(ap_sig_cseq_ST_st14_fsm_13, grp_dut_svd_basic_fu_424_S_d0, ap_sig_cseq_ST_st20_fsm_19)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13)) then 
            S_d0 <= ap_const_lv32_0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19)) then 
            S_d0 <= grp_dut_svd_basic_fu_424_S_d0;
        else 
            S_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    S_we0_assign_proc : process(ap_sig_cseq_ST_st14_fsm_13, exitcond6_fu_691_p2, grp_dut_svd_basic_fu_424_S_we0, ap_sig_cseq_ST_st20_fsm_19)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13) and (ap_const_lv1_0 = exitcond6_fu_691_p2)))) then 
            S_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19)) then 
            S_we0 <= grp_dut_svd_basic_fu_424_S_we0;
        else 
            S_we0 <= ap_const_logic_0;
        end if; 
    end process;


    U_address0_assign_proc : process(ap_sig_cseq_ST_st14_fsm_13, grp_dut_svd_basic_fu_424_U_address0, grp_dut_rank_fu_451_U_address0, ap_sig_cseq_ST_st20_fsm_19, ap_sig_cseq_ST_st22_fsm_21, tmp_71_cast_fu_713_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13)) then 
            U_address0 <= tmp_71_cast_fu_713_p1(20 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st22_fsm_21)) then 
            U_address0 <= grp_dut_rank_fu_451_U_address0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19)) then 
            U_address0 <= grp_dut_svd_basic_fu_424_U_address0;
        else 
            U_address0 <= "XXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    U_ce0_assign_proc : process(ap_sig_cseq_ST_st14_fsm_13, grp_dut_svd_basic_fu_424_U_ce0, grp_dut_rank_fu_451_U_ce0, ap_sig_cseq_ST_st15_fsm_14, ap_sig_cseq_ST_st20_fsm_19, ap_sig_cseq_ST_st22_fsm_21)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13) or (ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14))) then 
            U_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st22_fsm_21)) then 
            U_ce0 <= grp_dut_rank_fu_451_U_ce0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19)) then 
            U_ce0 <= grp_dut_svd_basic_fu_424_U_ce0;
        else 
            U_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    U_ce1_assign_proc : process(grp_dut_svd_basic_fu_424_U_ce1, ap_sig_cseq_ST_st20_fsm_19)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19)) then 
            U_ce1 <= grp_dut_svd_basic_fu_424_U_ce1;
        else 
            U_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    U_d0_assign_proc : process(ap_sig_cseq_ST_st14_fsm_13, grp_dut_svd_basic_fu_424_U_d0, ap_sig_cseq_ST_st20_fsm_19)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13)) then 
            U_d0 <= ap_const_lv32_0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19)) then 
            U_d0 <= grp_dut_svd_basic_fu_424_U_d0;
        else 
            U_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    U_we0_assign_proc : process(ap_sig_cseq_ST_st14_fsm_13, exitcond6_fu_691_p2, grp_dut_svd_basic_fu_424_U_we0, ap_sig_cseq_ST_st20_fsm_19)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13) and (ap_const_lv1_0 = exitcond6_fu_691_p2)))) then 
            U_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19)) then 
            U_we0 <= grp_dut_svd_basic_fu_424_U_we0;
        else 
            U_we0 <= ap_const_logic_0;
        end if; 
    end process;


    V_address0_assign_proc : process(ap_sig_cseq_ST_st14_fsm_13, grp_dut_svd_basic_fu_424_V_address0, ap_sig_cseq_ST_st20_fsm_19, tmp_71_cast_fu_713_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13)) then 
            V_address0 <= tmp_71_cast_fu_713_p1(20 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19)) then 
            V_address0 <= grp_dut_svd_basic_fu_424_V_address0;
        else 
            V_address0 <= "XXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    V_ce0_assign_proc : process(ap_sig_cseq_ST_st14_fsm_13, grp_dut_svd_basic_fu_424_V_ce0, ap_sig_cseq_ST_st15_fsm_14, ap_sig_cseq_ST_st20_fsm_19)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13) or (ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14))) then 
            V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19)) then 
            V_ce0 <= grp_dut_svd_basic_fu_424_V_ce0;
        else 
            V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    V_ce1_assign_proc : process(grp_dut_svd_basic_fu_424_V_ce1, ap_sig_cseq_ST_st20_fsm_19)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19)) then 
            V_ce1 <= grp_dut_svd_basic_fu_424_V_ce1;
        else 
            V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    V_d0_assign_proc : process(ap_sig_cseq_ST_st14_fsm_13, grp_dut_svd_basic_fu_424_V_d0, ap_sig_cseq_ST_st20_fsm_19)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13)) then 
            V_d0 <= ap_const_lv32_0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19)) then 
            V_d0 <= grp_dut_svd_basic_fu_424_V_d0;
        else 
            V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    V_we0_assign_proc : process(ap_sig_cseq_ST_st14_fsm_13, exitcond6_fu_691_p2, grp_dut_svd_basic_fu_424_V_we0, ap_sig_cseq_ST_st20_fsm_19)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13) and (ap_const_lv1_0 = exitcond6_fu_691_p2)))) then 
            V_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19)) then 
            V_we0 <= grp_dut_svd_basic_fu_424_V_we0;
        else 
            V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    XXT_address0_assign_proc : process(ap_sig_cseq_ST_st14_fsm_13, grp_dut_svd_basic_fu_424_A_address0, grp_dut_cov_fu_432_XXT_address0, ap_sig_cseq_ST_st20_fsm_19, ap_sig_cseq_ST_st18_fsm_17, tmp_71_cast_fu_713_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13)) then 
            XXT_address0 <= tmp_71_cast_fu_713_p1(20 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_17)) then 
            XXT_address0 <= grp_dut_cov_fu_432_XXT_address0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19)) then 
            XXT_address0 <= grp_dut_svd_basic_fu_424_A_address0;
        else 
            XXT_address0 <= "XXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    XXT_ce0_assign_proc : process(ap_sig_cseq_ST_st14_fsm_13, grp_dut_svd_basic_fu_424_A_ce0, grp_dut_cov_fu_432_XXT_ce0, ap_sig_cseq_ST_st15_fsm_14, ap_sig_cseq_ST_st20_fsm_19, ap_sig_cseq_ST_st18_fsm_17)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13) or (ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14))) then 
            XXT_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_17)) then 
            XXT_ce0 <= grp_dut_cov_fu_432_XXT_ce0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19)) then 
            XXT_ce0 <= grp_dut_svd_basic_fu_424_A_ce0;
        else 
            XXT_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    XXT_ce1_assign_proc : process(grp_dut_svd_basic_fu_424_A_ce1, ap_sig_cseq_ST_st20_fsm_19)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19)) then 
            XXT_ce1 <= grp_dut_svd_basic_fu_424_A_ce1;
        else 
            XXT_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    XXT_d0_assign_proc : process(ap_sig_cseq_ST_st14_fsm_13, grp_dut_cov_fu_432_XXT_d0, ap_sig_cseq_ST_st18_fsm_17)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13)) then 
            XXT_d0 <= ap_const_lv32_0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_17)) then 
            XXT_d0 <= grp_dut_cov_fu_432_XXT_d0;
        else 
            XXT_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    XXT_we0_assign_proc : process(ap_sig_cseq_ST_st14_fsm_13, exitcond6_fu_691_p2, grp_dut_cov_fu_432_XXT_we0, ap_sig_cseq_ST_st18_fsm_17)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13) and (ap_const_lv1_0 = exitcond6_fu_691_p2)))) then 
            XXT_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_17)) then 
            XXT_we0 <= grp_dut_cov_fu_432_XXT_we0;
        else 
            XXT_we0 <= ap_const_logic_0;
        end if; 
    end process;


    X_address0_assign_proc : process(grp_dut_cov_fu_432_X_address0, grp_dut_normalize_fu_438_X_address0, grp_dut_matrix_multiply_alt2_fu_444_B_address0, ap_sig_cseq_ST_st11_fsm_10, ap_sig_cseq_ST_st24_fsm_23, ap_sig_cseq_ST_st18_fsm_17, ap_sig_cseq_ST_st16_fsm_15, tmp_69_cast_fu_647_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10)) then 
            X_address0 <= tmp_69_cast_fu_647_p1(17 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st24_fsm_23)) then 
            X_address0 <= grp_dut_matrix_multiply_alt2_fu_444_B_address0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15)) then 
            X_address0 <= grp_dut_normalize_fu_438_X_address0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_17)) then 
            X_address0 <= grp_dut_cov_fu_432_X_address0;
        else 
            X_address0 <= "XXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    X_ce0_assign_proc : process(grp_dut_cov_fu_432_X_ce0, grp_dut_normalize_fu_438_X_ce0, grp_dut_matrix_multiply_alt2_fu_444_B_ce0, ap_sig_cseq_ST_st11_fsm_10, ap_sig_cseq_ST_st24_fsm_23, ap_sig_cseq_ST_st18_fsm_17, ap_sig_cseq_ST_st16_fsm_15)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10)) then 
            X_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st24_fsm_23)) then 
            X_ce0 <= grp_dut_matrix_multiply_alt2_fu_444_B_ce0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15)) then 
            X_ce0 <= grp_dut_normalize_fu_438_X_ce0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_17)) then 
            X_ce0 <= grp_dut_cov_fu_432_X_ce0;
        else 
            X_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    X_d0_assign_proc : process(tmp_48_reg_883, grp_dut_normalize_fu_438_X_d0, ap_sig_cseq_ST_st11_fsm_10, ap_sig_cseq_ST_st16_fsm_15)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10)) then 
            X_d0 <= tmp_48_reg_883;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15)) then 
            X_d0 <= grp_dut_normalize_fu_438_X_d0;
        else 
            X_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    X_we0_assign_proc : process(grp_dut_normalize_fu_438_X_we0, ap_sig_cseq_ST_st11_fsm_10, ap_sig_cseq_ST_st16_fsm_15)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10))) then 
            X_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15)) then 
            X_we0 <= grp_dut_normalize_fu_438_X_we0;
        else 
            X_we0 <= ap_const_logic_0;
        end if; 
    end process;


    Y_assign_address0_assign_proc : process(ap_sig_cseq_ST_st26_fsm_25, grp_dut_matrix_multiply_alt2_fu_444_C_address0, ap_sig_cseq_ST_st24_fsm_23, tmp_73_cast_fu_761_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st26_fsm_25)) then 
            Y_assign_address0 <= tmp_73_cast_fu_761_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st24_fsm_23)) then 
            Y_assign_address0 <= grp_dut_matrix_multiply_alt2_fu_444_C_address0;
        else 
            Y_assign_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    Y_assign_ce0_assign_proc : process(ap_sig_cseq_ST_st26_fsm_25, grp_dut_matrix_multiply_alt2_fu_444_C_ce0, ap_sig_cseq_ST_st24_fsm_23)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st26_fsm_25)) then 
            Y_assign_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st24_fsm_23)) then 
            Y_assign_ce0 <= grp_dut_matrix_multiply_alt2_fu_444_C_ce0;
        else 
            Y_assign_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_sig_cseq_ST_st31_fsm_30, exitcond_fu_811_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st31_fsm_30) and not((ap_const_lv1_0 = exitcond_fu_811_p2)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_sig_cseq_ST_st31_fsm_30, exitcond_fu_811_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st31_fsm_30) and not((ap_const_lv1_0 = exitcond_fu_811_p2)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_105_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_105 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    ap_sig_116_assign_proc : process(strm_in_V_V_empty_n, exitcond2_fu_478_p2)
    begin
                ap_sig_116 <= ((exitcond2_fu_478_p2 = ap_const_lv1_0) and (strm_in_V_V_empty_n = ap_const_logic_0));
    end process;


    ap_sig_131_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_131 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    ap_sig_147_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_147 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    ap_sig_156_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_156 <= (ap_const_lv1_1 = ap_CS_fsm(9 downto 9));
    end process;


    ap_sig_165_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_165 <= (ap_const_lv1_1 = ap_CS_fsm(11 downto 11));
    end process;


    ap_sig_174_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_174 <= (ap_const_lv1_1 = ap_CS_fsm(12 downto 12));
    end process;


    ap_sig_185_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_185 <= (ap_const_lv1_1 = ap_CS_fsm(13 downto 13));
    end process;


    ap_sig_205_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_205 <= (ap_const_lv1_1 = ap_CS_fsm(24 downto 24));
    end process;


    ap_sig_216_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_216 <= (ap_const_lv1_1 = ap_CS_fsm(25 downto 25));
    end process;


    ap_sig_230_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_230 <= (ap_const_lv1_1 = ap_CS_fsm(27 downto 27));
    end process;


    ap_sig_241_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_241 <= (ap_const_lv1_1 = ap_CS_fsm(28 downto 28));
    end process;


    ap_sig_255_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_255 <= (ap_const_lv1_1 = ap_CS_fsm(30 downto 30));
    end process;


    ap_sig_47_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_47 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    ap_sig_503_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_503 <= (ap_const_lv1_1 = ap_CS_fsm(10 downto 10));
    end process;


    ap_sig_529_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_529 <= (ap_const_lv1_1 = ap_CS_fsm(14 downto 14));
    end process;


    ap_sig_542_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_542 <= (ap_const_lv1_1 = ap_CS_fsm(23 downto 23));
    end process;


    ap_sig_586_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_586 <= (ap_const_lv1_1 = ap_CS_fsm(18 downto 18));
    end process;


    ap_sig_593_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_593 <= (ap_const_lv1_1 = ap_CS_fsm(19 downto 19));
    end process;


    ap_sig_602_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_602 <= (ap_const_lv1_1 = ap_CS_fsm(16 downto 16));
    end process;


    ap_sig_609_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_609 <= (ap_const_lv1_1 = ap_CS_fsm(17 downto 17));
    end process;


    ap_sig_620_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_620 <= (ap_const_lv1_1 = ap_CS_fsm(15 downto 15));
    end process;


    ap_sig_629_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_629 <= (ap_const_lv1_1 = ap_CS_fsm(22 downto 22));
    end process;


    ap_sig_638_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_638 <= (ap_const_lv1_1 = ap_CS_fsm(20 downto 20));
    end process;


    ap_sig_645_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_645 <= (ap_const_lv1_1 = ap_CS_fsm(21 downto 21));
    end process;


    ap_sig_68_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_68 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    ap_sig_80_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_80 <= (ap_const_lv1_1 = ap_CS_fsm(26 downto 26));
    end process;


    ap_sig_87_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_87 <= (ap_const_lv1_1 = ap_CS_fsm(29 downto 29));
    end process;


    ap_sig_95_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_95 <= (ap_const_lv1_1 = ap_CS_fsm(31 downto 31));
    end process;


    ap_sig_cseq_ST_st10_fsm_9_assign_proc : process(ap_sig_156)
    begin
        if (ap_sig_156) then 
            ap_sig_cseq_ST_st10_fsm_9 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st10_fsm_9 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st11_fsm_10_assign_proc : process(ap_sig_503)
    begin
        if (ap_sig_503) then 
            ap_sig_cseq_ST_st11_fsm_10 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st11_fsm_10 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st12_fsm_11_assign_proc : process(ap_sig_165)
    begin
        if (ap_sig_165) then 
            ap_sig_cseq_ST_st12_fsm_11 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st12_fsm_11 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st13_fsm_12_assign_proc : process(ap_sig_174)
    begin
        if (ap_sig_174) then 
            ap_sig_cseq_ST_st13_fsm_12 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st13_fsm_12 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st14_fsm_13_assign_proc : process(ap_sig_185)
    begin
        if (ap_sig_185) then 
            ap_sig_cseq_ST_st14_fsm_13 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st14_fsm_13 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st15_fsm_14_assign_proc : process(ap_sig_529)
    begin
        if (ap_sig_529) then 
            ap_sig_cseq_ST_st15_fsm_14 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st15_fsm_14 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st16_fsm_15_assign_proc : process(ap_sig_620)
    begin
        if (ap_sig_620) then 
            ap_sig_cseq_ST_st16_fsm_15 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st16_fsm_15 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st17_fsm_16_assign_proc : process(ap_sig_602)
    begin
        if (ap_sig_602) then 
            ap_sig_cseq_ST_st17_fsm_16 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st17_fsm_16 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st18_fsm_17_assign_proc : process(ap_sig_609)
    begin
        if (ap_sig_609) then 
            ap_sig_cseq_ST_st18_fsm_17 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st18_fsm_17 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st19_fsm_18_assign_proc : process(ap_sig_586)
    begin
        if (ap_sig_586) then 
            ap_sig_cseq_ST_st19_fsm_18 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st19_fsm_18 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_47)
    begin
        if (ap_sig_47) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st20_fsm_19_assign_proc : process(ap_sig_593)
    begin
        if (ap_sig_593) then 
            ap_sig_cseq_ST_st20_fsm_19 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st20_fsm_19 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st21_fsm_20_assign_proc : process(ap_sig_638)
    begin
        if (ap_sig_638) then 
            ap_sig_cseq_ST_st21_fsm_20 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st21_fsm_20 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st22_fsm_21_assign_proc : process(ap_sig_645)
    begin
        if (ap_sig_645) then 
            ap_sig_cseq_ST_st22_fsm_21 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st22_fsm_21 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st23_fsm_22_assign_proc : process(ap_sig_629)
    begin
        if (ap_sig_629) then 
            ap_sig_cseq_ST_st23_fsm_22 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st23_fsm_22 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st24_fsm_23_assign_proc : process(ap_sig_542)
    begin
        if (ap_sig_542) then 
            ap_sig_cseq_ST_st24_fsm_23 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st24_fsm_23 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st25_fsm_24_assign_proc : process(ap_sig_205)
    begin
        if (ap_sig_205) then 
            ap_sig_cseq_ST_st25_fsm_24 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st25_fsm_24 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st26_fsm_25_assign_proc : process(ap_sig_216)
    begin
        if (ap_sig_216) then 
            ap_sig_cseq_ST_st26_fsm_25 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st26_fsm_25 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st27_fsm_26_assign_proc : process(ap_sig_80)
    begin
        if (ap_sig_80) then 
            ap_sig_cseq_ST_st27_fsm_26 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st27_fsm_26 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st28_fsm_27_assign_proc : process(ap_sig_230)
    begin
        if (ap_sig_230) then 
            ap_sig_cseq_ST_st28_fsm_27 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st28_fsm_27 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st29_fsm_28_assign_proc : process(ap_sig_241)
    begin
        if (ap_sig_241) then 
            ap_sig_cseq_ST_st29_fsm_28 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st29_fsm_28 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_105)
    begin
        if (ap_sig_105) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st30_fsm_29_assign_proc : process(ap_sig_87)
    begin
        if (ap_sig_87) then 
            ap_sig_cseq_ST_st30_fsm_29 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st30_fsm_29 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st31_fsm_30_assign_proc : process(ap_sig_255)
    begin
        if (ap_sig_255) then 
            ap_sig_cseq_ST_st31_fsm_30 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st31_fsm_30 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st32_fsm_31_assign_proc : process(ap_sig_95)
    begin
        if (ap_sig_95) then 
            ap_sig_cseq_ST_st32_fsm_31 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st32_fsm_31 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_68)
    begin
        if (ap_sig_68) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_131)
    begin
        if (ap_sig_131) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st5_fsm_4_assign_proc : process(ap_sig_147)
    begin
        if (ap_sig_147) then 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond10_fu_656_p2 <= "1" when (i_0_i_reg_300 = ap_const_lv10_310) else "0";
    exitcond1_fu_462_p2 <= "1" when (test_reg_267 = ap_const_lv7_64) else "0";
    exitcond2_fu_478_p2 <= "1" when (i_reg_278 = ap_const_lv8_C4) else "0";
    exitcond3_fu_679_p2 <= "1" when (i1_reg_311 = ap_const_lv10_310) else "0";
    exitcond4_fu_502_p2 <= "1" when (j_reg_289 = ap_const_lv3_4) else "0";
    exitcond5_fu_727_p2 <= "1" when (i3_reg_345 = ap_const_lv4_A) else "0";
    exitcond6_fu_691_p2 <= "1" when (j2_reg_334 = ap_const_lv10_310) else "0";
    exitcond7_fu_772_p2 <= "1" when (i5_reg_379 = ap_const_lv4_A) else "0";
    exitcond8_fu_739_p2 <= "1" when (j4_reg_368 = ap_const_lv7_64) else "0";
    exitcond9_fu_784_p2 <= "1" when (j6_reg_402 = ap_const_lv10_310) else "0";
    exitcond_fu_811_p2 <= "1" when (i7_reg_413 = ap_const_lv10_310) else "0";
    grp_dut_cov_fu_432_ap_start <= ap_reg_grp_dut_cov_fu_432_ap_start;
    grp_dut_matrix_multiply_alt2_fu_444_ap_start <= ap_reg_grp_dut_matrix_multiply_alt2_fu_444_ap_start;
    grp_dut_normalize_fu_438_ap_start <= ap_reg_grp_dut_normalize_fu_438_ap_start;
    grp_dut_rank_fu_451_ap_start <= ap_reg_grp_dut_rank_fu_451_ap_start;
    grp_dut_svd_basic_fu_424_ap_start <= ap_reg_grp_dut_svd_basic_fu_424_ap_start;
    i_0_i_cast8_fu_651_p1 <= std_logic_vector(resize(unsigned(i_0_i_reg_300),32));
    i_1_fu_662_p2 <= std_logic_vector(unsigned(i_0_i_reg_300) + unsigned(ap_const_lv10_1));
    i_2_fu_484_p2 <= std_logic_vector(unsigned(i_reg_278) + unsigned(ap_const_lv8_1));
    i_3_fu_685_p2 <= std_logic_vector(unsigned(i1_reg_311) + unsigned(ap_const_lv10_1));
    i_4_fu_733_p2 <= std_logic_vector(unsigned(i3_reg_345) + unsigned(ap_const_lv4_1));
    i_5_fu_817_p2 <= std_logic_vector(unsigned(i7_reg_413) + unsigned(ap_const_lv10_1));
    i_6_fu_778_p2 <= std_logic_vector(unsigned(i5_reg_379) + unsigned(ap_const_lv4_1));
    j_1_fu_508_p2 <= std_logic_vector(unsigned(j_reg_289) + unsigned(ap_const_lv3_1));
    j_2_fu_697_p2 <= std_logic_vector(unsigned(j2_reg_334) + unsigned(ap_const_lv10_1));
    j_3_fu_745_p2 <= std_logic_vector(unsigned(j4_reg_368) + unsigned(ap_const_lv7_1));
    j_4_fu_790_p2 <= std_logic_vector(unsigned(j6_reg_402) + unsigned(ap_const_lv10_1));
    j_cast_fu_498_p1 <= std_logic_vector(resize(unsigned(j_reg_289),10));

    mean_address0_assign_proc : process(ap_sig_cseq_ST_st31_fsm_30, grp_dut_normalize_fu_438_mean_address0, ap_sig_cseq_ST_st16_fsm_15, tmp_55_fu_823_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st31_fsm_30)) then 
            mean_address0 <= tmp_55_fu_823_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15)) then 
            mean_address0 <= grp_dut_normalize_fu_438_mean_address0;
        else 
            mean_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    mean_ce0_assign_proc : process(ap_sig_cseq_ST_st31_fsm_30, grp_dut_normalize_fu_438_mean_ce0, ap_sig_cseq_ST_st16_fsm_15)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st31_fsm_30)) then 
            mean_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15)) then 
            mean_ce0 <= grp_dut_normalize_fu_438_mean_ce0;
        else 
            mean_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    next_mul2_fu_721_p2 <= std_logic_vector(unsigned(phi_mul1_reg_356) + unsigned(ap_const_lv10_64));
    next_mul4_fu_766_p2 <= std_logic_vector(unsigned(phi_mul3_reg_390) + unsigned(ap_const_lv13_310));
    next_mul_fu_673_p2 <= std_logic_vector(unsigned(phi_mul_reg_322) + unsigned(ap_const_lv20_310));
    p_Result_s_fu_622_p2 <= (tmp_60_fu_610_p2 and tmp_61_fu_616_p2);

    pca_sorted_idx_address0_assign_proc : process(ap_sig_cseq_ST_st12_fsm_11, grp_dut_rank_fu_451_PCA_sorted_idx_address0, ap_sig_cseq_ST_st22_fsm_21, tmp_s_fu_668_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11)) then 
            pca_sorted_idx_address0 <= tmp_s_fu_668_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st22_fsm_21)) then 
            pca_sorted_idx_address0 <= grp_dut_rank_fu_451_PCA_sorted_idx_address0;
        else 
            pca_sorted_idx_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    pca_sorted_idx_ce0_assign_proc : process(ap_sig_cseq_ST_st12_fsm_11, grp_dut_rank_fu_451_PCA_sorted_idx_ce0, ap_sig_cseq_ST_st22_fsm_21)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11)) then 
            pca_sorted_idx_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st22_fsm_21)) then 
            pca_sorted_idx_ce0 <= grp_dut_rank_fu_451_PCA_sorted_idx_ce0;
        else 
            pca_sorted_idx_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    pca_sorted_idx_ce1_assign_proc : process(grp_dut_rank_fu_451_PCA_sorted_idx_ce1, ap_sig_cseq_ST_st22_fsm_21)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st22_fsm_21)) then 
            pca_sorted_idx_ce1 <= grp_dut_rank_fu_451_PCA_sorted_idx_ce1;
        else 
            pca_sorted_idx_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    pca_sorted_idx_d0_assign_proc : process(ap_sig_cseq_ST_st12_fsm_11, grp_dut_rank_fu_451_PCA_sorted_idx_d0, ap_sig_cseq_ST_st22_fsm_21, i_0_i_cast8_fu_651_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11)) then 
            pca_sorted_idx_d0 <= i_0_i_cast8_fu_651_p1;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st22_fsm_21)) then 
            pca_sorted_idx_d0 <= grp_dut_rank_fu_451_PCA_sorted_idx_d0;
        else 
            pca_sorted_idx_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    pca_sorted_idx_we0_assign_proc : process(ap_sig_cseq_ST_st12_fsm_11, grp_dut_rank_fu_451_PCA_sorted_idx_we0, exitcond10_fu_656_p2, ap_sig_cseq_ST_st22_fsm_21)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11) and (ap_const_lv1_0 = exitcond10_fu_656_p2)))) then 
            pca_sorted_idx_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st22_fsm_21)) then 
            pca_sorted_idx_we0 <= grp_dut_rank_fu_451_PCA_sorted_idx_we0;
        else 
            pca_sorted_idx_we0 <= ap_const_logic_0;
        end if; 
    end process;


    strm_in_V_V_blk_n_assign_proc : process(strm_in_V_V_empty_n, ap_sig_cseq_ST_st3_fsm_2, exitcond2_fu_478_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (exitcond2_fu_478_p2 = ap_const_lv1_0))) then 
            strm_in_V_V_blk_n <= strm_in_V_V_empty_n;
        else 
            strm_in_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    strm_in_V_V_read_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2, exitcond2_fu_478_p2, ap_sig_116)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (exitcond2_fu_478_p2 = ap_const_lv1_0) and not(ap_sig_116))) then 
            strm_in_V_V_read <= ap_const_logic_1;
        else 
            strm_in_V_V_read <= ap_const_logic_0;
        end if; 
    end process;


    strm_out_V_blk_n_assign_proc : process(strm_out_V_full_n, ap_sig_cseq_ST_st27_fsm_26, ap_sig_cseq_ST_st30_fsm_29, ap_sig_cseq_ST_st32_fsm_31)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st27_fsm_26) or (ap_const_logic_1 = ap_sig_cseq_ST_st30_fsm_29) or (ap_const_logic_1 = ap_sig_cseq_ST_st32_fsm_31))) then 
            strm_out_V_blk_n <= strm_out_V_full_n;
        else 
            strm_out_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    strm_out_V_din_assign_proc : process(strm_out_V_full_n, ap_sig_cseq_ST_st27_fsm_26, ap_sig_cseq_ST_st30_fsm_29, ap_sig_cseq_ST_st32_fsm_31, Y_assign_q0, tsf_mat_q0, mean_q0)
    begin
        if (not((strm_out_V_full_n = ap_const_logic_0))) then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st32_fsm_31)) then 
                strm_out_V_din <= mean_q0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st30_fsm_29)) then 
                strm_out_V_din <= tsf_mat_q0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st27_fsm_26)) then 
                strm_out_V_din <= Y_assign_q0;
            else 
                strm_out_V_din <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            strm_out_V_din <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    strm_out_V_write_assign_proc : process(strm_out_V_full_n, ap_sig_cseq_ST_st27_fsm_26, ap_sig_cseq_ST_st30_fsm_29, ap_sig_cseq_ST_st32_fsm_31)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st27_fsm_26) and not((strm_out_V_full_n = ap_const_logic_0))) or ((ap_const_logic_1 = ap_sig_cseq_ST_st30_fsm_29) and not((strm_out_V_full_n = ap_const_logic_0))) or ((ap_const_logic_1 = ap_sig_cseq_ST_st32_fsm_31) and not((strm_out_V_full_n = ap_const_logic_0))))) then 
            strm_out_V_write <= ap_const_logic_1;
        else 
            strm_out_V_write <= ap_const_logic_0;
        end if; 
    end process;

    test_1_fu_468_p2 <= std_logic_vector(unsigned(test_reg_267) + unsigned(ap_const_lv7_1));
    tmp_42_fu_532_p2 <= "1" when (unsigned(Lo_assign_fu_518_p3) > unsigned(Hi_assign_fu_526_p2)) else "0";
    tmp_43_fu_538_p1 <= std_logic_vector(resize(unsigned(Lo_assign_fu_518_p3),6));
    tmp_44_fu_542_p1 <= std_logic_vector(resize(unsigned(Hi_assign_fu_526_p2),6));
    
    tmp_45_fu_546_p4_proc : process(tmp_V_reg_849)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_45_fu_546_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_1F(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := tmp_V_reg_849;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_1F(5-1 downto 0)));
            for tmp_45_fu_546_p4_i in 0 to 32-1 loop
                v0_cpy(tmp_45_fu_546_p4_i) := tmp_V_reg_849(32-1-tmp_45_fu_546_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_45_fu_546_p4 <= resvalue(32-1 downto 0);
    end process;

    tmp_46_fu_490_p3 <= (i_reg_278 & ap_const_lv2_0);
    tmp_47_fu_555_p2 <= std_logic_vector(unsigned(tmp_43_fu_538_p1) - unsigned(tmp_44_fu_542_p1));
    tmp_49_fu_628_p2 <= std_logic_vector(unsigned(tmp_46_reg_855) + unsigned(j_cast_fu_498_p1));
    tmp_50_fu_561_p2 <= (tmp_43_fu_538_p1 xor ap_const_lv6_1F);
    tmp_51_fu_567_p2 <= std_logic_vector(unsigned(tmp_44_fu_542_p1) - unsigned(tmp_43_fu_538_p1));
    tmp_52_cast_fu_703_p1 <= std_logic_vector(resize(unsigned(j2_reg_334),20));
    tmp_52_fu_573_p3 <= 
        tmp_47_fu_555_p2 when (tmp_42_fu_532_p2(0) = '1') else 
        tmp_51_fu_567_p2;
    tmp_53_fu_581_p3 <= 
        tmp_45_fu_546_p4 when (tmp_42_fu_532_p2(0) = '1') else 
        tmp_V_reg_849;
    tmp_54_cast_fu_751_p1 <= std_logic_vector(resize(unsigned(j4_reg_368),10));
    tmp_54_fu_588_p3 <= 
        tmp_50_fu_561_p2 when (tmp_42_fu_532_p2(0) = '1') else 
        tmp_43_fu_538_p1;
    tmp_55_fu_823_p1 <= std_logic_vector(resize(unsigned(i7_reg_413),64));
    tmp_56_cast_fu_796_p1 <= std_logic_vector(resize(unsigned(j6_reg_402),13));
    tmp_56_fu_596_p2 <= std_logic_vector(unsigned(ap_const_lv6_1F) - unsigned(tmp_52_fu_573_p3));
    tmp_57_fu_602_p1 <= std_logic_vector(resize(unsigned(tmp_54_fu_588_p3),32));
    tmp_58_fu_606_p1 <= std_logic_vector(resize(unsigned(tmp_56_fu_596_p2),32));
    tmp_59_fu_707_p2 <= std_logic_vector(unsigned(phi_mul_reg_322) + unsigned(tmp_52_cast_fu_703_p1));
    tmp_60_fu_610_p2 <= std_logic_vector(shift_right(unsigned(tmp_53_fu_581_p3),to_integer(unsigned('0' & tmp_57_fu_602_p1(31-1 downto 0)))));
    tmp_61_fu_616_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv32_FFFFFFFF),to_integer(unsigned('0' & tmp_58_fu_606_p1(31-1 downto 0)))));
    tmp_62_fu_636_p1 <= tmp_62_fu_636_p10(10 - 1 downto 0);
    tmp_62_fu_636_p10 <= std_logic_vector(resize(unsigned(tmp_49_reg_873),17));
    tmp_62_fu_636_p2 <= std_logic_vector(resize(unsigned(ap_const_lv17_64) * unsigned(tmp_62_fu_636_p1), 17));
    tmp_63_fu_642_p2 <= std_logic_vector(unsigned(tmp_cast_reg_836) + unsigned(tmp_62_fu_636_p2));
    tmp_64_fu_755_p2 <= std_logic_vector(unsigned(phi_mul1_reg_356) + unsigned(tmp_54_cast_fu_751_p1));
    tmp_67_fu_800_p2 <= std_logic_vector(unsigned(phi_mul3_reg_390) + unsigned(tmp_56_cast_fu_796_p1));
    tmp_69_cast_fu_647_p1 <= std_logic_vector(resize(unsigned(tmp_63_reg_878),64));
    tmp_71_cast_fu_713_p1 <= std_logic_vector(resize(unsigned(tmp_59_fu_707_p2),64));
    tmp_73_cast_fu_761_p1 <= std_logic_vector(resize(unsigned(tmp_64_fu_755_p2),64));
    tmp_76_cast_fu_806_p1 <= std_logic_vector(resize(unsigned(tmp_67_fu_800_p2),64));
    tmp_cast_fu_474_p1 <= std_logic_vector(resize(unsigned(test_reg_267),17));
    tmp_fu_514_p1 <= j_reg_289(2 - 1 downto 0);
    tmp_s_fu_668_p1 <= std_logic_vector(resize(unsigned(i_0_i_reg_300),64));

    tsf_mat_address0_assign_proc : process(ap_sig_cseq_ST_st29_fsm_28, grp_dut_matrix_multiply_alt2_fu_444_A_address0, grp_dut_rank_fu_451_tsf_mat_address0, ap_sig_cseq_ST_st24_fsm_23, ap_sig_cseq_ST_st22_fsm_21, tmp_76_cast_fu_806_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st29_fsm_28)) then 
            tsf_mat_address0 <= tmp_76_cast_fu_806_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st22_fsm_21)) then 
            tsf_mat_address0 <= grp_dut_rank_fu_451_tsf_mat_address0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st24_fsm_23)) then 
            tsf_mat_address0 <= grp_dut_matrix_multiply_alt2_fu_444_A_address0;
        else 
            tsf_mat_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    tsf_mat_ce0_assign_proc : process(ap_sig_cseq_ST_st29_fsm_28, grp_dut_matrix_multiply_alt2_fu_444_A_ce0, grp_dut_rank_fu_451_tsf_mat_ce0, ap_sig_cseq_ST_st24_fsm_23, ap_sig_cseq_ST_st22_fsm_21)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st29_fsm_28)) then 
            tsf_mat_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st22_fsm_21)) then 
            tsf_mat_ce0 <= grp_dut_rank_fu_451_tsf_mat_ce0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st24_fsm_23)) then 
            tsf_mat_ce0 <= grp_dut_matrix_multiply_alt2_fu_444_A_ce0;
        else 
            tsf_mat_ce0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
